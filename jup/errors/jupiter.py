'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import typing;
from anchorpy.error import ProgramError;

class EmptyRoute(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6000, ""
        )

    code = 6000
    name = "EmptyRoute"
    msg = ""
class SlippageToleranceExceeded(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6001, ""
        )

    code = 6001
    name = "SlippageToleranceExceeded"
    msg = ""
class InvalidCalculation(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6002, ""
        )

    code = 6002
    name = "InvalidCalculation"
    msg = ""
class MissingPlatformFeeAccount(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6003, ""
        )

    code = 6003
    name = "MissingPlatformFeeAccount"
    msg = ""
class InvalidSlippage(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6004, ""
        )

    code = 6004
    name = "InvalidSlippage"
    msg = ""
class NotEnoughPercent(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6005, ""
        )

    code = 6005
    name = "NotEnoughPercent"
    msg = ""
class InvalidInputIndex(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6006, ""
        )

    code = 6006
    name = "InvalidInputIndex"
    msg = ""
class InvalidOutputIndex(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6007, ""
        )

    code = 6007
    name = "InvalidOutputIndex"
    msg = ""
class NotEnoughAccountKeys(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6008, ""
        )

    code = 6008
    name = "NotEnoughAccountKeys"
    msg = ""
class NonZeroMinimumOutAmountNotSupported(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6009, ""
        )

    code = 6009
    name = "NonZeroMinimumOutAmountNotSupported"
    msg = ""
class InvalidRoutePlan(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6010, ""
        )

    code = 6010
    name = "InvalidRoutePlan"
    msg = ""
class InvalidReferralAuthority(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6011, ""
        )

    code = 6011
    name = "InvalidReferralAuthority"
    msg = ""
class LedgerTokenAccountDoesNotMatch(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6012, ""
        )

    code = 6012
    name = "LedgerTokenAccountDoesNotMatch"
    msg = ""
class InvalidTokenLedger(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6013, ""
        )

    code = 6013
    name = "InvalidTokenLedger"
    msg = ""
class IncorrectTokenProgramID(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6014, ""
        )

    code = 6014
    name = "IncorrectTokenProgramID"
    msg = ""
class TokenProgramNotProvided(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6015, ""
        )

    code = 6015
    name = "TokenProgramNotProvided"
    msg = ""
class SwapNotSupported(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6016, ""
        )

    code = 6016
    name = "SwapNotSupported"
    msg = ""
class ExactOutAmountNotMatched(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6017, ""
        )

    code = 6017
    name = "ExactOutAmountNotMatched"
    msg = ""
class SourceAndDestinationMintCannotBeTheSame(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6018, ""
        )

    code = 6018
    name = "SourceAndDestinationMintCannotBeTheSame"
    msg = ""

CustomError = typing.Union[
    EmptyRoute,
    SlippageToleranceExceeded,
    InvalidCalculation,
    MissingPlatformFeeAccount,
    InvalidSlippage,
    NotEnoughPercent,
    InvalidInputIndex,
    InvalidOutputIndex,
    NotEnoughAccountKeys,
    NonZeroMinimumOutAmountNotSupported,
    InvalidRoutePlan,
    InvalidReferralAuthority,
    LedgerTokenAccountDoesNotMatch,
    InvalidTokenLedger,
    IncorrectTokenProgramID,
    TokenProgramNotProvided,
    SwapNotSupported,
    ExactOutAmountNotMatched,
    SourceAndDestinationMintCannotBeTheSame,
 ]
CUSTOM_ERROR_MAP: dict[int, CustomError] = {
    6000: EmptyRoute(),
    6001: SlippageToleranceExceeded(),
    6002: InvalidCalculation(),
    6003: MissingPlatformFeeAccount(),
    6004: InvalidSlippage(),
    6005: NotEnoughPercent(),
    6006: InvalidInputIndex(),
    6007: InvalidOutputIndex(),
    6008: NotEnoughAccountKeys(),
    6009: NonZeroMinimumOutAmountNotSupported(),
    6010: InvalidRoutePlan(),
    6011: InvalidReferralAuthority(),
    6012: LedgerTokenAccountDoesNotMatch(),
    6013: InvalidTokenLedger(),
    6014: IncorrectTokenProgramID(),
    6015: TokenProgramNotProvided(),
    6016: SwapNotSupported(),
    6017: ExactOutAmountNotMatched(),
    6018: SourceAndDestinationMintCannotBeTheSame(),
}

def from_code(code: int) -> typing.Optional[CustomError]:
    maybe_err = CUSTOM_ERROR_MAP.get(code)
    if maybe_err is None:
        return None
    return maybe_err

