'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from construct import Construct, Container;
from dataclasses import dataclass;
from solders.instruction import AccountMeta, Instruction;
from solders.pubkey import Pubkey;
from solders.sysvar import RENT;
from .. import types;
from ..program_id import PROGRAM_ID;
class ExactOutRouteArgs(typing.TypedDict):
    routePlan:list[types.routePlanStep.RoutePlanStep]
    outAmount:int
    quotedInAmount:int
    slippageBps:int
    platformFeeBps:int


layout = borsh.CStruct(
    "routePlan" /borsh.Vec(typing.cast(Construct, types.routePlanStep.RoutePlanStep.layout)),
    "outAmount" /borsh.U64,
    "quotedInAmount" /borsh.U64,
    "slippageBps" /borsh.U16,
    "platformFeeBps" /borsh.U8,
    )


class ExactOutRouteAccounts(typing.TypedDict):
    tokenProgram:Pubkey
    userTransferAuthority:Pubkey
    userSourceTokenAccount:Pubkey
    userDestinationTokenAccount:Pubkey
    destinationTokenAccount:Pubkey
    sourceMint:Pubkey
    destinationMint:Pubkey
    platformFeeAccount:Pubkey
    token2022Program:Pubkey
    eventAuthority:Pubkey
    program:Pubkey

def ExactOutRoute(
    args: ExactOutRouteArgs,
    accounts: ExactOutRouteAccounts,
    program_id: Pubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["tokenProgram"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["userTransferAuthority"], is_signer=True, is_writable=False),
    AccountMeta(pubkey=accounts["userSourceTokenAccount"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["userDestinationTokenAccount"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["destinationTokenAccount"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["sourceMint"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["destinationMint"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["platformFeeAccount"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["token2022Program"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["eventAuthority"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["program"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=RENT, is_signer=False, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\xd0\x33\xef\x97\x7b\x2b\xed\x5c"
    encoded_args = layout.build({
    "routePlan":list(map(lambda item:item.to_encodable(),args["routePlan"])),
    "outAmount":args["outAmount"],
    "quotedInAmount":args["quotedInAmount"],
    "slippageBps":args["slippageBps"],
    "platformFeeBps":args["platformFeeBps"],
       })

    data = identifier + encoded_args
    return Instruction(program_id,data,keys)





