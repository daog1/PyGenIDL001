'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from construct import Construct, Container;
from dataclasses import dataclass;
from solders.instruction import AccountMeta, Instruction;
from solders.pubkey import Pubkey as SolPubkey;
from solders.sysvar import RENT;
from .. import types;
from ..program_id import PROGRAM_ID;
class SharedAccountsExactOutRouteArgs(typing.TypedDict):
    id:int
    routePlan:list[types.routePlanStep.RoutePlanStep]
    outAmount:int
    quotedInAmount:int
    slippageBps:int
    platformFeeBps:int


layout = borsh.CStruct(
    "id" /borsh.U8,
    "routePlan" /borsh.Vec(typing.cast(Construct, types.routePlanStep.RoutePlanStep.layout)),
    "outAmount" /borsh.U64,
    "quotedInAmount" /borsh.U64,
    "slippageBps" /borsh.U16,
    "platformFeeBps" /borsh.U8,
    )


class SharedAccountsExactOutRouteAccounts(typing.TypedDict):
    tokenProgram:SolPubkey
    programAuthority:SolPubkey
    userTransferAuthority:SolPubkey
    sourceTokenAccount:SolPubkey
    programSourceTokenAccount:SolPubkey
    programDestinationTokenAccount:SolPubkey
    destinationTokenAccount:SolPubkey
    sourceMint:SolPubkey
    destinationMint:SolPubkey
    platformFeeAccount:SolPubkey
    token2022Program:SolPubkey
    eventAuthority:SolPubkey
    program:SolPubkey

def SharedAccountsExactOutRoute(
    args: SharedAccountsExactOutRouteArgs,
    accounts: SharedAccountsExactOutRouteAccounts,
    program_id: SolPubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["tokenProgram"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["programAuthority"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["userTransferAuthority"], is_signer=True, is_writable=False),
    AccountMeta(pubkey=accounts["sourceTokenAccount"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["programSourceTokenAccount"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["programDestinationTokenAccount"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["destinationTokenAccount"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["sourceMint"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["destinationMint"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["platformFeeAccount"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["token2022Program"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["eventAuthority"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["program"], is_signer=False, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\xb0\xd1\x69\xa8\x9a\x7d\x45\x3e"
    encoded_args = layout.build({
        "id":args["id"],
        "routePlan":list(map(lambda item:item.to_encodable(),args["routePlan"])),
        "outAmount":args["outAmount"],
        "quotedInAmount":args["quotedInAmount"],
        "slippageBps":args["slippageBps"],
        "platformFeeBps":args["platformFeeBps"],
       })

    data = identifier + encoded_args
    return Instruction(program_id,data,keys)





