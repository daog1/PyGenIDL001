'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from construct import Container;
from dataclasses import dataclass;
from solders.instruction import AccountMeta, Instruction;
from solders.pubkey import Pubkey as SolPubkey;
from ..program_id import PROGRAM_ID;
class CreateTokenAccountArgs(typing.TypedDict):
    bump:int


layout = borsh.CStruct(
    "bump" /borsh.U8,
    )


class CreateTokenAccountAccounts(typing.TypedDict):
    tokenAccount:SolPubkey
    user:SolPubkey
    mint:SolPubkey
    tokenProgram:SolPubkey
    systemProgram:SolPubkey

def CreateTokenAccount(
    args: CreateTokenAccountArgs,
    accounts: CreateTokenAccountAccounts,
    program_id: SolPubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["tokenAccount"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["user"], is_signer=True, is_writable=True),
    AccountMeta(pubkey=accounts["mint"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["tokenProgram"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["systemProgram"], is_signer=False, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\x93\xf1\x7b\x64\xf4\x84\xae\x76"
    encoded_args = layout.build({
        "bump":args["bump"],
       })
    data = identifier + encoded_args
    return Instruction(program_id,data,keys)






