'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from construct import Container;
from dataclasses import dataclass;
from solders.instruction import AccountMeta, Instruction;
from solders.pubkey import Pubkey;
from solders.sysvar import RENT;
from ..program_id import PROGRAM_ID;
class CreateProgramOpenOrdersArgs(typing.TypedDict):
    id:int


layout = borsh.CStruct(
    "id" /borsh.U8,
    )


class CreateProgramOpenOrdersAccounts(typing.TypedDict):
    openOrders:Pubkey
    payer:Pubkey
    programAuthority:Pubkey
    dexProgram:Pubkey
    systemProgram:Pubkey
    rent:Pubkey
    market:Pubkey

def CreateProgramOpenOrders(
    args: CreateProgramOpenOrdersArgs,
    accounts: CreateProgramOpenOrdersAccounts,
    program_id: Pubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["openOrders"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["payer"], is_signer=True, is_writable=True),
    AccountMeta(pubkey=accounts["programAuthority"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["dexProgram"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["systemProgram"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["rent"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["market"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=RENT, is_signer=False, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\x1c\xe2\x20\x94\xbc\x88\x71\xab"
    encoded_args = layout.build({
    "id":args["id"],
       })

    data = identifier + encoded_args
    return Instruction(program_id,data,keys)

def find_OpenOrders(market: Pubkey, programAuthority: Pubkey) -> typing.Tuple[Pubkey, int]:
    seeds = [
       b"\x6f\x70\x65\x6e\x5f\x6f\x72\x64\x65\x72\x73",
       bytes(market),
       bytes(programAuthority),
    ]

    address, bump = Pubkey.find_program_address(seeds,
        PROGRAM_ID
            ) # Using solana.publickey

    return address, bump









