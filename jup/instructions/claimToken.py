'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from construct import Container;
from dataclasses import dataclass;
from solders.instruction import AccountMeta, Instruction;
from solders.pubkey import Pubkey as SolPubkey;
from ..program_id import PROGRAM_ID;
class ClaimTokenArgs(typing.TypedDict):
    id:int


layout = borsh.CStruct(
    "id" /borsh.U8,
    )


class ClaimTokenAccounts(typing.TypedDict):
    payer:SolPubkey
    wallet:SolPubkey
    programAuthority:SolPubkey
    programTokenAccount:SolPubkey
    destinationTokenAccount:SolPubkey
    mint:SolPubkey
    tokenProgram:SolPubkey
    associatedTokenProgram:SolPubkey
    systemProgram:SolPubkey

def ClaimToken(
    args: ClaimTokenArgs,
    accounts: ClaimTokenAccounts,
    program_id: SolPubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["payer"], is_signer=True, is_writable=True),
    AccountMeta(pubkey=accounts["wallet"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["programAuthority"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["programTokenAccount"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["destinationTokenAccount"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["mint"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["tokenProgram"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["associatedTokenProgram"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["systemProgram"], is_signer=False, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\x74\xce\x1b\xbf\xa6\x13\x00\x49"
    encoded_args = layout.build({
        "id":args["id"],
       })
    data = identifier + encoded_args
    return Instruction(program_id,data,keys)






def find_DestinationTokenAccount(wallet: SolPubkey, tokenProgram: SolPubkey, mint: SolPubkey) -> typing.Tuple[SolPubkey, int]:
    seeds = [
       bytes(wallet),
       bytes(tokenProgram),
       bytes(mint),
    ]

    address, bump = SolPubkey.find_program_address(seeds,
            program_id=SolPubkey.from_string('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL')
            )

    return address, bump









