'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from anchorpy.borsh_extension import EnumForCodegen
from dataclasses import dataclass


class TransferHookAJSON(typing.TypedDict):
    kind: typing.Literal["TransferHookA"]


@dataclass
class TransferHookA:
    discriminator: typing.ClassVar = 0
    def to_json(self) -> TransferHookAJSON:
        return TransferHookAJSON(
            kind="TransferHookA",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "TransferHookA": {},
        }




class TransferHookBJSON(typing.TypedDict):
    kind: typing.Literal["TransferHookB"]


@dataclass
class TransferHookB:
    discriminator: typing.ClassVar = 1
    def to_json(self) -> TransferHookBJSON:
        return TransferHookBJSON(
            kind="TransferHookB",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "TransferHookB": {},
        }




class TransferHookRewardJSON(typing.TypedDict):
    kind: typing.Literal["TransferHookReward"]


@dataclass
class TransferHookReward:
    discriminator: typing.ClassVar = 2
    def to_json(self) -> TransferHookRewardJSON:
        return TransferHookRewardJSON(
            kind="TransferHookReward",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "TransferHookReward": {},
        }




class TransferHookInputJSON(typing.TypedDict):
    kind: typing.Literal["TransferHookInput"]


@dataclass
class TransferHookInput:
    discriminator: typing.ClassVar = 3
    def to_json(self) -> TransferHookInputJSON:
        return TransferHookInputJSON(
            kind="TransferHookInput",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "TransferHookInput": {},
        }




class TransferHookIntermediateJSON(typing.TypedDict):
    kind: typing.Literal["TransferHookIntermediate"]


@dataclass
class TransferHookIntermediate:
    discriminator: typing.ClassVar = 4
    def to_json(self) -> TransferHookIntermediateJSON:
        return TransferHookIntermediateJSON(
            kind="TransferHookIntermediate",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "TransferHookIntermediate": {},
        }




class TransferHookOutputJSON(typing.TypedDict):
    kind: typing.Literal["TransferHookOutput"]


@dataclass
class TransferHookOutput:
    discriminator: typing.ClassVar = 5
    def to_json(self) -> TransferHookOutputJSON:
        return TransferHookOutputJSON(
            kind="TransferHookOutput",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "TransferHookOutput": {},
        }




class SupplementalTickArraysJSON(typing.TypedDict):
    kind: typing.Literal["SupplementalTickArrays"]


@dataclass
class SupplementalTickArrays:
    discriminator: typing.ClassVar = 6
    def to_json(self) -> SupplementalTickArraysJSON:
        return SupplementalTickArraysJSON(
            kind="SupplementalTickArrays",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "SupplementalTickArrays": {},
        }




class SupplementalTickArraysOneJSON(typing.TypedDict):
    kind: typing.Literal["SupplementalTickArraysOne"]


@dataclass
class SupplementalTickArraysOne:
    discriminator: typing.ClassVar = 7
    def to_json(self) -> SupplementalTickArraysOneJSON:
        return SupplementalTickArraysOneJSON(
            kind="SupplementalTickArraysOne",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "SupplementalTickArraysOne": {},
        }




class SupplementalTickArraysTwoJSON(typing.TypedDict):
    kind: typing.Literal["SupplementalTickArraysTwo"]


@dataclass
class SupplementalTickArraysTwo:
    discriminator: typing.ClassVar = 8
    def to_json(self) -> SupplementalTickArraysTwoJSON:
        return SupplementalTickArraysTwoJSON(
            kind="SupplementalTickArraysTwo",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "SupplementalTickArraysTwo": {},
        }





AccountsTypeKind = typing.Union[
    TransferHookA,
    TransferHookB,
    TransferHookReward,
    TransferHookInput,
    TransferHookIntermediate,
    TransferHookOutput,
    SupplementalTickArrays,
    SupplementalTickArraysOne,
    SupplementalTickArraysTwo,
]
AccountsTypeJSON = typing.Union[
    TransferHookAJSON,
    TransferHookBJSON,
    TransferHookRewardJSON,
    TransferHookInputJSON,
    TransferHookIntermediateJSON,
    TransferHookOutputJSON,
    SupplementalTickArraysJSON,
    SupplementalTickArraysOneJSON,
    SupplementalTickArraysTwoJSON,
]

def from_decoded(obj: dict) -> AccountsTypeKind:
    if not isinstance(obj, dict):
        raise ValueError("Invalid enum object")
    if "TransferHookA" in obj:
      return TransferHookA()
    if "TransferHookB" in obj:
      return TransferHookB()
    if "TransferHookReward" in obj:
      return TransferHookReward()
    if "TransferHookInput" in obj:
      return TransferHookInput()
    if "TransferHookIntermediate" in obj:
      return TransferHookIntermediate()
    if "TransferHookOutput" in obj:
      return TransferHookOutput()
    if "SupplementalTickArrays" in obj:
      return SupplementalTickArrays()
    if "SupplementalTickArraysOne" in obj:
      return SupplementalTickArraysOne()
    if "SupplementalTickArraysTwo" in obj:
      return SupplementalTickArraysTwo()
    raise ValueError("Invalid enum object")

def from_json(obj: AccountsTypeJSON) -> AccountsTypeKind:
    if obj["kind"] == "TransferHookA":
        return TransferHookA()

    if obj["kind"] == "TransferHookB":
        return TransferHookB()

    if obj["kind"] == "TransferHookReward":
        return TransferHookReward()

    if obj["kind"] == "TransferHookInput":
        return TransferHookInput()

    if obj["kind"] == "TransferHookIntermediate":
        return TransferHookIntermediate()

    if obj["kind"] == "TransferHookOutput":
        return TransferHookOutput()

    if obj["kind"] == "SupplementalTickArrays":
        return SupplementalTickArrays()

    if obj["kind"] == "SupplementalTickArraysOne":
        return SupplementalTickArraysOne()

    if obj["kind"] == "SupplementalTickArraysTwo":
        return SupplementalTickArraysTwo()

    kind = obj["kind"]
    raise ValueError(f"Unrecognized enum kind: {kind}")


layout = EnumForCodegen(
"TransferHookA" / borsh.CStruct(),
"TransferHookB" / borsh.CStruct(),
"TransferHookReward" / borsh.CStruct(),
"TransferHookInput" / borsh.CStruct(),
"TransferHookIntermediate" / borsh.CStruct(),
"TransferHookOutput" / borsh.CStruct(),
"SupplementalTickArrays" / borsh.CStruct(),
"SupplementalTickArraysOne" / borsh.CStruct(),
"SupplementalTickArraysTwo" / borsh.CStruct(),
)
