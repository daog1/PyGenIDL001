'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey as SolPubkey;
from solders.sysvar import RENT;
from . import swap;

class RoutePlanStepJSON(typing.TypedDict):
    swap: swap.SwapJSON
    percent: int
    inputIndex: int
    outputIndex: int

@dataclass
class RoutePlanStep:
    layout: typing.ClassVar = borsh.CStruct(
        "swap" /swap.layout,
        "percent" /borsh.U8,
        "inputIndex" /borsh.U8,
        "outputIndex" /borsh.U8,
        )
    #fields
    swap: swap.SwapKind
    percent: int
    inputIndex: int
    outputIndex: int
    
    @classmethod
    def from_decoded(cls, obj: Container) -> "RoutePlanStep":
        return cls(
        swap=swap.from_decoded(obj["swap"]),
        percent=obj["percent"],
        inputIndex=obj["inputIndex"],
        outputIndex=obj["outputIndex"],
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
                "swap": self.swap.to_encodable(),
                "percent": self.percent,
                "inputIndex": self.inputIndex,
                "outputIndex": self.outputIndex,
                }

    def to_json(self) -> RoutePlanStepJSON:
        return {
                "swap": self.swap.to_json(),
                "percent": self.percent,
                "inputIndex": self.inputIndex,
                "outputIndex": self.outputIndex,
                }

    @classmethod
    def from_json(cls, obj: RoutePlanStepJSON) -> "RoutePlanStep":
        return cls(
                swap=swap.from_json(obj["swap"]),
                percent=obj["percent"],
                inputIndex=obj["inputIndex"],
                outputIndex=obj["outputIndex"],
        )






