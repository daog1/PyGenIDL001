'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey, EnumForCodegen;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey;
from solders.sysvar import RENT;
from . import remainingAccountsInfo, side;


class SaberJSON(typing.TypedDict):
    kind: typing.Literal["Saber"]


@dataclass
class Saber:
    discriminator: typing.ClassVar = 0
    def to_json(self) -> SaberJSON:
        return SaberJSON(
            kind="Saber",
        )

    def to_encodable(self) -> dict:
        return {
            "Saber": {},
        }




class SaberAddDecimalsDepositJSON(typing.TypedDict):
    kind: typing.Literal["SaberAddDecimalsDeposit"]


@dataclass
class SaberAddDecimalsDeposit:
    discriminator: typing.ClassVar = 1
    def to_json(self) -> SaberAddDecimalsDepositJSON:
        return SaberAddDecimalsDepositJSON(
            kind="SaberAddDecimalsDeposit",
        )

    def to_encodable(self) -> dict:
        return {
            "SaberAddDecimalsDeposit": {},
        }




class SaberAddDecimalsWithdrawJSON(typing.TypedDict):
    kind: typing.Literal["SaberAddDecimalsWithdraw"]


@dataclass
class SaberAddDecimalsWithdraw:
    discriminator: typing.ClassVar = 2
    def to_json(self) -> SaberAddDecimalsWithdrawJSON:
        return SaberAddDecimalsWithdrawJSON(
            kind="SaberAddDecimalsWithdraw",
        )

    def to_encodable(self) -> dict:
        return {
            "SaberAddDecimalsWithdraw": {},
        }




class TokenSwapJSON(typing.TypedDict):
    kind: typing.Literal["TokenSwap"]


@dataclass
class TokenSwap:
    discriminator: typing.ClassVar = 3
    def to_json(self) -> TokenSwapJSON:
        return TokenSwapJSON(
            kind="TokenSwap",
        )

    def to_encodable(self) -> dict:
        return {
            "TokenSwap": {},
        }




class SenchaJSON(typing.TypedDict):
    kind: typing.Literal["Sencha"]


@dataclass
class Sencha:
    discriminator: typing.ClassVar = 4
    def to_json(self) -> SenchaJSON:
        return SenchaJSON(
            kind="Sencha",
        )

    def to_encodable(self) -> dict:
        return {
            "Sencha": {},
        }




class StepJSON(typing.TypedDict):
    kind: typing.Literal["Step"]


@dataclass
class Step:
    discriminator: typing.ClassVar = 5
    def to_json(self) -> StepJSON:
        return StepJSON(
            kind="Step",
        )

    def to_encodable(self) -> dict:
        return {
            "Step": {},
        }




class CropperJSON(typing.TypedDict):
    kind: typing.Literal["Cropper"]


@dataclass
class Cropper:
    discriminator: typing.ClassVar = 6
    def to_json(self) -> CropperJSON:
        return CropperJSON(
            kind="Cropper",
        )

    def to_encodable(self) -> dict:
        return {
            "Cropper": {},
        }




class RaydiumJSON(typing.TypedDict):
    kind: typing.Literal["Raydium"]


@dataclass
class Raydium:
    discriminator: typing.ClassVar = 7
    def to_json(self) -> RaydiumJSON:
        return RaydiumJSON(
            kind="Raydium",
        )

    def to_encodable(self) -> dict:
        return {
            "Raydium": {},
        }



class CremaJSONValue(typing.TypedDict):
    #kind: typing.Literal["Crema"]
    aToB: bool
class CremaValue(typing.TypedDict):
    aToB: bool




class CremaJSON(typing.TypedDict):
    kind: typing.Literal["Crema"]
    value: CremaJSONValue


@dataclass
class Crema:
    discriminator: typing.ClassVar = 8
    value : CremaValue
    def to_json(self) -> CremaJSON:
        return CremaJSON(
            kind="Crema",
            value = {
            "aToB":self.value["aToB"]
            }
        )

    def to_encodable(self) -> dict:
        return {
            "Crema": {},
        }




class LifinityJSON(typing.TypedDict):
    kind: typing.Literal["Lifinity"]


@dataclass
class Lifinity:
    discriminator: typing.ClassVar = 9
    def to_json(self) -> LifinityJSON:
        return LifinityJSON(
            kind="Lifinity",
        )

    def to_encodable(self) -> dict:
        return {
            "Lifinity": {},
        }




class MercurialJSON(typing.TypedDict):
    kind: typing.Literal["Mercurial"]


@dataclass
class Mercurial:
    discriminator: typing.ClassVar = 10
    def to_json(self) -> MercurialJSON:
        return MercurialJSON(
            kind="Mercurial",
        )

    def to_encodable(self) -> dict:
        return {
            "Mercurial": {},
        }




class CykuraJSON(typing.TypedDict):
    kind: typing.Literal["Cykura"]


@dataclass
class Cykura:
    discriminator: typing.ClassVar = 11
    def to_json(self) -> CykuraJSON:
        return CykuraJSON(
            kind="Cykura",
        )

    def to_encodable(self) -> dict:
        return {
            "Cykura": {},
        }



class SerumJSONValue(typing.TypedDict):
    #kind: typing.Literal["Serum"]
    side: side.SideJSON
class SerumValue(typing.TypedDict):
    side: side.SideKind




class SerumJSON(typing.TypedDict):
    kind: typing.Literal["Serum"]
    value: SerumJSONValue


@dataclass
class Serum:
    discriminator: typing.ClassVar = 12
    value : SerumValue
    def to_json(self) -> SerumJSON:
        return SerumJSON(
            kind="Serum",
            value = {
            "side":self.value["side"].to_json()
            }
        )

    def to_encodable(self) -> dict:
        return {
            "Serum": {},
        }




class MarinadeDepositJSON(typing.TypedDict):
    kind: typing.Literal["MarinadeDeposit"]


@dataclass
class MarinadeDeposit:
    discriminator: typing.ClassVar = 13
    def to_json(self) -> MarinadeDepositJSON:
        return MarinadeDepositJSON(
            kind="MarinadeDeposit",
        )

    def to_encodable(self) -> dict:
        return {
            "MarinadeDeposit": {},
        }




class MarinadeUnstakeJSON(typing.TypedDict):
    kind: typing.Literal["MarinadeUnstake"]


@dataclass
class MarinadeUnstake:
    discriminator: typing.ClassVar = 14
    def to_json(self) -> MarinadeUnstakeJSON:
        return MarinadeUnstakeJSON(
            kind="MarinadeUnstake",
        )

    def to_encodable(self) -> dict:
        return {
            "MarinadeUnstake": {},
        }



class AldrinJSONValue(typing.TypedDict):
    #kind: typing.Literal["Aldrin"]
    side: side.SideJSON
class AldrinValue(typing.TypedDict):
    side: side.SideKind




class AldrinJSON(typing.TypedDict):
    kind: typing.Literal["Aldrin"]
    value: AldrinJSONValue


@dataclass
class Aldrin:
    discriminator: typing.ClassVar = 15
    value : AldrinValue
    def to_json(self) -> AldrinJSON:
        return AldrinJSON(
            kind="Aldrin",
            value = {
            "side":self.value["side"].to_json()
            }
        )

    def to_encodable(self) -> dict:
        return {
            "Aldrin": {},
        }



class AldrinV2JSONValue(typing.TypedDict):
    #kind: typing.Literal["AldrinV2"]
    side: side.SideJSON
class AldrinV2Value(typing.TypedDict):
    side: side.SideKind




class AldrinV2JSON(typing.TypedDict):
    kind: typing.Literal["AldrinV2"]
    value: AldrinV2JSONValue


@dataclass
class AldrinV2:
    discriminator: typing.ClassVar = 16
    value : AldrinV2Value
    def to_json(self) -> AldrinV2JSON:
        return AldrinV2JSON(
            kind="AldrinV2",
            value = {
            "side":self.value["side"].to_json()
            }
        )

    def to_encodable(self) -> dict:
        return {
            "AldrinV2": {},
        }



class WhirlpoolJSONValue(typing.TypedDict):
    #kind: typing.Literal["Whirlpool"]
    aToB: bool
class WhirlpoolValue(typing.TypedDict):
    aToB: bool




class WhirlpoolJSON(typing.TypedDict):
    kind: typing.Literal["Whirlpool"]
    value: WhirlpoolJSONValue


@dataclass
class Whirlpool:
    discriminator: typing.ClassVar = 17
    value : WhirlpoolValue
    def to_json(self) -> WhirlpoolJSON:
        return WhirlpoolJSON(
            kind="Whirlpool",
            value = {
            "aToB":self.value["aToB"]
            }
        )

    def to_encodable(self) -> dict:
        return {
            "Whirlpool": {},
        }



class InvariantJSONValue(typing.TypedDict):
    #kind: typing.Literal["Invariant"]
    xToY: bool
class InvariantValue(typing.TypedDict):
    xToY: bool




class InvariantJSON(typing.TypedDict):
    kind: typing.Literal["Invariant"]
    value: InvariantJSONValue


@dataclass
class Invariant:
    discriminator: typing.ClassVar = 18
    value : InvariantValue
    def to_json(self) -> InvariantJSON:
        return InvariantJSON(
            kind="Invariant",
            value = {
            "xToY":self.value["xToY"]
            }
        )

    def to_encodable(self) -> dict:
        return {
            "Invariant": {},
        }




class MeteoraJSON(typing.TypedDict):
    kind: typing.Literal["Meteora"]


@dataclass
class Meteora:
    discriminator: typing.ClassVar = 19
    def to_json(self) -> MeteoraJSON:
        return MeteoraJSON(
            kind="Meteora",
        )

    def to_encodable(self) -> dict:
        return {
            "Meteora": {},
        }




class GooseFXJSON(typing.TypedDict):
    kind: typing.Literal["GooseFX"]


@dataclass
class GooseFX:
    discriminator: typing.ClassVar = 20
    def to_json(self) -> GooseFXJSON:
        return GooseFXJSON(
            kind="GooseFX",
        )

    def to_encodable(self) -> dict:
        return {
            "GooseFX": {},
        }



class DeltaFiJSONValue(typing.TypedDict):
    #kind: typing.Literal["DeltaFi"]
    stable: bool
class DeltaFiValue(typing.TypedDict):
    stable: bool




class DeltaFiJSON(typing.TypedDict):
    kind: typing.Literal["DeltaFi"]
    value: DeltaFiJSONValue


@dataclass
class DeltaFi:
    discriminator: typing.ClassVar = 21
    value : DeltaFiValue
    def to_json(self) -> DeltaFiJSON:
        return DeltaFiJSON(
            kind="DeltaFi",
            value = {
            "stable":self.value["stable"]
            }
        )

    def to_encodable(self) -> dict:
        return {
            "DeltaFi": {},
        }




class BalansolJSON(typing.TypedDict):
    kind: typing.Literal["Balansol"]


@dataclass
class Balansol:
    discriminator: typing.ClassVar = 22
    def to_json(self) -> BalansolJSON:
        return BalansolJSON(
            kind="Balansol",
        )

    def to_encodable(self) -> dict:
        return {
            "Balansol": {},
        }



class MarcoPoloJSONValue(typing.TypedDict):
    #kind: typing.Literal["MarcoPolo"]
    xToY: bool
class MarcoPoloValue(typing.TypedDict):
    xToY: bool




class MarcoPoloJSON(typing.TypedDict):
    kind: typing.Literal["MarcoPolo"]
    value: MarcoPoloJSONValue


@dataclass
class MarcoPolo:
    discriminator: typing.ClassVar = 23
    value : MarcoPoloValue
    def to_json(self) -> MarcoPoloJSON:
        return MarcoPoloJSON(
            kind="MarcoPolo",
            value = {
            "xToY":self.value["xToY"]
            }
        )

    def to_encodable(self) -> dict:
        return {
            "MarcoPolo": {},
        }



class DradexJSONValue(typing.TypedDict):
    #kind: typing.Literal["Dradex"]
    side: side.SideJSON
class DradexValue(typing.TypedDict):
    side: side.SideKind




class DradexJSON(typing.TypedDict):
    kind: typing.Literal["Dradex"]
    value: DradexJSONValue


@dataclass
class Dradex:
    discriminator: typing.ClassVar = 24
    value : DradexValue
    def to_json(self) -> DradexJSON:
        return DradexJSON(
            kind="Dradex",
            value = {
            "side":self.value["side"].to_json()
            }
        )

    def to_encodable(self) -> dict:
        return {
            "Dradex": {},
        }




class LifinityV2JSON(typing.TypedDict):
    kind: typing.Literal["LifinityV2"]


@dataclass
class LifinityV2:
    discriminator: typing.ClassVar = 25
    def to_json(self) -> LifinityV2JSON:
        return LifinityV2JSON(
            kind="LifinityV2",
        )

    def to_encodable(self) -> dict:
        return {
            "LifinityV2": {},
        }




class RaydiumClmmJSON(typing.TypedDict):
    kind: typing.Literal["RaydiumClmm"]


@dataclass
class RaydiumClmm:
    discriminator: typing.ClassVar = 26
    def to_json(self) -> RaydiumClmmJSON:
        return RaydiumClmmJSON(
            kind="RaydiumClmm",
        )

    def to_encodable(self) -> dict:
        return {
            "RaydiumClmm": {},
        }



class OpenbookJSONValue(typing.TypedDict):
    #kind: typing.Literal["Openbook"]
    side: side.SideJSON
class OpenbookValue(typing.TypedDict):
    side: side.SideKind




class OpenbookJSON(typing.TypedDict):
    kind: typing.Literal["Openbook"]
    value: OpenbookJSONValue


@dataclass
class Openbook:
    discriminator: typing.ClassVar = 27
    value : OpenbookValue
    def to_json(self) -> OpenbookJSON:
        return OpenbookJSON(
            kind="Openbook",
            value = {
            "side":self.value["side"].to_json()
            }
        )

    def to_encodable(self) -> dict:
        return {
            "Openbook": {},
        }



class PhoenixJSONValue(typing.TypedDict):
    #kind: typing.Literal["Phoenix"]
    side: side.SideJSON
class PhoenixValue(typing.TypedDict):
    side: side.SideKind




class PhoenixJSON(typing.TypedDict):
    kind: typing.Literal["Phoenix"]
    value: PhoenixJSONValue


@dataclass
class Phoenix:
    discriminator: typing.ClassVar = 28
    value : PhoenixValue
    def to_json(self) -> PhoenixJSON:
        return PhoenixJSON(
            kind="Phoenix",
            value = {
            "side":self.value["side"].to_json()
            }
        )

    def to_encodable(self) -> dict:
        return {
            "Phoenix": {},
        }



class SymmetryJSONValue(typing.TypedDict):
    #kind: typing.Literal["Symmetry"]
    fromTokenId: int
    toTokenId: int
class SymmetryValue(typing.TypedDict):
    fromTokenId: int
    toTokenId: int




class SymmetryJSON(typing.TypedDict):
    kind: typing.Literal["Symmetry"]
    value: SymmetryJSONValue


@dataclass
class Symmetry:
    discriminator: typing.ClassVar = 29
    value : SymmetryValue
    def to_json(self) -> SymmetryJSON:
        return SymmetryJSON(
            kind="Symmetry",
            value = {
            "fromTokenId":self.value["fromTokenId"],"toTokenId":self.value["toTokenId"]
            }
        )

    def to_encodable(self) -> dict:
        return {
            "Symmetry": {},
        }




class TokenSwapV2JSON(typing.TypedDict):
    kind: typing.Literal["TokenSwapV2"]


@dataclass
class TokenSwapV2:
    discriminator: typing.ClassVar = 30
    def to_json(self) -> TokenSwapV2JSON:
        return TokenSwapV2JSON(
            kind="TokenSwapV2",
        )

    def to_encodable(self) -> dict:
        return {
            "TokenSwapV2": {},
        }




class HeliumTreasuryManagementRedeemV0JSON(typing.TypedDict):
    kind: typing.Literal["HeliumTreasuryManagementRedeemV0"]


@dataclass
class HeliumTreasuryManagementRedeemV0:
    discriminator: typing.ClassVar = 31
    def to_json(self) -> HeliumTreasuryManagementRedeemV0JSON:
        return HeliumTreasuryManagementRedeemV0JSON(
            kind="HeliumTreasuryManagementRedeemV0",
        )

    def to_encodable(self) -> dict:
        return {
            "HeliumTreasuryManagementRedeemV0": {},
        }




class StakeDexStakeWrappedSolJSON(typing.TypedDict):
    kind: typing.Literal["StakeDexStakeWrappedSol"]


@dataclass
class StakeDexStakeWrappedSol:
    discriminator: typing.ClassVar = 32
    def to_json(self) -> StakeDexStakeWrappedSolJSON:
        return StakeDexStakeWrappedSolJSON(
            kind="StakeDexStakeWrappedSol",
        )

    def to_encodable(self) -> dict:
        return {
            "StakeDexStakeWrappedSol": {},
        }



class StakeDexSwapViaStakeJSONValue(typing.TypedDict):
    #kind: typing.Literal["StakeDexSwapViaStake"]
    bridgeStakeSeed: int
class StakeDexSwapViaStakeValue(typing.TypedDict):
    bridgeStakeSeed: int




class StakeDexSwapViaStakeJSON(typing.TypedDict):
    kind: typing.Literal["StakeDexSwapViaStake"]
    value: StakeDexSwapViaStakeJSONValue


@dataclass
class StakeDexSwapViaStake:
    discriminator: typing.ClassVar = 33
    value : StakeDexSwapViaStakeValue
    def to_json(self) -> StakeDexSwapViaStakeJSON:
        return StakeDexSwapViaStakeJSON(
            kind="StakeDexSwapViaStake",
            value = {
            "bridgeStakeSeed":self.value["bridgeStakeSeed"]
            }
        )

    def to_encodable(self) -> dict:
        return {
            "StakeDexSwapViaStake": {},
        }




class GooseFXV2JSON(typing.TypedDict):
    kind: typing.Literal["GooseFXV2"]


@dataclass
class GooseFXV2:
    discriminator: typing.ClassVar = 34
    def to_json(self) -> GooseFXV2JSON:
        return GooseFXV2JSON(
            kind="GooseFXV2",
        )

    def to_encodable(self) -> dict:
        return {
            "GooseFXV2": {},
        }




class PerpsJSON(typing.TypedDict):
    kind: typing.Literal["Perps"]


@dataclass
class Perps:
    discriminator: typing.ClassVar = 35
    def to_json(self) -> PerpsJSON:
        return PerpsJSON(
            kind="Perps",
        )

    def to_encodable(self) -> dict:
        return {
            "Perps": {},
        }




class PerpsAddLiquidityJSON(typing.TypedDict):
    kind: typing.Literal["PerpsAddLiquidity"]


@dataclass
class PerpsAddLiquidity:
    discriminator: typing.ClassVar = 36
    def to_json(self) -> PerpsAddLiquidityJSON:
        return PerpsAddLiquidityJSON(
            kind="PerpsAddLiquidity",
        )

    def to_encodable(self) -> dict:
        return {
            "PerpsAddLiquidity": {},
        }




class PerpsRemoveLiquidityJSON(typing.TypedDict):
    kind: typing.Literal["PerpsRemoveLiquidity"]


@dataclass
class PerpsRemoveLiquidity:
    discriminator: typing.ClassVar = 37
    def to_json(self) -> PerpsRemoveLiquidityJSON:
        return PerpsRemoveLiquidityJSON(
            kind="PerpsRemoveLiquidity",
        )

    def to_encodable(self) -> dict:
        return {
            "PerpsRemoveLiquidity": {},
        }




class MeteoraDlmmJSON(typing.TypedDict):
    kind: typing.Literal["MeteoraDlmm"]


@dataclass
class MeteoraDlmm:
    discriminator: typing.ClassVar = 38
    def to_json(self) -> MeteoraDlmmJSON:
        return MeteoraDlmmJSON(
            kind="MeteoraDlmm",
        )

    def to_encodable(self) -> dict:
        return {
            "MeteoraDlmm": {},
        }



class OpenBookV2JSONValue(typing.TypedDict):
    #kind: typing.Literal["OpenBookV2"]
    side: side.SideJSON
class OpenBookV2Value(typing.TypedDict):
    side: side.SideKind




class OpenBookV2JSON(typing.TypedDict):
    kind: typing.Literal["OpenBookV2"]
    value: OpenBookV2JSONValue


@dataclass
class OpenBookV2:
    discriminator: typing.ClassVar = 39
    value : OpenBookV2Value
    def to_json(self) -> OpenBookV2JSON:
        return OpenBookV2JSON(
            kind="OpenBookV2",
            value = {
            "side":self.value["side"].to_json()
            }
        )

    def to_encodable(self) -> dict:
        return {
            "OpenBookV2": {},
        }




class RaydiumClmmV2JSON(typing.TypedDict):
    kind: typing.Literal["RaydiumClmmV2"]


@dataclass
class RaydiumClmmV2:
    discriminator: typing.ClassVar = 40
    def to_json(self) -> RaydiumClmmV2JSON:
        return RaydiumClmmV2JSON(
            kind="RaydiumClmmV2",
        )

    def to_encodable(self) -> dict:
        return {
            "RaydiumClmmV2": {},
        }



class StakeDexPrefundWithdrawStakeAndDepositStakeJSONValue(typing.TypedDict):
    #kind: typing.Literal["StakeDexPrefundWithdrawStakeAndDepositStake"]
    bridgeStakeSeed: int
class StakeDexPrefundWithdrawStakeAndDepositStakeValue(typing.TypedDict):
    bridgeStakeSeed: int




class StakeDexPrefundWithdrawStakeAndDepositStakeJSON(typing.TypedDict):
    kind: typing.Literal["StakeDexPrefundWithdrawStakeAndDepositStake"]
    value: StakeDexPrefundWithdrawStakeAndDepositStakeJSONValue


@dataclass
class StakeDexPrefundWithdrawStakeAndDepositStake:
    discriminator: typing.ClassVar = 41
    value : StakeDexPrefundWithdrawStakeAndDepositStakeValue
    def to_json(self) -> StakeDexPrefundWithdrawStakeAndDepositStakeJSON:
        return StakeDexPrefundWithdrawStakeAndDepositStakeJSON(
            kind="StakeDexPrefundWithdrawStakeAndDepositStake",
            value = {
            "bridgeStakeSeed":self.value["bridgeStakeSeed"]
            }
        )

    def to_encodable(self) -> dict:
        return {
            "StakeDexPrefundWithdrawStakeAndDepositStake": {},
        }



class CloneJSONValue(typing.TypedDict):
    #kind: typing.Literal["Clone"]
    poolIndex: int
    quantityIsInput: bool
    quantityIsCollateral: bool
class CloneValue(typing.TypedDict):
    poolIndex: int
    quantityIsInput: bool
    quantityIsCollateral: bool




class CloneJSON(typing.TypedDict):
    kind: typing.Literal["Clone"]
    value: CloneJSONValue


@dataclass
class Clone:
    discriminator: typing.ClassVar = 42
    value : CloneValue
    def to_json(self) -> CloneJSON:
        return CloneJSON(
            kind="Clone",
            value = {
            "poolIndex":self.value["poolIndex"],"quantityIsInput":self.value["quantityIsInput"],"quantityIsCollateral":self.value["quantityIsCollateral"]
            }
        )

    def to_encodable(self) -> dict:
        return {
            "Clone": {},
        }



class SanctumSJSONValue(typing.TypedDict):
    #kind: typing.Literal["SanctumS"]
    srcLstValueCalcAccs: int
    dstLstValueCalcAccs: int
    srcLstIndex: int
    dstLstIndex: int
class SanctumSValue(typing.TypedDict):
    srcLstValueCalcAccs: int
    dstLstValueCalcAccs: int
    srcLstIndex: int
    dstLstIndex: int




class SanctumSJSON(typing.TypedDict):
    kind: typing.Literal["SanctumS"]
    value: SanctumSJSONValue


@dataclass
class SanctumS:
    discriminator: typing.ClassVar = 43
    value : SanctumSValue
    def to_json(self) -> SanctumSJSON:
        return SanctumSJSON(
            kind="SanctumS",
            value = {
            "srcLstValueCalcAccs":self.value["srcLstValueCalcAccs"],"dstLstValueCalcAccs":self.value["dstLstValueCalcAccs"],"srcLstIndex":self.value["srcLstIndex"],"dstLstIndex":self.value["dstLstIndex"]
            }
        )

    def to_encodable(self) -> dict:
        return {
            "SanctumS": {},
        }



class SanctumSAddLiquidityJSONValue(typing.TypedDict):
    #kind: typing.Literal["SanctumSAddLiquidity"]
    lstValueCalcAccs: int
    lstIndex: int
class SanctumSAddLiquidityValue(typing.TypedDict):
    lstValueCalcAccs: int
    lstIndex: int




class SanctumSAddLiquidityJSON(typing.TypedDict):
    kind: typing.Literal["SanctumSAddLiquidity"]
    value: SanctumSAddLiquidityJSONValue


@dataclass
class SanctumSAddLiquidity:
    discriminator: typing.ClassVar = 44
    value : SanctumSAddLiquidityValue
    def to_json(self) -> SanctumSAddLiquidityJSON:
        return SanctumSAddLiquidityJSON(
            kind="SanctumSAddLiquidity",
            value = {
            "lstValueCalcAccs":self.value["lstValueCalcAccs"],"lstIndex":self.value["lstIndex"]
            }
        )

    def to_encodable(self) -> dict:
        return {
            "SanctumSAddLiquidity": {},
        }



class SanctumSRemoveLiquidityJSONValue(typing.TypedDict):
    #kind: typing.Literal["SanctumSRemoveLiquidity"]
    lstValueCalcAccs: int
    lstIndex: int
class SanctumSRemoveLiquidityValue(typing.TypedDict):
    lstValueCalcAccs: int
    lstIndex: int




class SanctumSRemoveLiquidityJSON(typing.TypedDict):
    kind: typing.Literal["SanctumSRemoveLiquidity"]
    value: SanctumSRemoveLiquidityJSONValue


@dataclass
class SanctumSRemoveLiquidity:
    discriminator: typing.ClassVar = 45
    value : SanctumSRemoveLiquidityValue
    def to_json(self) -> SanctumSRemoveLiquidityJSON:
        return SanctumSRemoveLiquidityJSON(
            kind="SanctumSRemoveLiquidity",
            value = {
            "lstValueCalcAccs":self.value["lstValueCalcAccs"],"lstIndex":self.value["lstIndex"]
            }
        )

    def to_encodable(self) -> dict:
        return {
            "SanctumSRemoveLiquidity": {},
        }




class RaydiumCPJSON(typing.TypedDict):
    kind: typing.Literal["RaydiumCP"]


@dataclass
class RaydiumCP:
    discriminator: typing.ClassVar = 46
    def to_json(self) -> RaydiumCPJSON:
        return RaydiumCPJSON(
            kind="RaydiumCP",
        )

    def to_encodable(self) -> dict:
        return {
            "RaydiumCP": {},
        }



class WhirlpoolSwapV2JSONValue(typing.TypedDict):
    #kind: typing.Literal["WhirlpoolSwapV2"]
    aToB: bool
    remainingAccountsInfo: typing.Optional[remainingAccountsInfo.RemainingAccountsInfoJSON]
class WhirlpoolSwapV2Value(typing.TypedDict):
    aToB: bool
    remainingAccountsInfo: typing.Optional[remainingAccountsInfo.RemainingAccountsInfo]




class WhirlpoolSwapV2JSON(typing.TypedDict):
    kind: typing.Literal["WhirlpoolSwapV2"]
    value: WhirlpoolSwapV2JSONValue


@dataclass
class WhirlpoolSwapV2:
    discriminator: typing.ClassVar = 47
    value : WhirlpoolSwapV2Value
    def to_json(self) -> WhirlpoolSwapV2JSON:
        return WhirlpoolSwapV2JSON(
            kind="WhirlpoolSwapV2",
            value = {
            "aToB":self.value["aToB"],"remainingAccountsInfo":(None if self.value["remainingAccountsInfo"] is None else self.value["remainingAccountsInfo"].to_json())
            }
        )

    def to_encodable(self) -> dict:
        return {
            "WhirlpoolSwapV2": {},
        }




class OneIntroJSON(typing.TypedDict):
    kind: typing.Literal["OneIntro"]


@dataclass
class OneIntro:
    discriminator: typing.ClassVar = 48
    def to_json(self) -> OneIntroJSON:
        return OneIntroJSON(
            kind="OneIntro",
        )

    def to_encodable(self) -> dict:
        return {
            "OneIntro": {},
        }




class PumpdotfunWrappedBuyJSON(typing.TypedDict):
    kind: typing.Literal["PumpdotfunWrappedBuy"]


@dataclass
class PumpdotfunWrappedBuy:
    discriminator: typing.ClassVar = 49
    def to_json(self) -> PumpdotfunWrappedBuyJSON:
        return PumpdotfunWrappedBuyJSON(
            kind="PumpdotfunWrappedBuy",
        )

    def to_encodable(self) -> dict:
        return {
            "PumpdotfunWrappedBuy": {},
        }




class PumpdotfunWrappedSellJSON(typing.TypedDict):
    kind: typing.Literal["PumpdotfunWrappedSell"]


@dataclass
class PumpdotfunWrappedSell:
    discriminator: typing.ClassVar = 50
    def to_json(self) -> PumpdotfunWrappedSellJSON:
        return PumpdotfunWrappedSellJSON(
            kind="PumpdotfunWrappedSell",
        )

    def to_encodable(self) -> dict:
        return {
            "PumpdotfunWrappedSell": {},
        }




class PerpsV2JSON(typing.TypedDict):
    kind: typing.Literal["PerpsV2"]


@dataclass
class PerpsV2:
    discriminator: typing.ClassVar = 51
    def to_json(self) -> PerpsV2JSON:
        return PerpsV2JSON(
            kind="PerpsV2",
        )

    def to_encodable(self) -> dict:
        return {
            "PerpsV2": {},
        }




class PerpsV2AddLiquidityJSON(typing.TypedDict):
    kind: typing.Literal["PerpsV2AddLiquidity"]


@dataclass
class PerpsV2AddLiquidity:
    discriminator: typing.ClassVar = 52
    def to_json(self) -> PerpsV2AddLiquidityJSON:
        return PerpsV2AddLiquidityJSON(
            kind="PerpsV2AddLiquidity",
        )

    def to_encodable(self) -> dict:
        return {
            "PerpsV2AddLiquidity": {},
        }




class PerpsV2RemoveLiquidityJSON(typing.TypedDict):
    kind: typing.Literal["PerpsV2RemoveLiquidity"]


@dataclass
class PerpsV2RemoveLiquidity:
    discriminator: typing.ClassVar = 53
    def to_json(self) -> PerpsV2RemoveLiquidityJSON:
        return PerpsV2RemoveLiquidityJSON(
            kind="PerpsV2RemoveLiquidity",
        )

    def to_encodable(self) -> dict:
        return {
            "PerpsV2RemoveLiquidity": {},
        }




class MoonshotWrappedBuyJSON(typing.TypedDict):
    kind: typing.Literal["MoonshotWrappedBuy"]


@dataclass
class MoonshotWrappedBuy:
    discriminator: typing.ClassVar = 54
    def to_json(self) -> MoonshotWrappedBuyJSON:
        return MoonshotWrappedBuyJSON(
            kind="MoonshotWrappedBuy",
        )

    def to_encodable(self) -> dict:
        return {
            "MoonshotWrappedBuy": {},
        }




class MoonshotWrappedSellJSON(typing.TypedDict):
    kind: typing.Literal["MoonshotWrappedSell"]


@dataclass
class MoonshotWrappedSell:
    discriminator: typing.ClassVar = 55
    def to_json(self) -> MoonshotWrappedSellJSON:
        return MoonshotWrappedSellJSON(
            kind="MoonshotWrappedSell",
        )

    def to_encodable(self) -> dict:
        return {
            "MoonshotWrappedSell": {},
        }




class StabbleStableSwapJSON(typing.TypedDict):
    kind: typing.Literal["StabbleStableSwap"]


@dataclass
class StabbleStableSwap:
    discriminator: typing.ClassVar = 56
    def to_json(self) -> StabbleStableSwapJSON:
        return StabbleStableSwapJSON(
            kind="StabbleStableSwap",
        )

    def to_encodable(self) -> dict:
        return {
            "StabbleStableSwap": {},
        }




class StabbleWeightedSwapJSON(typing.TypedDict):
    kind: typing.Literal["StabbleWeightedSwap"]


@dataclass
class StabbleWeightedSwap:
    discriminator: typing.ClassVar = 57
    def to_json(self) -> StabbleWeightedSwapJSON:
        return StabbleWeightedSwapJSON(
            kind="StabbleWeightedSwap",
        )

    def to_encodable(self) -> dict:
        return {
            "StabbleWeightedSwap": {},
        }



class ObricJSONValue(typing.TypedDict):
    #kind: typing.Literal["Obric"]
    xToY: bool
class ObricValue(typing.TypedDict):
    xToY: bool




class ObricJSON(typing.TypedDict):
    kind: typing.Literal["Obric"]
    value: ObricJSONValue


@dataclass
class Obric:
    discriminator: typing.ClassVar = 58
    value : ObricValue
    def to_json(self) -> ObricJSON:
        return ObricJSON(
            kind="Obric",
            value = {
            "xToY":self.value["xToY"]
            }
        )

    def to_encodable(self) -> dict:
        return {
            "Obric": {},
        }




class FoxBuyFromEstimatedCostJSON(typing.TypedDict):
    kind: typing.Literal["FoxBuyFromEstimatedCost"]


@dataclass
class FoxBuyFromEstimatedCost:
    discriminator: typing.ClassVar = 59
    def to_json(self) -> FoxBuyFromEstimatedCostJSON:
        return FoxBuyFromEstimatedCostJSON(
            kind="FoxBuyFromEstimatedCost",
        )

    def to_encodable(self) -> dict:
        return {
            "FoxBuyFromEstimatedCost": {},
        }



class FoxClaimPartialJSONValue(typing.TypedDict):
    #kind: typing.Literal["FoxClaimPartial"]
    isY: bool
class FoxClaimPartialValue(typing.TypedDict):
    isY: bool




class FoxClaimPartialJSON(typing.TypedDict):
    kind: typing.Literal["FoxClaimPartial"]
    value: FoxClaimPartialJSONValue


@dataclass
class FoxClaimPartial:
    discriminator: typing.ClassVar = 60
    value : FoxClaimPartialValue
    def to_json(self) -> FoxClaimPartialJSON:
        return FoxClaimPartialJSON(
            kind="FoxClaimPartial",
            value = {
            "isY":self.value["isY"]
            }
        )

    def to_encodable(self) -> dict:
        return {
            "FoxClaimPartial": {},
        }



class SolFiJSONValue(typing.TypedDict):
    #kind: typing.Literal["SolFi"]
    isQuoteToBase: bool
class SolFiValue(typing.TypedDict):
    isQuoteToBase: bool




class SolFiJSON(typing.TypedDict):
    kind: typing.Literal["SolFi"]
    value: SolFiJSONValue


@dataclass
class SolFi:
    discriminator: typing.ClassVar = 61
    value : SolFiValue
    def to_json(self) -> SolFiJSON:
        return SolFiJSON(
            kind="SolFi",
            value = {
            "isQuoteToBase":self.value["isQuoteToBase"]
            }
        )

    def to_encodable(self) -> dict:
        return {
            "SolFi": {},
        }




class SolayerDelegateNoInitJSON(typing.TypedDict):
    kind: typing.Literal["SolayerDelegateNoInit"]


@dataclass
class SolayerDelegateNoInit:
    discriminator: typing.ClassVar = 62
    def to_json(self) -> SolayerDelegateNoInitJSON:
        return SolayerDelegateNoInitJSON(
            kind="SolayerDelegateNoInit",
        )

    def to_encodable(self) -> dict:
        return {
            "SolayerDelegateNoInit": {},
        }




class SolayerUndelegateNoInitJSON(typing.TypedDict):
    kind: typing.Literal["SolayerUndelegateNoInit"]


@dataclass
class SolayerUndelegateNoInit:
    discriminator: typing.ClassVar = 63
    def to_json(self) -> SolayerUndelegateNoInitJSON:
        return SolayerUndelegateNoInitJSON(
            kind="SolayerUndelegateNoInit",
        )

    def to_encodable(self) -> dict:
        return {
            "SolayerUndelegateNoInit": {},
        }



class TokenMillJSONValue(typing.TypedDict):
    #kind: typing.Literal["TokenMill"]
    side: side.SideJSON
class TokenMillValue(typing.TypedDict):
    side: side.SideKind




class TokenMillJSON(typing.TypedDict):
    kind: typing.Literal["TokenMill"]
    value: TokenMillJSONValue


@dataclass
class TokenMill:
    discriminator: typing.ClassVar = 64
    value : TokenMillValue
    def to_json(self) -> TokenMillJSON:
        return TokenMillJSON(
            kind="TokenMill",
            value = {
            "side":self.value["side"].to_json()
            }
        )

    def to_encodable(self) -> dict:
        return {
            "TokenMill": {},
        }




class DaosFunBuyJSON(typing.TypedDict):
    kind: typing.Literal["DaosFunBuy"]


@dataclass
class DaosFunBuy:
    discriminator: typing.ClassVar = 65
    def to_json(self) -> DaosFunBuyJSON:
        return DaosFunBuyJSON(
            kind="DaosFunBuy",
        )

    def to_encodable(self) -> dict:
        return {
            "DaosFunBuy": {},
        }




class DaosFunSellJSON(typing.TypedDict):
    kind: typing.Literal["DaosFunSell"]


@dataclass
class DaosFunSell:
    discriminator: typing.ClassVar = 66
    def to_json(self) -> DaosFunSellJSON:
        return DaosFunSellJSON(
            kind="DaosFunSell",
        )

    def to_encodable(self) -> dict:
        return {
            "DaosFunSell": {},
        }




class ZeroFiJSON(typing.TypedDict):
    kind: typing.Literal["ZeroFi"]


@dataclass
class ZeroFi:
    discriminator: typing.ClassVar = 67
    def to_json(self) -> ZeroFiJSON:
        return ZeroFiJSON(
            kind="ZeroFi",
        )

    def to_encodable(self) -> dict:
        return {
            "ZeroFi": {},
        }




class StakeDexWithdrawWrappedSolJSON(typing.TypedDict):
    kind: typing.Literal["StakeDexWithdrawWrappedSol"]


@dataclass
class StakeDexWithdrawWrappedSol:
    discriminator: typing.ClassVar = 68
    def to_json(self) -> StakeDexWithdrawWrappedSolJSON:
        return StakeDexWithdrawWrappedSolJSON(
            kind="StakeDexWithdrawWrappedSol",
        )

    def to_encodable(self) -> dict:
        return {
            "StakeDexWithdrawWrappedSol": {},
        }




class VirtualsBuyJSON(typing.TypedDict):
    kind: typing.Literal["VirtualsBuy"]


@dataclass
class VirtualsBuy:
    discriminator: typing.ClassVar = 69
    def to_json(self) -> VirtualsBuyJSON:
        return VirtualsBuyJSON(
            kind="VirtualsBuy",
        )

    def to_encodable(self) -> dict:
        return {
            "VirtualsBuy": {},
        }




class VirtualsSellJSON(typing.TypedDict):
    kind: typing.Literal["VirtualsSell"]


@dataclass
class VirtualsSell:
    discriminator: typing.ClassVar = 70
    def to_json(self) -> VirtualsSellJSON:
        return VirtualsSellJSON(
            kind="VirtualsSell",
        )

    def to_encodable(self) -> dict:
        return {
            "VirtualsSell": {},
        }



class PerenaJSONValue(typing.TypedDict):
    #kind: typing.Literal["Perena"]
    inIndex: int
    outIndex: int
class PerenaValue(typing.TypedDict):
    inIndex: int
    outIndex: int




class PerenaJSON(typing.TypedDict):
    kind: typing.Literal["Perena"]
    value: PerenaJSONValue


@dataclass
class Perena:
    discriminator: typing.ClassVar = 71
    value : PerenaValue
    def to_json(self) -> PerenaJSON:
        return PerenaJSON(
            kind="Perena",
            value = {
            "inIndex":self.value["inIndex"],"outIndex":self.value["outIndex"]
            }
        )

    def to_encodable(self) -> dict:
        return {
            "Perena": {},
        }




class PumpdotfunAmmBuyJSON(typing.TypedDict):
    kind: typing.Literal["PumpdotfunAmmBuy"]


@dataclass
class PumpdotfunAmmBuy:
    discriminator: typing.ClassVar = 72
    def to_json(self) -> PumpdotfunAmmBuyJSON:
        return PumpdotfunAmmBuyJSON(
            kind="PumpdotfunAmmBuy",
        )

    def to_encodable(self) -> dict:
        return {
            "PumpdotfunAmmBuy": {},
        }




class PumpdotfunAmmSellJSON(typing.TypedDict):
    kind: typing.Literal["PumpdotfunAmmSell"]


@dataclass
class PumpdotfunAmmSell:
    discriminator: typing.ClassVar = 73
    def to_json(self) -> PumpdotfunAmmSellJSON:
        return PumpdotfunAmmSellJSON(
            kind="PumpdotfunAmmSell",
        )

    def to_encodable(self) -> dict:
        return {
            "PumpdotfunAmmSell": {},
        }




class GammaJSON(typing.TypedDict):
    kind: typing.Literal["Gamma"]


@dataclass
class Gamma:
    discriminator: typing.ClassVar = 74
    def to_json(self) -> GammaJSON:
        return GammaJSON(
            kind="Gamma",
        )

    def to_encodable(self) -> dict:
        return {
            "Gamma": {},
        }



class MeteoraDlmmSwapV2JSONValue(typing.TypedDict):
    #kind: typing.Literal["MeteoraDlmmSwapV2"]
    remainingAccountsInfo: remainingAccountsInfo.RemainingAccountsInfoJSON
class MeteoraDlmmSwapV2Value(typing.TypedDict):
    remainingAccountsInfo: remainingAccountsInfo.RemainingAccountsInfo




class MeteoraDlmmSwapV2JSON(typing.TypedDict):
    kind: typing.Literal["MeteoraDlmmSwapV2"]
    value: MeteoraDlmmSwapV2JSONValue


@dataclass
class MeteoraDlmmSwapV2:
    discriminator: typing.ClassVar = 75
    value : MeteoraDlmmSwapV2Value
    def to_json(self) -> MeteoraDlmmSwapV2JSON:
        return MeteoraDlmmSwapV2JSON(
            kind="MeteoraDlmmSwapV2",
            value = {
            "remainingAccountsInfo":self.value["remainingAccountsInfo"].to_json()
            }
        )

    def to_encodable(self) -> dict:
        return {
            "MeteoraDlmmSwapV2": {},
        }




class WoofiJSON(typing.TypedDict):
    kind: typing.Literal["Woofi"]


@dataclass
class Woofi:
    discriminator: typing.ClassVar = 76
    def to_json(self) -> WoofiJSON:
        return WoofiJSON(
            kind="Woofi",
        )

    def to_encodable(self) -> dict:
        return {
            "Woofi": {},
        }




class MeteoraDammV2JSON(typing.TypedDict):
    kind: typing.Literal["MeteoraDammV2"]


@dataclass
class MeteoraDammV2:
    discriminator: typing.ClassVar = 77
    def to_json(self) -> MeteoraDammV2JSON:
        return MeteoraDammV2JSON(
            kind="MeteoraDammV2",
        )

    def to_encodable(self) -> dict:
        return {
            "MeteoraDammV2": {},
        }




class MeteoraDynamicBondingCurveSwapJSON(typing.TypedDict):
    kind: typing.Literal["MeteoraDynamicBondingCurveSwap"]


@dataclass
class MeteoraDynamicBondingCurveSwap:
    discriminator: typing.ClassVar = 78
    def to_json(self) -> MeteoraDynamicBondingCurveSwapJSON:
        return MeteoraDynamicBondingCurveSwapJSON(
            kind="MeteoraDynamicBondingCurveSwap",
        )

    def to_encodable(self) -> dict:
        return {
            "MeteoraDynamicBondingCurveSwap": {},
        }




class StabbleStableSwapV2JSON(typing.TypedDict):
    kind: typing.Literal["StabbleStableSwapV2"]


@dataclass
class StabbleStableSwapV2:
    discriminator: typing.ClassVar = 79
    def to_json(self) -> StabbleStableSwapV2JSON:
        return StabbleStableSwapV2JSON(
            kind="StabbleStableSwapV2",
        )

    def to_encodable(self) -> dict:
        return {
            "StabbleStableSwapV2": {},
        }




class StabbleWeightedSwapV2JSON(typing.TypedDict):
    kind: typing.Literal["StabbleWeightedSwapV2"]


@dataclass
class StabbleWeightedSwapV2:
    discriminator: typing.ClassVar = 80
    def to_json(self) -> StabbleWeightedSwapV2JSON:
        return StabbleWeightedSwapV2JSON(
            kind="StabbleWeightedSwapV2",
        )

    def to_encodable(self) -> dict:
        return {
            "StabbleWeightedSwapV2": {},
        }



class RaydiumLaunchlabBuyJSONValue(typing.TypedDict):
    #kind: typing.Literal["RaydiumLaunchlabBuy"]
    shareFeeRate: int
class RaydiumLaunchlabBuyValue(typing.TypedDict):
    shareFeeRate: int




class RaydiumLaunchlabBuyJSON(typing.TypedDict):
    kind: typing.Literal["RaydiumLaunchlabBuy"]
    value: RaydiumLaunchlabBuyJSONValue


@dataclass
class RaydiumLaunchlabBuy:
    discriminator: typing.ClassVar = 81
    value : RaydiumLaunchlabBuyValue
    def to_json(self) -> RaydiumLaunchlabBuyJSON:
        return RaydiumLaunchlabBuyJSON(
            kind="RaydiumLaunchlabBuy",
            value = {
            "shareFeeRate":self.value["shareFeeRate"]
            }
        )

    def to_encodable(self) -> dict:
        return {
            "RaydiumLaunchlabBuy": {},
        }



class RaydiumLaunchlabSellJSONValue(typing.TypedDict):
    #kind: typing.Literal["RaydiumLaunchlabSell"]
    shareFeeRate: int
class RaydiumLaunchlabSellValue(typing.TypedDict):
    shareFeeRate: int




class RaydiumLaunchlabSellJSON(typing.TypedDict):
    kind: typing.Literal["RaydiumLaunchlabSell"]
    value: RaydiumLaunchlabSellJSONValue


@dataclass
class RaydiumLaunchlabSell:
    discriminator: typing.ClassVar = 82
    value : RaydiumLaunchlabSellValue
    def to_json(self) -> RaydiumLaunchlabSellJSON:
        return RaydiumLaunchlabSellJSON(
            kind="RaydiumLaunchlabSell",
            value = {
            "shareFeeRate":self.value["shareFeeRate"]
            }
        )

    def to_encodable(self) -> dict:
        return {
            "RaydiumLaunchlabSell": {},
        }




class BoopdotfunWrappedBuyJSON(typing.TypedDict):
    kind: typing.Literal["BoopdotfunWrappedBuy"]


@dataclass
class BoopdotfunWrappedBuy:
    discriminator: typing.ClassVar = 83
    def to_json(self) -> BoopdotfunWrappedBuyJSON:
        return BoopdotfunWrappedBuyJSON(
            kind="BoopdotfunWrappedBuy",
        )

    def to_encodable(self) -> dict:
        return {
            "BoopdotfunWrappedBuy": {},
        }




class BoopdotfunWrappedSellJSON(typing.TypedDict):
    kind: typing.Literal["BoopdotfunWrappedSell"]


@dataclass
class BoopdotfunWrappedSell:
    discriminator: typing.ClassVar = 84
    def to_json(self) -> BoopdotfunWrappedSellJSON:
        return BoopdotfunWrappedSellJSON(
            kind="BoopdotfunWrappedSell",
        )

    def to_encodable(self) -> dict:
        return {
            "BoopdotfunWrappedSell": {},
        }



class PlasmaJSONValue(typing.TypedDict):
    #kind: typing.Literal["Plasma"]
    side: side.SideJSON
class PlasmaValue(typing.TypedDict):
    side: side.SideKind




class PlasmaJSON(typing.TypedDict):
    kind: typing.Literal["Plasma"]
    value: PlasmaJSONValue


@dataclass
class Plasma:
    discriminator: typing.ClassVar = 85
    value : PlasmaValue
    def to_json(self) -> PlasmaJSON:
        return PlasmaJSON(
            kind="Plasma",
            value = {
            "side":self.value["side"].to_json()
            }
        )

    def to_encodable(self) -> dict:
        return {
            "Plasma": {},
        }





SwapKind = typing.Union[
Saber,
SaberAddDecimalsDeposit,
SaberAddDecimalsWithdraw,
TokenSwap,
Sencha,
Step,
Cropper,
Raydium,
Crema,
Lifinity,
Mercurial,
Cykura,
Serum,
MarinadeDeposit,
MarinadeUnstake,
Aldrin,
AldrinV2,
Whirlpool,
Invariant,
Meteora,
GooseFX,
DeltaFi,
Balansol,
MarcoPolo,
Dradex,
LifinityV2,
RaydiumClmm,
Openbook,
Phoenix,
Symmetry,
TokenSwapV2,
HeliumTreasuryManagementRedeemV0,
StakeDexStakeWrappedSol,
StakeDexSwapViaStake,
GooseFXV2,
Perps,
PerpsAddLiquidity,
PerpsRemoveLiquidity,
MeteoraDlmm,
OpenBookV2,
RaydiumClmmV2,
StakeDexPrefundWithdrawStakeAndDepositStake,
Clone,
SanctumS,
SanctumSAddLiquidity,
SanctumSRemoveLiquidity,
RaydiumCP,
WhirlpoolSwapV2,
OneIntro,
PumpdotfunWrappedBuy,
PumpdotfunWrappedSell,
PerpsV2,
PerpsV2AddLiquidity,
PerpsV2RemoveLiquidity,
MoonshotWrappedBuy,
MoonshotWrappedSell,
StabbleStableSwap,
StabbleWeightedSwap,
Obric,
FoxBuyFromEstimatedCost,
FoxClaimPartial,
SolFi,
SolayerDelegateNoInit,
SolayerUndelegateNoInit,
TokenMill,
DaosFunBuy,
DaosFunSell,
ZeroFi,
StakeDexWithdrawWrappedSol,
VirtualsBuy,
VirtualsSell,
Perena,
PumpdotfunAmmBuy,
PumpdotfunAmmSell,
Gamma,
MeteoraDlmmSwapV2,
Woofi,
MeteoraDammV2,
MeteoraDynamicBondingCurveSwap,
StabbleStableSwapV2,
StabbleWeightedSwapV2,
RaydiumLaunchlabBuy,
RaydiumLaunchlabSell,
BoopdotfunWrappedBuy,
BoopdotfunWrappedSell,
Plasma,
]
SwapJSON = typing.Union[
SaberJSON,
SaberAddDecimalsDepositJSON,
SaberAddDecimalsWithdrawJSON,
TokenSwapJSON,
SenchaJSON,
StepJSON,
CropperJSON,
RaydiumJSON,
CremaJSON,
LifinityJSON,
MercurialJSON,
CykuraJSON,
SerumJSON,
MarinadeDepositJSON,
MarinadeUnstakeJSON,
AldrinJSON,
AldrinV2JSON,
WhirlpoolJSON,
InvariantJSON,
MeteoraJSON,
GooseFXJSON,
DeltaFiJSON,
BalansolJSON,
MarcoPoloJSON,
DradexJSON,
LifinityV2JSON,
RaydiumClmmJSON,
OpenbookJSON,
PhoenixJSON,
SymmetryJSON,
TokenSwapV2JSON,
HeliumTreasuryManagementRedeemV0JSON,
StakeDexStakeWrappedSolJSON,
StakeDexSwapViaStakeJSON,
GooseFXV2JSON,
PerpsJSON,
PerpsAddLiquidityJSON,
PerpsRemoveLiquidityJSON,
MeteoraDlmmJSON,
OpenBookV2JSON,
RaydiumClmmV2JSON,
StakeDexPrefundWithdrawStakeAndDepositStakeJSON,
CloneJSON,
SanctumSJSON,
SanctumSAddLiquidityJSON,
SanctumSRemoveLiquidityJSON,
RaydiumCPJSON,
WhirlpoolSwapV2JSON,
OneIntroJSON,
PumpdotfunWrappedBuyJSON,
PumpdotfunWrappedSellJSON,
PerpsV2JSON,
PerpsV2AddLiquidityJSON,
PerpsV2RemoveLiquidityJSON,
MoonshotWrappedBuyJSON,
MoonshotWrappedSellJSON,
StabbleStableSwapJSON,
StabbleWeightedSwapJSON,
ObricJSON,
FoxBuyFromEstimatedCostJSON,
FoxClaimPartialJSON,
SolFiJSON,
SolayerDelegateNoInitJSON,
SolayerUndelegateNoInitJSON,
TokenMillJSON,
DaosFunBuyJSON,
DaosFunSellJSON,
ZeroFiJSON,
StakeDexWithdrawWrappedSolJSON,
VirtualsBuyJSON,
VirtualsSellJSON,
PerenaJSON,
PumpdotfunAmmBuyJSON,
PumpdotfunAmmSellJSON,
GammaJSON,
MeteoraDlmmSwapV2JSON,
WoofiJSON,
MeteoraDammV2JSON,
MeteoraDynamicBondingCurveSwapJSON,
StabbleStableSwapV2JSON,
StabbleWeightedSwapV2JSON,
RaydiumLaunchlabBuyJSON,
RaydiumLaunchlabSellJSON,
BoopdotfunWrappedBuyJSON,
BoopdotfunWrappedSellJSON,
PlasmaJSON,
]

def from_decoded(obj: dict) -> SwapKind:
    if not isinstance(obj, dict):
        raise ValueError("Invalid enum object")
    if "Saber" in obj:
      return Saber()
    if "SaberAddDecimalsDeposit" in obj:
      return SaberAddDecimalsDeposit()
    if "SaberAddDecimalsWithdraw" in obj:
      return SaberAddDecimalsWithdraw()
    if "TokenSwap" in obj:
      return TokenSwap()
    if "Sencha" in obj:
      return Sencha()
    if "Step" in obj:
      return Step()
    if "Cropper" in obj:
      return Cropper()
    if "Raydium" in obj:
      return Raydium()
    if "Crema" in obj:
      val = obj["Crema"]
      return Crema(
            CremaValue(
                aToB= val["aToB"]
            )
        )

    if "Lifinity" in obj:
      return Lifinity()
    if "Mercurial" in obj:
      return Mercurial()
    if "Cykura" in obj:
      return Cykura()
    if "Serum" in obj:
      val = obj["Serum"]
      return Serum(
            SerumValue(
                side= side.from_decoded(val["side"])
            )
        )

    if "MarinadeDeposit" in obj:
      return MarinadeDeposit()
    if "MarinadeUnstake" in obj:
      return MarinadeUnstake()
    if "Aldrin" in obj:
      val = obj["Aldrin"]
      return Aldrin(
            AldrinValue(
                side= side.from_decoded(val["side"])
            )
        )

    if "AldrinV2" in obj:
      val = obj["AldrinV2"]
      return AldrinV2(
            AldrinV2Value(
                side= side.from_decoded(val["side"])
            )
        )

    if "Whirlpool" in obj:
      val = obj["Whirlpool"]
      return Whirlpool(
            WhirlpoolValue(
                aToB= val["aToB"]
            )
        )

    if "Invariant" in obj:
      val = obj["Invariant"]
      return Invariant(
            InvariantValue(
                xToY= val["xToY"]
            )
        )

    if "Meteora" in obj:
      return Meteora()
    if "GooseFX" in obj:
      return GooseFX()
    if "DeltaFi" in obj:
      val = obj["DeltaFi"]
      return DeltaFi(
            DeltaFiValue(
                stable= val["stable"]
            )
        )

    if "Balansol" in obj:
      return Balansol()
    if "MarcoPolo" in obj:
      val = obj["MarcoPolo"]
      return MarcoPolo(
            MarcoPoloValue(
                xToY= val["xToY"]
            )
        )

    if "Dradex" in obj:
      val = obj["Dradex"]
      return Dradex(
            DradexValue(
                side= side.from_decoded(val["side"])
            )
        )

    if "LifinityV2" in obj:
      return LifinityV2()
    if "RaydiumClmm" in obj:
      return RaydiumClmm()
    if "Openbook" in obj:
      val = obj["Openbook"]
      return Openbook(
            OpenbookValue(
                side= side.from_decoded(val["side"])
            )
        )

    if "Phoenix" in obj:
      val = obj["Phoenix"]
      return Phoenix(
            PhoenixValue(
                side= side.from_decoded(val["side"])
            )
        )

    if "Symmetry" in obj:
      val = obj["Symmetry"]
      return Symmetry(
            SymmetryValue(
                fromTokenId= val["fromTokenId"],toTokenId= val["toTokenId"]
            )
        )

    if "TokenSwapV2" in obj:
      return TokenSwapV2()
    if "HeliumTreasuryManagementRedeemV0" in obj:
      return HeliumTreasuryManagementRedeemV0()
    if "StakeDexStakeWrappedSol" in obj:
      return StakeDexStakeWrappedSol()
    if "StakeDexSwapViaStake" in obj:
      val = obj["StakeDexSwapViaStake"]
      return StakeDexSwapViaStake(
            StakeDexSwapViaStakeValue(
                bridgeStakeSeed= val["bridgeStakeSeed"]
            )
        )

    if "GooseFXV2" in obj:
      return GooseFXV2()
    if "Perps" in obj:
      return Perps()
    if "PerpsAddLiquidity" in obj:
      return PerpsAddLiquidity()
    if "PerpsRemoveLiquidity" in obj:
      return PerpsRemoveLiquidity()
    if "MeteoraDlmm" in obj:
      return MeteoraDlmm()
    if "OpenBookV2" in obj:
      val = obj["OpenBookV2"]
      return OpenBookV2(
            OpenBookV2Value(
                side= side.from_decoded(val["side"])
            )
        )

    if "RaydiumClmmV2" in obj:
      return RaydiumClmmV2()
    if "StakeDexPrefundWithdrawStakeAndDepositStake" in obj:
      val = obj["StakeDexPrefundWithdrawStakeAndDepositStake"]
      return StakeDexPrefundWithdrawStakeAndDepositStake(
            StakeDexPrefundWithdrawStakeAndDepositStakeValue(
                bridgeStakeSeed= val["bridgeStakeSeed"]
            )
        )

    if "Clone" in obj:
      val = obj["Clone"]
      return Clone(
            CloneValue(
                poolIndex= val["poolIndex"],quantityIsInput= val["quantityIsInput"],quantityIsCollateral= val["quantityIsCollateral"]
            )
        )

    if "SanctumS" in obj:
      val = obj["SanctumS"]
      return SanctumS(
            SanctumSValue(
                srcLstValueCalcAccs= val["srcLstValueCalcAccs"],dstLstValueCalcAccs= val["dstLstValueCalcAccs"],srcLstIndex= val["srcLstIndex"],dstLstIndex= val["dstLstIndex"]
            )
        )

    if "SanctumSAddLiquidity" in obj:
      val = obj["SanctumSAddLiquidity"]
      return SanctumSAddLiquidity(
            SanctumSAddLiquidityValue(
                lstValueCalcAccs= val["lstValueCalcAccs"],lstIndex= val["lstIndex"]
            )
        )

    if "SanctumSRemoveLiquidity" in obj:
      val = obj["SanctumSRemoveLiquidity"]
      return SanctumSRemoveLiquidity(
            SanctumSRemoveLiquidityValue(
                lstValueCalcAccs= val["lstValueCalcAccs"],lstIndex= val["lstIndex"]
            )
        )

    if "RaydiumCP" in obj:
      return RaydiumCP()
    if "WhirlpoolSwapV2" in obj:
      val = obj["WhirlpoolSwapV2"]
      return WhirlpoolSwapV2(
            WhirlpoolSwapV2Value(
                aToB= val["aToB"],remainingAccountsInfo= (None if val["remainingAccountsInfo"] is None else remainingAccountsInfo.RemainingAccountsInfo.from_decoded(val["remainingAccountsInfo"]))
            )
        )

    if "OneIntro" in obj:
      return OneIntro()
    if "PumpdotfunWrappedBuy" in obj:
      return PumpdotfunWrappedBuy()
    if "PumpdotfunWrappedSell" in obj:
      return PumpdotfunWrappedSell()
    if "PerpsV2" in obj:
      return PerpsV2()
    if "PerpsV2AddLiquidity" in obj:
      return PerpsV2AddLiquidity()
    if "PerpsV2RemoveLiquidity" in obj:
      return PerpsV2RemoveLiquidity()
    if "MoonshotWrappedBuy" in obj:
      return MoonshotWrappedBuy()
    if "MoonshotWrappedSell" in obj:
      return MoonshotWrappedSell()
    if "StabbleStableSwap" in obj:
      return StabbleStableSwap()
    if "StabbleWeightedSwap" in obj:
      return StabbleWeightedSwap()
    if "Obric" in obj:
      val = obj["Obric"]
      return Obric(
            ObricValue(
                xToY= val["xToY"]
            )
        )

    if "FoxBuyFromEstimatedCost" in obj:
      return FoxBuyFromEstimatedCost()
    if "FoxClaimPartial" in obj:
      val = obj["FoxClaimPartial"]
      return FoxClaimPartial(
            FoxClaimPartialValue(
                isY= val["isY"]
            )
        )

    if "SolFi" in obj:
      val = obj["SolFi"]
      return SolFi(
            SolFiValue(
                isQuoteToBase= val["isQuoteToBase"]
            )
        )

    if "SolayerDelegateNoInit" in obj:
      return SolayerDelegateNoInit()
    if "SolayerUndelegateNoInit" in obj:
      return SolayerUndelegateNoInit()
    if "TokenMill" in obj:
      val = obj["TokenMill"]
      return TokenMill(
            TokenMillValue(
                side= side.from_decoded(val["side"])
            )
        )

    if "DaosFunBuy" in obj:
      return DaosFunBuy()
    if "DaosFunSell" in obj:
      return DaosFunSell()
    if "ZeroFi" in obj:
      return ZeroFi()
    if "StakeDexWithdrawWrappedSol" in obj:
      return StakeDexWithdrawWrappedSol()
    if "VirtualsBuy" in obj:
      return VirtualsBuy()
    if "VirtualsSell" in obj:
      return VirtualsSell()
    if "Perena" in obj:
      val = obj["Perena"]
      return Perena(
            PerenaValue(
                inIndex= val["inIndex"],outIndex= val["outIndex"]
            )
        )

    if "PumpdotfunAmmBuy" in obj:
      return PumpdotfunAmmBuy()
    if "PumpdotfunAmmSell" in obj:
      return PumpdotfunAmmSell()
    if "Gamma" in obj:
      return Gamma()
    if "MeteoraDlmmSwapV2" in obj:
      val = obj["MeteoraDlmmSwapV2"]
      return MeteoraDlmmSwapV2(
            MeteoraDlmmSwapV2Value(
                remainingAccountsInfo= remainingAccountsInfo.RemainingAccountsInfo.from_decoded(val["remainingAccountsInfo"])
            )
        )

    if "Woofi" in obj:
      return Woofi()
    if "MeteoraDammV2" in obj:
      return MeteoraDammV2()
    if "MeteoraDynamicBondingCurveSwap" in obj:
      return MeteoraDynamicBondingCurveSwap()
    if "StabbleStableSwapV2" in obj:
      return StabbleStableSwapV2()
    if "StabbleWeightedSwapV2" in obj:
      return StabbleWeightedSwapV2()
    if "RaydiumLaunchlabBuy" in obj:
      val = obj["RaydiumLaunchlabBuy"]
      return RaydiumLaunchlabBuy(
            RaydiumLaunchlabBuyValue(
                shareFeeRate= val["shareFeeRate"]
            )
        )

    if "RaydiumLaunchlabSell" in obj:
      val = obj["RaydiumLaunchlabSell"]
      return RaydiumLaunchlabSell(
            RaydiumLaunchlabSellValue(
                shareFeeRate= val["shareFeeRate"]
            )
        )

    if "BoopdotfunWrappedBuy" in obj:
      return BoopdotfunWrappedBuy()
    if "BoopdotfunWrappedSell" in obj:
      return BoopdotfunWrappedSell()
    if "Plasma" in obj:
      val = obj["Plasma"]
      return Plasma(
            PlasmaValue(
                side= side.from_decoded(val["side"])
            )
        )

    raise ValueError("Invalid enum object")

def from_json(obj: SwapJSON) -> SwapKind:
    if obj["kind"] == "Saber":
        return Saber()

    if obj["kind"] == "SaberAddDecimalsDeposit":
        return SaberAddDecimalsDeposit()

    if obj["kind"] == "SaberAddDecimalsWithdraw":
        return SaberAddDecimalsWithdraw()

    if obj["kind"] == "TokenSwap":
        return TokenSwap()

    if obj["kind"] == "Sencha":
        return Sencha()

    if obj["kind"] == "Step":
        return Step()

    if obj["kind"] == "Cropper":
        return Cropper()

    if obj["kind"] == "Raydium":
        return Raydium()

    if obj["kind"] == "Crema":
        cremaJSONValue = typing.cast(CremaJSONValue, obj["value"])
        return Crema(
            CremaValue(
                aToB=cremaJSONValue["aToB"]
            )
        )


    if obj["kind"] == "Lifinity":
        return Lifinity()

    if obj["kind"] == "Mercurial":
        return Mercurial()

    if obj["kind"] == "Cykura":
        return Cykura()

    if obj["kind"] == "Serum":
        serumJSONValue = typing.cast(SerumJSONValue, obj["value"])
        return Serum(
            SerumValue(
                side=side.from_json(serumJSONValue["side"])
            )
        )


    if obj["kind"] == "MarinadeDeposit":
        return MarinadeDeposit()

    if obj["kind"] == "MarinadeUnstake":
        return MarinadeUnstake()

    if obj["kind"] == "Aldrin":
        aldrinJSONValue = typing.cast(AldrinJSONValue, obj["value"])
        return Aldrin(
            AldrinValue(
                side=side.from_json(aldrinJSONValue["side"])
            )
        )


    if obj["kind"] == "AldrinV2":
        aldrinV2JSONValue = typing.cast(AldrinV2JSONValue, obj["value"])
        return AldrinV2(
            AldrinV2Value(
                side=side.from_json(aldrinV2JSONValue["side"])
            )
        )


    if obj["kind"] == "Whirlpool":
        whirlpoolJSONValue = typing.cast(WhirlpoolJSONValue, obj["value"])
        return Whirlpool(
            WhirlpoolValue(
                aToB=whirlpoolJSONValue["aToB"]
            )
        )


    if obj["kind"] == "Invariant":
        invariantJSONValue = typing.cast(InvariantJSONValue, obj["value"])
        return Invariant(
            InvariantValue(
                xToY=invariantJSONValue["xToY"]
            )
        )


    if obj["kind"] == "Meteora":
        return Meteora()

    if obj["kind"] == "GooseFX":
        return GooseFX()

    if obj["kind"] == "DeltaFi":
        deltaFiJSONValue = typing.cast(DeltaFiJSONValue, obj["value"])
        return DeltaFi(
            DeltaFiValue(
                stable=deltaFiJSONValue["stable"]
            )
        )


    if obj["kind"] == "Balansol":
        return Balansol()

    if obj["kind"] == "MarcoPolo":
        marcoPoloJSONValue = typing.cast(MarcoPoloJSONValue, obj["value"])
        return MarcoPolo(
            MarcoPoloValue(
                xToY=marcoPoloJSONValue["xToY"]
            )
        )


    if obj["kind"] == "Dradex":
        dradexJSONValue = typing.cast(DradexJSONValue, obj["value"])
        return Dradex(
            DradexValue(
                side=side.from_json(dradexJSONValue["side"])
            )
        )


    if obj["kind"] == "LifinityV2":
        return LifinityV2()

    if obj["kind"] == "RaydiumClmm":
        return RaydiumClmm()

    if obj["kind"] == "Openbook":
        openbookJSONValue = typing.cast(OpenbookJSONValue, obj["value"])
        return Openbook(
            OpenbookValue(
                side=side.from_json(openbookJSONValue["side"])
            )
        )


    if obj["kind"] == "Phoenix":
        phoenixJSONValue = typing.cast(PhoenixJSONValue, obj["value"])
        return Phoenix(
            PhoenixValue(
                side=side.from_json(phoenixJSONValue["side"])
            )
        )


    if obj["kind"] == "Symmetry":
        symmetryJSONValue = typing.cast(SymmetryJSONValue, obj["value"])
        return Symmetry(
            SymmetryValue(
                fromTokenId=symmetryJSONValue["fromTokenId"],toTokenId=symmetryJSONValue["toTokenId"]
            )
        )


    if obj["kind"] == "TokenSwapV2":
        return TokenSwapV2()

    if obj["kind"] == "HeliumTreasuryManagementRedeemV0":
        return HeliumTreasuryManagementRedeemV0()

    if obj["kind"] == "StakeDexStakeWrappedSol":
        return StakeDexStakeWrappedSol()

    if obj["kind"] == "StakeDexSwapViaStake":
        stakeDexSwapViaStakeJSONValue = typing.cast(StakeDexSwapViaStakeJSONValue, obj["value"])
        return StakeDexSwapViaStake(
            StakeDexSwapViaStakeValue(
                bridgeStakeSeed=stakeDexSwapViaStakeJSONValue["bridgeStakeSeed"]
            )
        )


    if obj["kind"] == "GooseFXV2":
        return GooseFXV2()

    if obj["kind"] == "Perps":
        return Perps()

    if obj["kind"] == "PerpsAddLiquidity":
        return PerpsAddLiquidity()

    if obj["kind"] == "PerpsRemoveLiquidity":
        return PerpsRemoveLiquidity()

    if obj["kind"] == "MeteoraDlmm":
        return MeteoraDlmm()

    if obj["kind"] == "OpenBookV2":
        openBookV2JSONValue = typing.cast(OpenBookV2JSONValue, obj["value"])
        return OpenBookV2(
            OpenBookV2Value(
                side=side.from_json(openBookV2JSONValue["side"])
            )
        )


    if obj["kind"] == "RaydiumClmmV2":
        return RaydiumClmmV2()

    if obj["kind"] == "StakeDexPrefundWithdrawStakeAndDepositStake":
        stakeDexPrefundWithdrawStakeAndDepositStakeJSONValue = typing.cast(StakeDexPrefundWithdrawStakeAndDepositStakeJSONValue, obj["value"])
        return StakeDexPrefundWithdrawStakeAndDepositStake(
            StakeDexPrefundWithdrawStakeAndDepositStakeValue(
                bridgeStakeSeed=stakeDexPrefundWithdrawStakeAndDepositStakeJSONValue["bridgeStakeSeed"]
            )
        )


    if obj["kind"] == "Clone":
        cloneJSONValue = typing.cast(CloneJSONValue, obj["value"])
        return Clone(
            CloneValue(
                poolIndex=cloneJSONValue["poolIndex"],quantityIsInput=cloneJSONValue["quantityIsInput"],quantityIsCollateral=cloneJSONValue["quantityIsCollateral"]
            )
        )


    if obj["kind"] == "SanctumS":
        sanctumSJSONValue = typing.cast(SanctumSJSONValue, obj["value"])
        return SanctumS(
            SanctumSValue(
                srcLstValueCalcAccs=sanctumSJSONValue["srcLstValueCalcAccs"],dstLstValueCalcAccs=sanctumSJSONValue["dstLstValueCalcAccs"],srcLstIndex=sanctumSJSONValue["srcLstIndex"],dstLstIndex=sanctumSJSONValue["dstLstIndex"]
            )
        )


    if obj["kind"] == "SanctumSAddLiquidity":
        sanctumSAddLiquidityJSONValue = typing.cast(SanctumSAddLiquidityJSONValue, obj["value"])
        return SanctumSAddLiquidity(
            SanctumSAddLiquidityValue(
                lstValueCalcAccs=sanctumSAddLiquidityJSONValue["lstValueCalcAccs"],lstIndex=sanctumSAddLiquidityJSONValue["lstIndex"]
            )
        )


    if obj["kind"] == "SanctumSRemoveLiquidity":
        sanctumSRemoveLiquidityJSONValue = typing.cast(SanctumSRemoveLiquidityJSONValue, obj["value"])
        return SanctumSRemoveLiquidity(
            SanctumSRemoveLiquidityValue(
                lstValueCalcAccs=sanctumSRemoveLiquidityJSONValue["lstValueCalcAccs"],lstIndex=sanctumSRemoveLiquidityJSONValue["lstIndex"]
            )
        )


    if obj["kind"] == "RaydiumCP":
        return RaydiumCP()

    if obj["kind"] == "WhirlpoolSwapV2":
        whirlpoolSwapV2JSONValue = typing.cast(WhirlpoolSwapV2JSONValue, obj["value"])
        return WhirlpoolSwapV2(
            WhirlpoolSwapV2Value(
                aToB=whirlpoolSwapV2JSONValue["aToB"],remainingAccountsInfo=(None if whirlpoolSwapV2JSONValue["remainingAccountsInfo"] is None else remainingAccountsInfo.RemainingAccountsInfo.from_json(whirlpoolSwapV2JSONValue["remainingAccountsInfo"]))
            )
        )


    if obj["kind"] == "OneIntro":
        return OneIntro()

    if obj["kind"] == "PumpdotfunWrappedBuy":
        return PumpdotfunWrappedBuy()

    if obj["kind"] == "PumpdotfunWrappedSell":
        return PumpdotfunWrappedSell()

    if obj["kind"] == "PerpsV2":
        return PerpsV2()

    if obj["kind"] == "PerpsV2AddLiquidity":
        return PerpsV2AddLiquidity()

    if obj["kind"] == "PerpsV2RemoveLiquidity":
        return PerpsV2RemoveLiquidity()

    if obj["kind"] == "MoonshotWrappedBuy":
        return MoonshotWrappedBuy()

    if obj["kind"] == "MoonshotWrappedSell":
        return MoonshotWrappedSell()

    if obj["kind"] == "StabbleStableSwap":
        return StabbleStableSwap()

    if obj["kind"] == "StabbleWeightedSwap":
        return StabbleWeightedSwap()

    if obj["kind"] == "Obric":
        obricJSONValue = typing.cast(ObricJSONValue, obj["value"])
        return Obric(
            ObricValue(
                xToY=obricJSONValue["xToY"]
            )
        )


    if obj["kind"] == "FoxBuyFromEstimatedCost":
        return FoxBuyFromEstimatedCost()

    if obj["kind"] == "FoxClaimPartial":
        foxClaimPartialJSONValue = typing.cast(FoxClaimPartialJSONValue, obj["value"])
        return FoxClaimPartial(
            FoxClaimPartialValue(
                isY=foxClaimPartialJSONValue["isY"]
            )
        )


    if obj["kind"] == "SolFi":
        solFiJSONValue = typing.cast(SolFiJSONValue, obj["value"])
        return SolFi(
            SolFiValue(
                isQuoteToBase=solFiJSONValue["isQuoteToBase"]
            )
        )


    if obj["kind"] == "SolayerDelegateNoInit":
        return SolayerDelegateNoInit()

    if obj["kind"] == "SolayerUndelegateNoInit":
        return SolayerUndelegateNoInit()

    if obj["kind"] == "TokenMill":
        tokenMillJSONValue = typing.cast(TokenMillJSONValue, obj["value"])
        return TokenMill(
            TokenMillValue(
                side=side.from_json(tokenMillJSONValue["side"])
            )
        )


    if obj["kind"] == "DaosFunBuy":
        return DaosFunBuy()

    if obj["kind"] == "DaosFunSell":
        return DaosFunSell()

    if obj["kind"] == "ZeroFi":
        return ZeroFi()

    if obj["kind"] == "StakeDexWithdrawWrappedSol":
        return StakeDexWithdrawWrappedSol()

    if obj["kind"] == "VirtualsBuy":
        return VirtualsBuy()

    if obj["kind"] == "VirtualsSell":
        return VirtualsSell()

    if obj["kind"] == "Perena":
        perenaJSONValue = typing.cast(PerenaJSONValue, obj["value"])
        return Perena(
            PerenaValue(
                inIndex=perenaJSONValue["inIndex"],outIndex=perenaJSONValue["outIndex"]
            )
        )


    if obj["kind"] == "PumpdotfunAmmBuy":
        return PumpdotfunAmmBuy()

    if obj["kind"] == "PumpdotfunAmmSell":
        return PumpdotfunAmmSell()

    if obj["kind"] == "Gamma":
        return Gamma()

    if obj["kind"] == "MeteoraDlmmSwapV2":
        meteoraDlmmSwapV2JSONValue = typing.cast(MeteoraDlmmSwapV2JSONValue, obj["value"])
        return MeteoraDlmmSwapV2(
            MeteoraDlmmSwapV2Value(
                remainingAccountsInfo=remainingAccountsInfo.RemainingAccountsInfo.from_json(meteoraDlmmSwapV2JSONValue["remainingAccountsInfo"])
            )
        )


    if obj["kind"] == "Woofi":
        return Woofi()

    if obj["kind"] == "MeteoraDammV2":
        return MeteoraDammV2()

    if obj["kind"] == "MeteoraDynamicBondingCurveSwap":
        return MeteoraDynamicBondingCurveSwap()

    if obj["kind"] == "StabbleStableSwapV2":
        return StabbleStableSwapV2()

    if obj["kind"] == "StabbleWeightedSwapV2":
        return StabbleWeightedSwapV2()

    if obj["kind"] == "RaydiumLaunchlabBuy":
        raydiumLaunchlabBuyJSONValue = typing.cast(RaydiumLaunchlabBuyJSONValue, obj["value"])
        return RaydiumLaunchlabBuy(
            RaydiumLaunchlabBuyValue(
                shareFeeRate=raydiumLaunchlabBuyJSONValue["shareFeeRate"]
            )
        )


    if obj["kind"] == "RaydiumLaunchlabSell":
        raydiumLaunchlabSellJSONValue = typing.cast(RaydiumLaunchlabSellJSONValue, obj["value"])
        return RaydiumLaunchlabSell(
            RaydiumLaunchlabSellValue(
                shareFeeRate=raydiumLaunchlabSellJSONValue["shareFeeRate"]
            )
        )


    if obj["kind"] == "BoopdotfunWrappedBuy":
        return BoopdotfunWrappedBuy()

    if obj["kind"] == "BoopdotfunWrappedSell":
        return BoopdotfunWrappedSell()

    if obj["kind"] == "Plasma":
        plasmaJSONValue = typing.cast(PlasmaJSONValue, obj["value"])
        return Plasma(
            PlasmaValue(
                side=side.from_json(plasmaJSONValue["side"])
            )
        )


    kind = obj["kind"]
    raise ValueError(f"Unrecognized enum kind: {kind}")

layout = EnumForCodegen(
"Saber" / borsh.CStruct(),
"SaberAddDecimalsDeposit" / borsh.CStruct(),
"SaberAddDecimalsWithdraw" / borsh.CStruct(),
"TokenSwap" / borsh.CStruct(),
"Sencha" / borsh.CStruct(),
"Step" / borsh.CStruct(),
"Cropper" / borsh.CStruct(),
"Raydium" / borsh.CStruct(),
"Crema" / borsh.CStruct("aToB" /borsh.Bool),
"Lifinity" / borsh.CStruct(),
"Mercurial" / borsh.CStruct(),
"Cykura" / borsh.CStruct(),
"Serum" / borsh.CStruct("side" /side.layout),
"MarinadeDeposit" / borsh.CStruct(),
"MarinadeUnstake" / borsh.CStruct(),
"Aldrin" / borsh.CStruct("side" /side.layout),
"AldrinV2" / borsh.CStruct("side" /side.layout),
"Whirlpool" / borsh.CStruct("aToB" /borsh.Bool),
"Invariant" / borsh.CStruct("xToY" /borsh.Bool),
"Meteora" / borsh.CStruct(),
"GooseFX" / borsh.CStruct(),
"DeltaFi" / borsh.CStruct("stable" /borsh.Bool),
"Balansol" / borsh.CStruct(),
"MarcoPolo" / borsh.CStruct("xToY" /borsh.Bool),
"Dradex" / borsh.CStruct("side" /side.layout),
"LifinityV2" / borsh.CStruct(),
"RaydiumClmm" / borsh.CStruct(),
"Openbook" / borsh.CStruct("side" /side.layout),
"Phoenix" / borsh.CStruct("side" /side.layout),
"Symmetry" / borsh.CStruct("fromTokenId" /borsh.U64,"toTokenId" /borsh.U64),
"TokenSwapV2" / borsh.CStruct(),
"HeliumTreasuryManagementRedeemV0" / borsh.CStruct(),
"StakeDexStakeWrappedSol" / borsh.CStruct(),
"StakeDexSwapViaStake" / borsh.CStruct("bridgeStakeSeed" /borsh.U32),
"GooseFXV2" / borsh.CStruct(),
"Perps" / borsh.CStruct(),
"PerpsAddLiquidity" / borsh.CStruct(),
"PerpsRemoveLiquidity" / borsh.CStruct(),
"MeteoraDlmm" / borsh.CStruct(),
"OpenBookV2" / borsh.CStruct("side" /side.layout),
"RaydiumClmmV2" / borsh.CStruct(),
"StakeDexPrefundWithdrawStakeAndDepositStake" / borsh.CStruct("bridgeStakeSeed" /borsh.U32),
"Clone" / borsh.CStruct("poolIndex" /borsh.U8,"quantityIsInput" /borsh.Bool,"quantityIsCollateral" /borsh.Bool),
"SanctumS" / borsh.CStruct("srcLstValueCalcAccs" /borsh.U8,"dstLstValueCalcAccs" /borsh.U8,"srcLstIndex" /borsh.U32,"dstLstIndex" /borsh.U32),
"SanctumSAddLiquidity" / borsh.CStruct("lstValueCalcAccs" /borsh.U8,"lstIndex" /borsh.U32),
"SanctumSRemoveLiquidity" / borsh.CStruct("lstValueCalcAccs" /borsh.U8,"lstIndex" /borsh.U32),
"RaydiumCP" / borsh.CStruct(),
"WhirlpoolSwapV2" / borsh.CStruct("aToB" /borsh.Bool,"remainingAccountsInfo" /borsh.Option(remainingAccountsInfo.RemainingAccountsInfo.layout)),
"OneIntro" / borsh.CStruct(),
"PumpdotfunWrappedBuy" / borsh.CStruct(),
"PumpdotfunWrappedSell" / borsh.CStruct(),
"PerpsV2" / borsh.CStruct(),
"PerpsV2AddLiquidity" / borsh.CStruct(),
"PerpsV2RemoveLiquidity" / borsh.CStruct(),
"MoonshotWrappedBuy" / borsh.CStruct(),
"MoonshotWrappedSell" / borsh.CStruct(),
"StabbleStableSwap" / borsh.CStruct(),
"StabbleWeightedSwap" / borsh.CStruct(),
"Obric" / borsh.CStruct("xToY" /borsh.Bool),
"FoxBuyFromEstimatedCost" / borsh.CStruct(),
"FoxClaimPartial" / borsh.CStruct("isY" /borsh.Bool),
"SolFi" / borsh.CStruct("isQuoteToBase" /borsh.Bool),
"SolayerDelegateNoInit" / borsh.CStruct(),
"SolayerUndelegateNoInit" / borsh.CStruct(),
"TokenMill" / borsh.CStruct("side" /side.layout),
"DaosFunBuy" / borsh.CStruct(),
"DaosFunSell" / borsh.CStruct(),
"ZeroFi" / borsh.CStruct(),
"StakeDexWithdrawWrappedSol" / borsh.CStruct(),
"VirtualsBuy" / borsh.CStruct(),
"VirtualsSell" / borsh.CStruct(),
"Perena" / borsh.CStruct("inIndex" /borsh.U8,"outIndex" /borsh.U8),
"PumpdotfunAmmBuy" / borsh.CStruct(),
"PumpdotfunAmmSell" / borsh.CStruct(),
"Gamma" / borsh.CStruct(),
"MeteoraDlmmSwapV2" / borsh.CStruct("remainingAccountsInfo" /remainingAccountsInfo.RemainingAccountsInfo.layout),
"Woofi" / borsh.CStruct(),
"MeteoraDammV2" / borsh.CStruct(),
"MeteoraDynamicBondingCurveSwap" / borsh.CStruct(),
"StabbleStableSwapV2" / borsh.CStruct(),
"StabbleWeightedSwapV2" / borsh.CStruct(),
"RaydiumLaunchlabBuy" / borsh.CStruct("shareFeeRate" /borsh.U64),
"RaydiumLaunchlabSell" / borsh.CStruct("shareFeeRate" /borsh.U64),
"BoopdotfunWrappedBuy" / borsh.CStruct(),
"BoopdotfunWrappedSell" / borsh.CStruct(),
"Plasma" / borsh.CStruct("side" /side.layout),
)
