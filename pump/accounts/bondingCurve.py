'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from anchorpy.borsh_extension import BorshPubkey
from anchorpy.error import AccountInvalidDiscriminator
from anchorpy.utils.rpc import get_multiple_accounts
from dataclasses import dataclass
from solana.rpc.async_api import AsyncClient
from solana.rpc.commitment import Commitment
from solders.pubkey import Pubkey as SolPubkey
from ..program_id import PROGRAM_ID


class BondingCurveJSON(typing.TypedDict):
    virtualTokenReserves: int
    virtualSolReserves: int
    realTokenReserves: int
    realSolReserves: int
    tokenTotalSupply: int
    complete: bool
    creator: str

@dataclass
class BondingCurve:
    #fields
    virtualTokenReserves: int
    virtualSolReserves: int
    realTokenReserves: int
    realSolReserves: int
    tokenTotalSupply: int
    complete: bool
    creator: SolPubkey

    discriminator: typing.ClassVar = b"\x17\xb7\xf8\x37\x60\xd8\xac\x60"
    DISCRIMINATOR_SIZE: int = 8

    layout: typing.ClassVar = borsh.CStruct(
        "virtualTokenReserves" /borsh.U64,
        "virtualSolReserves" /borsh.U64,
        "realTokenReserves" /borsh.U64,
        "realSolReserves" /borsh.U64,
        "tokenTotalSupply" /borsh.U64,
        "complete" /borsh.Bool,
        "creator" /BorshPubkey,
        )



    @classmethod
    async def fetch(
        cls,
        conn: AsyncClient,
        address: SolPubkey,
        commitment: typing.Optional[Commitment] = None,
        program_id: SolPubkey = PROGRAM_ID,
    ) -> typing.Optional["BondingCurve"]:
        resp = await conn.get_account_info(address, commitment=commitment)
        info = resp.value
        if info is None:
            return None
        if info.owner != program_id:
            raise ValueError("Account does not belong to this program")
        bytes_data = info.data
        return cls.decode(bytes_data)

    @classmethod
    async def fetch_multiple(
        cls,
        conn: AsyncClient,
        addresses: list[SolPubkey],
        commitment: typing.Optional[Commitment] = None,
        program_id: SolPubkey = PROGRAM_ID,
    ) -> typing.List[typing.Optional["BondingCurve"]]:
        infos = await get_multiple_accounts(conn, addresses, commitment=commitment)
        res: typing.List[typing.Optional["BondingCurve"]] = []
        for info in infos:
            if info is None:
                res.append(None)
                continue
            if info.account.owner != program_id:
                raise ValueError("Account does not belong to this program")
            res.append(cls.decode(info.account.data))
        return res

    @classmethod
    def decode(cls, data: bytes) -> "BondingCurve":
        if data[:cls.DISCRIMINATOR_SIZE] != cls.discriminator:
            raise AccountInvalidDiscriminator(
                "The discriminator for this account is invalid"
            )
        dec = BondingCurve.layout.parse(data[cls.DISCRIMINATOR_SIZE:])
        return cls(
                virtualTokenReserves=dec.virtualTokenReserves,
                virtualSolReserves=dec.virtualSolReserves,
                realTokenReserves=dec.realTokenReserves,
                realSolReserves=dec.realSolReserves,
                tokenTotalSupply=dec.tokenTotalSupply,
                complete=dec.complete,
                creator=dec.creator,
                )

    def to_json(self) -> BondingCurveJSON:
        return {
                "virtualTokenReserves": self.virtualTokenReserves,
                "virtualSolReserves": self.virtualSolReserves,
                "realTokenReserves": self.realTokenReserves,
                "realSolReserves": self.realSolReserves,
                "tokenTotalSupply": self.tokenTotalSupply,
                "complete": self.complete,
                "creator": str(self.creator),
                }

    @classmethod
    def from_json(cls, obj: BondingCurveJSON) -> "BondingCurve":
        return cls(
                virtualTokenReserves=obj["virtualTokenReserves"],
                virtualSolReserves=obj["virtualSolReserves"],
                realTokenReserves=obj["realTokenReserves"],
                realSolReserves=obj["realSolReserves"],
                tokenTotalSupply=obj["tokenTotalSupply"],
                complete=obj["complete"],
                creator=SolPubkey.from_string(obj["creator"]),
                )




