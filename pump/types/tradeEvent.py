'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey as SolPubkey;
from solders.sysvar import RENT;

class TradeEventJSON(typing.TypedDict):
    mint: str
    solAmount: int
    tokenAmount: int
    isBuy: bool
    user: str
    timestamp: int
    virtualSolReserves: int
    virtualTokenReserves: int
    realSolReserves: int
    realTokenReserves: int
    feeRecipient: str
    feeBasisPoints: int
    fee: int
    creator: str
    creatorFeeBasisPoints: int
    creatorFee: int

@dataclass
class TradeEvent:
    layout: typing.ClassVar = borsh.CStruct(
        "mint" /BorshPubkey,
        "solAmount" /borsh.U64,
        "tokenAmount" /borsh.U64,
        "isBuy" /borsh.Bool,
        "user" /BorshPubkey,
        "timestamp" /borsh.I64,
        "virtualSolReserves" /borsh.U64,
        "virtualTokenReserves" /borsh.U64,
        "realSolReserves" /borsh.U64,
        "realTokenReserves" /borsh.U64,
        "feeRecipient" /BorshPubkey,
        "feeBasisPoints" /borsh.U64,
        "fee" /borsh.U64,
        "creator" /BorshPubkey,
        "creatorFeeBasisPoints" /borsh.U64,
        "creatorFee" /borsh.U64,
        )
    #fields
    mint: SolPubkey
    solAmount: int
    tokenAmount: int
    isBuy: bool
    user: SolPubkey
    timestamp: int
    virtualSolReserves: int
    virtualTokenReserves: int
    realSolReserves: int
    realTokenReserves: int
    feeRecipient: SolPubkey
    feeBasisPoints: int
    fee: int
    creator: SolPubkey
    creatorFeeBasisPoints: int
    creatorFee: int
    
    @classmethod
    def from_decoded(cls, obj: Container) -> "TradeEvent":
        return cls(
        mint=obj["mint"],
        solAmount=obj["solAmount"],
        tokenAmount=obj["tokenAmount"],
        isBuy=obj["isBuy"],
        user=obj["user"],
        timestamp=obj["timestamp"],
        virtualSolReserves=obj["virtualSolReserves"],
        virtualTokenReserves=obj["virtualTokenReserves"],
        realSolReserves=obj["realSolReserves"],
        realTokenReserves=obj["realTokenReserves"],
        feeRecipient=obj["feeRecipient"],
        feeBasisPoints=obj["feeBasisPoints"],
        fee=obj["fee"],
        creator=obj["creator"],
        creatorFeeBasisPoints=obj["creatorFeeBasisPoints"],
        creatorFee=obj["creatorFee"],
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
                "mint": self.mint,
                "solAmount": self.solAmount,
                "tokenAmount": self.tokenAmount,
                "isBuy": self.isBuy,
                "user": self.user,
                "timestamp": self.timestamp,
                "virtualSolReserves": self.virtualSolReserves,
                "virtualTokenReserves": self.virtualTokenReserves,
                "realSolReserves": self.realSolReserves,
                "realTokenReserves": self.realTokenReserves,
                "feeRecipient": self.feeRecipient,
                "feeBasisPoints": self.feeBasisPoints,
                "fee": self.fee,
                "creator": self.creator,
                "creatorFeeBasisPoints": self.creatorFeeBasisPoints,
                "creatorFee": self.creatorFee,
                }

    def to_json(self) -> TradeEventJSON:
        return {
                "mint": str(self.mint),
                "solAmount": self.solAmount,
                "tokenAmount": self.tokenAmount,
                "isBuy": self.isBuy,
                "user": str(self.user),
                "timestamp": self.timestamp,
                "virtualSolReserves": self.virtualSolReserves,
                "virtualTokenReserves": self.virtualTokenReserves,
                "realSolReserves": self.realSolReserves,
                "realTokenReserves": self.realTokenReserves,
                "feeRecipient": str(self.feeRecipient),
                "feeBasisPoints": self.feeBasisPoints,
                "fee": self.fee,
                "creator": str(self.creator),
                "creatorFeeBasisPoints": self.creatorFeeBasisPoints,
                "creatorFee": self.creatorFee,
                }

    @classmethod
    def from_json(cls, obj: TradeEventJSON) -> "TradeEvent":
        return cls(
                mint=SolPubkey.from_string(obj["mint"]),
                solAmount=obj["solAmount"],
                tokenAmount=obj["tokenAmount"],
                isBuy=obj["isBuy"],
                user=SolPubkey.from_string(obj["user"]),
                timestamp=obj["timestamp"],
                virtualSolReserves=obj["virtualSolReserves"],
                virtualTokenReserves=obj["virtualTokenReserves"],
                realSolReserves=obj["realSolReserves"],
                realTokenReserves=obj["realTokenReserves"],
                feeRecipient=SolPubkey.from_string(obj["feeRecipient"]),
                feeBasisPoints=obj["feeBasisPoints"],
                fee=obj["fee"],
                creator=SolPubkey.from_string(obj["creator"]),
                creatorFeeBasisPoints=obj["creatorFeeBasisPoints"],
                creatorFee=obj["creatorFee"],
        )






