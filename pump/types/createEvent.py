'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from anchorpy.borsh_extension import BorshPubkey
from construct import Container
from dataclasses import dataclass
from solders.pubkey import Pubkey as SolPubkey

class CreateEventJSON(typing.TypedDict):
    name: str
    symbol: str
    uri: str
    mint: str
    bondingCurve: str
    user: str
    creator: str
    timestamp: int
    virtualTokenReserves: int
    virtualSolReserves: int
    realTokenReserves: int
    tokenTotalSupply: int

@dataclass
class CreateEvent:
    layout: typing.ClassVar = borsh.CStruct(
        "name" /borsh.String,
        "symbol" /borsh.String,
        "uri" /borsh.String,
        "mint" /BorshPubkey,
        "bondingCurve" /BorshPubkey,
        "user" /BorshPubkey,
        "creator" /BorshPubkey,
        "timestamp" /borsh.I64,
        "virtualTokenReserves" /borsh.U64,
        "virtualSolReserves" /borsh.U64,
        "realTokenReserves" /borsh.U64,
        "tokenTotalSupply" /borsh.U64,
        )
    #fields
    name: str
    symbol: str
    uri: str
    mint: SolPubkey
    bondingCurve: SolPubkey
    user: SolPubkey
    creator: SolPubkey
    timestamp: int
    virtualTokenReserves: int
    virtualSolReserves: int
    realTokenReserves: int
    tokenTotalSupply: int
    
    @classmethod
    def from_decoded(cls, obj: Container) -> "CreateEvent":
        return cls(
        name=obj["name"],
        symbol=obj["symbol"],
        uri=obj["uri"],
        mint=obj["mint"],
        bondingCurve=obj["bondingCurve"],
        user=obj["user"],
        creator=obj["creator"],
        timestamp=obj["timestamp"],
        virtualTokenReserves=obj["virtualTokenReserves"],
        virtualSolReserves=obj["virtualSolReserves"],
        realTokenReserves=obj["realTokenReserves"],
        tokenTotalSupply=obj["tokenTotalSupply"],
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
                "name": self.name,
                "symbol": self.symbol,
                "uri": self.uri,
                "mint": self.mint,
                "bondingCurve": self.bondingCurve,
                "user": self.user,
                "creator": self.creator,
                "timestamp": self.timestamp,
                "virtualTokenReserves": self.virtualTokenReserves,
                "virtualSolReserves": self.virtualSolReserves,
                "realTokenReserves": self.realTokenReserves,
                "tokenTotalSupply": self.tokenTotalSupply,
                }

    def to_json(self) -> CreateEventJSON:
        return {
                "name": self.name,
                "symbol": self.symbol,
                "uri": self.uri,
                "mint": str(self.mint),
                "bondingCurve": str(self.bondingCurve),
                "user": str(self.user),
                "creator": str(self.creator),
                "timestamp": self.timestamp,
                "virtualTokenReserves": self.virtualTokenReserves,
                "virtualSolReserves": self.virtualSolReserves,
                "realTokenReserves": self.realTokenReserves,
                "tokenTotalSupply": self.tokenTotalSupply,
                }

    @classmethod
    def from_json(cls, obj: CreateEventJSON) -> "CreateEvent":
        return cls(
                name=obj["name"],
                symbol=obj["symbol"],
                uri=obj["uri"],
                mint=SolPubkey.from_string(obj["mint"]),
                bondingCurve=SolPubkey.from_string(obj["bondingCurve"]),
                user=SolPubkey.from_string(obj["user"]),
                creator=SolPubkey.from_string(obj["creator"]),
                timestamp=obj["timestamp"],
                virtualTokenReserves=obj["virtualTokenReserves"],
                virtualSolReserves=obj["virtualSolReserves"],
                realTokenReserves=obj["realTokenReserves"],
                tokenTotalSupply=obj["tokenTotalSupply"],
        )






