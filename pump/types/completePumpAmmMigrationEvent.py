'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey as SolPubkey;

class CompletePumpAmmMigrationEventJSON(typing.TypedDict):
    user: str
    mint: str
    mintAmount: int
    solAmount: int
    poolMigrationFee: int
    bondingCurve: str
    timestamp: int
    pool: str

@dataclass
class CompletePumpAmmMigrationEvent:
    layout: typing.ClassVar = borsh.CStruct(
        "user" /BorshPubkey,
        "mint" /BorshPubkey,
        "mintAmount" /borsh.U64,
        "solAmount" /borsh.U64,
        "poolMigrationFee" /borsh.U64,
        "bondingCurve" /BorshPubkey,
        "timestamp" /borsh.I64,
        "pool" /BorshPubkey,
        )
    #fields
    user: SolPubkey
    mint: SolPubkey
    mintAmount: int
    solAmount: int
    poolMigrationFee: int
    bondingCurve: SolPubkey
    timestamp: int
    pool: SolPubkey
    
    @classmethod
    def from_decoded(cls, obj: Container) -> "CompletePumpAmmMigrationEvent":
        return cls(
        user=obj["user"],
        mint=obj["mint"],
        mintAmount=obj["mintAmount"],
        solAmount=obj["solAmount"],
        poolMigrationFee=obj["poolMigrationFee"],
        bondingCurve=obj["bondingCurve"],
        timestamp=obj["timestamp"],
        pool=obj["pool"],
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
                "user": self.user,
                "mint": self.mint,
                "mintAmount": self.mintAmount,
                "solAmount": self.solAmount,
                "poolMigrationFee": self.poolMigrationFee,
                "bondingCurve": self.bondingCurve,
                "timestamp": self.timestamp,
                "pool": self.pool,
                }

    def to_json(self) -> CompletePumpAmmMigrationEventJSON:
        return {
                "user": str(self.user),
                "mint": str(self.mint),
                "mintAmount": self.mintAmount,
                "solAmount": self.solAmount,
                "poolMigrationFee": self.poolMigrationFee,
                "bondingCurve": str(self.bondingCurve),
                "timestamp": self.timestamp,
                "pool": str(self.pool),
                }

    @classmethod
    def from_json(cls, obj: CompletePumpAmmMigrationEventJSON) -> "CompletePumpAmmMigrationEvent":
        return cls(
                user=SolPubkey.from_string(obj["user"]),
                mint=SolPubkey.from_string(obj["mint"]),
                mintAmount=obj["mintAmount"],
                solAmount=obj["solAmount"],
                poolMigrationFee=obj["poolMigrationFee"],
                bondingCurve=SolPubkey.from_string(obj["bondingCurve"]),
                timestamp=obj["timestamp"],
                pool=SolPubkey.from_string(obj["pool"]),
        )






