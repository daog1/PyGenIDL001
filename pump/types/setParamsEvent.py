'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey;
from solders.sysvar import RENT;

class SetParamsEventJSON(typing.TypedDict):
    initialVirtualTokenReserves: int
    initialVirtualSolReserves: int
    initialRealTokenReserves: int
    finalRealSolReserves: int
    tokenTotalSupply: int
    feeBasisPoints: int
    withdrawAuthority: str
    enableMigrate: bool
    poolMigrationFee: int
    creatorFeeBasisPoints: int
    feeRecipients: list[str]
    timestamp: int
    setCreatorAuthority: str

@dataclass
class SetParamsEvent:
    layout: typing.ClassVar = borsh.CStruct(
        "initialVirtualTokenReserves" /borsh.U64,
        "initialVirtualSolReserves" /borsh.U64,
        "initialRealTokenReserves" /borsh.U64,
        "finalRealSolReserves" /borsh.U64,
        "tokenTotalSupply" /borsh.U64,
        "feeBasisPoints" /borsh.U64,
        "withdrawAuthority" /BorshPubkey,
        "enableMigrate" /borsh.Bool,
        "poolMigrationFee" /borsh.U64,
        "creatorFeeBasisPoints" /borsh.U64,
        "feeRecipients" /BorshPubkey[8],
        "timestamp" /borsh.I64,
        "setCreatorAuthority" /BorshPubkey,
        )
    #fields
    initialVirtualTokenReserves: int
    initialVirtualSolReserves: int
    initialRealTokenReserves: int
    finalRealSolReserves: int
    tokenTotalSupply: int
    feeBasisPoints: int
    withdrawAuthority: Pubkey
    enableMigrate: bool
    poolMigrationFee: int
    creatorFeeBasisPoints: int
    feeRecipients: list[Pubkey]
    timestamp: int
    setCreatorAuthority: Pubkey
    
    @classmethod
    def from_decoded(cls, obj: Container) -> "SetParamsEvent":
        return cls(
        initialVirtualTokenReserves=obj["initialVirtualTokenReserves"],
        initialVirtualSolReserves=obj["initialVirtualSolReserves"],
        initialRealTokenReserves=obj["initialRealTokenReserves"],
        finalRealSolReserves=obj["finalRealSolReserves"],
        tokenTotalSupply=obj["tokenTotalSupply"],
        feeBasisPoints=obj["feeBasisPoints"],
        withdrawAuthority=Pubkey.from_string(obj["withdrawAuthority"]),
        enableMigrate=obj["enableMigrate"],
        poolMigrationFee=obj["poolMigrationFee"],
        creatorFeeBasisPoints=obj["creatorFeeBasisPoints"],
        feeRecipients=list(map(lambda item:Pubkey.from_string(item),obj["feeRecipients"])),
        timestamp=obj["timestamp"],
        setCreatorAuthority=Pubkey.from_string(obj["setCreatorAuthority"]),
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
                "initialVirtualTokenReserves": self.initialVirtualTokenReserves,
                "initialVirtualSolReserves": self.initialVirtualSolReserves,
                "initialRealTokenReserves": self.initialRealTokenReserves,
                "finalRealSolReserves": self.finalRealSolReserves,
                "tokenTotalSupply": self.tokenTotalSupply,
                "feeBasisPoints": self.feeBasisPoints,
                "withdrawAuthority": self.withdrawAuthority,
                "enableMigrate": self.enableMigrate,
                "poolMigrationFee": self.poolMigrationFee,
                "creatorFeeBasisPoints": self.creatorFeeBasisPoints,
                "feeRecipients": self.feeRecipients,
                "timestamp": self.timestamp,
                "setCreatorAuthority": self.setCreatorAuthority,
                }

    def to_json(self) -> SetParamsEventJSON:
        return {
                "initialVirtualTokenReserves": self.initialVirtualTokenReserves,
                "initialVirtualSolReserves": self.initialVirtualSolReserves,
                "initialRealTokenReserves": self.initialRealTokenReserves,
                "finalRealSolReserves": self.finalRealSolReserves,
                "tokenTotalSupply": self.tokenTotalSupply,
                "feeBasisPoints": self.feeBasisPoints,
                "withdrawAuthority": str(self.withdrawAuthority),
                "enableMigrate": self.enableMigrate,
                "poolMigrationFee": self.poolMigrationFee,
                "creatorFeeBasisPoints": self.creatorFeeBasisPoints,
                "feeRecipients": list(map(lambda item:str(item),self.feeRecipients)),
                "timestamp": self.timestamp,
                "setCreatorAuthority": str(self.setCreatorAuthority),
                }

    @classmethod
    def from_json(cls, obj: SetParamsEventJSON) -> "SetParamsEvent":
        return cls(
                initialVirtualTokenReserves=obj["initialVirtualTokenReserves"],
                initialVirtualSolReserves=obj["initialVirtualSolReserves"],
                initialRealTokenReserves=obj["initialRealTokenReserves"],
                finalRealSolReserves=obj["finalRealSolReserves"],
                tokenTotalSupply=obj["tokenTotalSupply"],
                feeBasisPoints=obj["feeBasisPoints"],
                withdrawAuthority=Pubkey.from_string(obj["withdrawAuthority"]),
                enableMigrate=obj["enableMigrate"],
                poolMigrationFee=obj["poolMigrationFee"],
                creatorFeeBasisPoints=obj["creatorFeeBasisPoints"],
                feeRecipients=list(map(lambda item:Pubkey.from_string(item),obj["feeRecipients"])),
                timestamp=obj["timestamp"],
                setCreatorAuthority=Pubkey.from_string(obj["setCreatorAuthority"]),
        )






