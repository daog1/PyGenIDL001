'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey;
from construct import Container;
from dataclasses import dataclass;
from solders.instruction import AccountMeta, Instruction;
from solders.pubkey import Pubkey;
from solders.sysvar import RENT;
from ..program_id import PROGRAM_ID;
class SetParamsArgs(typing.TypedDict):
    feeRecipient:Pubkey
    initialVirtualTokenReserves:int
    initialVirtualSolReserves:int
    initialRealTokenReserves:int
    tokenTotalSupply:int
    feeBasisPoints:int


layout = borsh.CStruct(
    "feeRecipient" /BorshPubkey,
    "initialVirtualTokenReserves" /borsh.U64,
    "initialVirtualSolReserves" /borsh.U64,
    "initialRealTokenReserves" /borsh.U64,
    "tokenTotalSupply" /borsh.U64,
    "feeBasisPoints" /borsh.U64,
    )


class SetParamsAccounts(typing.TypedDict):
    global_:Pubkey
    user:Pubkey
    systemProgram:Pubkey
    eventAuthority:Pubkey
    program:Pubkey

def SetParams(
    args: SetParamsArgs,
    accounts: SetParamsAccounts,
    program_id: Pubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["global_"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["user"], is_signer=True, is_writable=True),
    AccountMeta(pubkey=accounts["systemProgram"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["eventAuthority"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["program"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=RENT, is_signer=False, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\x1b\xea\xb2\x34\x93\x02\xbb\x8d"
    encoded_args = layout.build({
    "feeRecipient":args["feeRecipient"],
    "initialVirtualTokenReserves":args["initialVirtualTokenReserves"],
    "initialVirtualSolReserves":args["initialVirtualSolReserves"],
    "initialRealTokenReserves":args["initialRealTokenReserves"],
    "tokenTotalSupply":args["tokenTotalSupply"],
    "feeBasisPoints":args["feeBasisPoints"],
       })

    data = identifier + encoded_args
    return Instruction(program_id,data,keys)

