'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import typing
from solders.instruction import AccountMeta, Instruction
from solders.pubkey import Pubkey as SolPubkey
from ..program_id import PROGRAM_ID

class MigrateAccounts(typing.TypedDict):
    global_:SolPubkey
    withdrawAuthority:SolPubkey
    mint:SolPubkey
    bondingCurve:SolPubkey
    associatedBondingCurve:SolPubkey
    user:SolPubkey
    systemProgram:SolPubkey
    tokenProgram:SolPubkey
    pumpAmm:SolPubkey
    pool:SolPubkey
    poolAuthority:SolPubkey
    poolAuthorityMintAccount:SolPubkey
    poolAuthorityWsolAccount:SolPubkey
    ammGlobalConfig:SolPubkey
    wsolMint:SolPubkey
    lpMint:SolPubkey
    userPoolTokenAccount:SolPubkey
    poolBaseTokenAccount:SolPubkey
    poolQuoteTokenAccount:SolPubkey
    token2022Program:SolPubkey
    associatedTokenProgram:SolPubkey
    pumpAmmEventAuthority:SolPubkey
    eventAuthority:SolPubkey
    program:SolPubkey

def Migrate(
    accounts: MigrateAccounts,
    program_id: SolPubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["global_"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["withdrawAuthority"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["mint"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["bondingCurve"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["associatedBondingCurve"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["user"], is_signer=True, is_writable=False),
    AccountMeta(pubkey=accounts["systemProgram"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["tokenProgram"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["pumpAmm"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["pool"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["poolAuthority"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["poolAuthorityMintAccount"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["poolAuthorityWsolAccount"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["ammGlobalConfig"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["wsolMint"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["lpMint"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["userPoolTokenAccount"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["poolBaseTokenAccount"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["poolQuoteTokenAccount"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["token2022Program"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["associatedTokenProgram"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["pumpAmmEventAuthority"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["eventAuthority"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["program"], is_signer=False, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\x9b\xea\xe7\x92\xec\x9e\xa2\x1e"
    encoded_args = b""
    data = identifier + encoded_args
    return Instruction(program_id,data,keys)


def find_Global() -> typing.Tuple[SolPubkey, int]:
    seeds = [
       b"\x67\x6c\x6f\x62\x61\x6c",
    ]

    address, bump = SolPubkey.find_program_address(seeds,
        PROGRAM_ID
            )

    return address, bump



def find_BondingCurve(mint: SolPubkey) -> typing.Tuple[SolPubkey, int]:
    seeds = [
       b"\x62\x6f\x6e\x64\x69\x6e\x67\x2d\x63\x75\x72\x76\x65",
       bytes(mint),
    ]

    address, bump = SolPubkey.find_program_address(seeds,
        PROGRAM_ID
            )

    return address, bump



def find_AssociatedBondingCurve(bondingCurve: SolPubkey, mint: SolPubkey) -> typing.Tuple[SolPubkey, int]:
    seeds = [
       bytes(bondingCurve),
       b"\x06\xdd\xf6\xe1\xd7\x65\xa1\x93\xd9\xcb\xe1\x46\xce\xeb\x79\xac\x1c\xb4\x85\xed\x5f\x5b\x37\x91\x3a\x8c\xf5\x85\x7e\xff\x00\xa9",
       bytes(mint),
    ]

    address, bump = SolPubkey.find_program_address(seeds,
            program_id=SolPubkey.from_string('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL')
            )

    return address, bump









def find_Pool(poolAuthority: SolPubkey, mint: SolPubkey, wsolMint: SolPubkey) -> typing.Tuple[SolPubkey, int]:
    seeds = [
       b"\x70\x6f\x6f\x6c",
       b"\x00\x00",
       bytes(poolAuthority),
       bytes(mint),
       bytes(wsolMint),
    ]

    address, bump = SolPubkey.find_program_address(seeds,
            program_id=SolPubkey.from_string('pAMMBay6oceH9fJKBRHGP5D4bD4sWpmSwMn52FMfXEA')
            )

    return address, bump



def find_PoolAuthority(mint: SolPubkey) -> typing.Tuple[SolPubkey, int]:
    seeds = [
       b"\x70\x6f\x6f\x6c\x2d\x61\x75\x74\x68\x6f\x72\x69\x74\x79",
       bytes(mint),
    ]

    address, bump = SolPubkey.find_program_address(seeds,
        PROGRAM_ID
            )

    return address, bump



def find_PoolAuthorityMintAccount(poolAuthority: SolPubkey, tokenProgram: SolPubkey, mint: SolPubkey) -> typing.Tuple[SolPubkey, int]:
    seeds = [
       bytes(poolAuthority),
       bytes(tokenProgram),
       bytes(mint),
    ]

    address, bump = SolPubkey.find_program_address(seeds,
            program_id=SolPubkey.from_string('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL')
            )

    return address, bump



def find_PoolAuthorityWsolAccount(poolAuthority: SolPubkey, tokenProgram: SolPubkey, wsolMint: SolPubkey) -> typing.Tuple[SolPubkey, int]:
    seeds = [
       bytes(poolAuthority),
       bytes(tokenProgram),
       bytes(wsolMint),
    ]

    address, bump = SolPubkey.find_program_address(seeds,
            program_id=SolPubkey.from_string('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL')
            )

    return address, bump



def find_AmmGlobalConfig() -> typing.Tuple[SolPubkey, int]:
    seeds = [
       b"\x67\x6c\x6f\x62\x61\x6c\x5f\x63\x6f\x6e\x66\x69\x67",
    ]

    address, bump = SolPubkey.find_program_address(seeds,
            program_id=SolPubkey.from_string('pAMMBay6oceH9fJKBRHGP5D4bD4sWpmSwMn52FMfXEA')
            )

    return address, bump





def find_LpMint(pool: SolPubkey) -> typing.Tuple[SolPubkey, int]:
    seeds = [
       b"\x70\x6f\x6f\x6c\x5f\x6c\x70\x5f\x6d\x69\x6e\x74",
       bytes(pool),
    ]

    address, bump = SolPubkey.find_program_address(seeds,
            program_id=SolPubkey.from_string('pAMMBay6oceH9fJKBRHGP5D4bD4sWpmSwMn52FMfXEA')
            )

    return address, bump



def find_UserPoolTokenAccount(poolAuthority: SolPubkey, token2022Program: SolPubkey, lpMint: SolPubkey) -> typing.Tuple[SolPubkey, int]:
    seeds = [
       bytes(poolAuthority),
       bytes(token2022Program),
       bytes(lpMint),
    ]

    address, bump = SolPubkey.find_program_address(seeds,
            program_id=SolPubkey.from_string('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL')
            )

    return address, bump



def find_PoolBaseTokenAccount(pool: SolPubkey, tokenProgram: SolPubkey, mint: SolPubkey) -> typing.Tuple[SolPubkey, int]:
    seeds = [
       bytes(pool),
       bytes(tokenProgram),
       bytes(mint),
    ]

    address, bump = SolPubkey.find_program_address(seeds,
            program_id=SolPubkey.from_string('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL')
            )

    return address, bump



def find_PoolQuoteTokenAccount(pool: SolPubkey, tokenProgram: SolPubkey, wsolMint: SolPubkey) -> typing.Tuple[SolPubkey, int]:
    seeds = [
       bytes(pool),
       bytes(tokenProgram),
       bytes(wsolMint),
    ]

    address, bump = SolPubkey.find_program_address(seeds,
            program_id=SolPubkey.from_string('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL')
            )

    return address, bump







def find_PumpAmmEventAuthority() -> typing.Tuple[SolPubkey, int]:
    seeds = [
       b"\x5f\x5f\x65\x76\x65\x6e\x74\x5f\x61\x75\x74\x68\x6f\x72\x69\x74\x79",
    ]

    address, bump = SolPubkey.find_program_address(seeds,
            program_id=SolPubkey.from_string('pAMMBay6oceH9fJKBRHGP5D4bD4sWpmSwMn52FMfXEA')
            )

    return address, bump



def find_EventAuthority() -> typing.Tuple[SolPubkey, int]:
    seeds = [
       b"\x5f\x5f\x65\x76\x65\x6e\x74\x5f\x61\x75\x74\x68\x6f\x72\x69\x74\x79",
    ]

    address, bump = SolPubkey.find_program_address(seeds,
        PROGRAM_ID
            )

    return address, bump



