'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey;
from construct import Container;
from dataclasses import dataclass;
from solders.instruction import AccountMeta, Instruction;
from solders.pubkey import Pubkey;
from solders.sysvar import RENT;
from ..program_id import PROGRAM_ID;
class SetCreatorArgs(typing.TypedDict):
    creator:Pubkey


layout = borsh.CStruct(
    "creator" /BorshPubkey,
    )


class SetCreatorAccounts(typing.TypedDict):
    setCreatorAuthority:Pubkey
    global_:Pubkey
    mint:Pubkey
    metadata:Pubkey
    bondingCurve:Pubkey
    eventAuthority:Pubkey
    program:Pubkey

def SetCreator(
    args: SetCreatorArgs,
    accounts: SetCreatorAccounts,
    program_id: Pubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["setCreatorAuthority"], is_signer=True, is_writable=False),
    AccountMeta(pubkey=accounts["global_"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["mint"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["metadata"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["bondingCurve"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["eventAuthority"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["program"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=RENT, is_signer=False, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\xfe\x94\xff\x70\xcf\x8e\xaa\xa5"
    encoded_args = layout.build({
    "creator":args["creator"],
       })

    data = identifier + encoded_args
    return Instruction(program_id,data,keys)

def find_Global() -> typing.Tuple[Pubkey, int]:
    seeds = [
       b"\x67\x6c\x6f\x62\x61\x6c",
    ]

    address, bump = Pubkey.find_program_address(seeds,
        PROGRAM_ID
            ) # Using solana.publickey

    return address, bump



def find_Metadata(mint: Pubkey) -> typing.Tuple[Pubkey, int]:
    seeds = [
       b"\x6d\x65\x74\x61\x64\x61\x74\x61",
       b"\x0b\x70\x65\xb1\xe3\xd1\x7c\x45\x38\x9d\x52\x7f\x6b\x04\xc3\xcd\x58\xb8\x6c\x73\x1a\xa0\xfd\xb5\x49\xb6\xd1\xbc\x03\xf8\x29\x46",
       bytes(mint),
    ]

    address, bump = Pubkey.find_program_address(seeds,
            program_id=Pubkey.from_string('metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s')
            ) # Using solana.publickey

    return address, bump



def find_BondingCurve(mint: Pubkey) -> typing.Tuple[Pubkey, int]:
    seeds = [
       b"\x62\x6f\x6e\x64\x69\x6e\x67\x2d\x63\x75\x72\x76\x65",
       bytes(mint),
    ]

    address, bump = Pubkey.find_program_address(seeds,
        PROGRAM_ID
            ) # Using solana.publickey

    return address, bump



def find_EventAuthority() -> typing.Tuple[Pubkey, int]:
    seeds = [
       b"\x5f\x5f\x65\x76\x65\x6e\x74\x5f\x61\x75\x74\x68\x6f\x72\x69\x74\x79",
    ]

    address, bump = Pubkey.find_program_address(seeds,
        PROGRAM_ID
            ) # Using solana.publickey

    return address, bump



