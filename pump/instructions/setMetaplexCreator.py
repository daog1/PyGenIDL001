'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from construct import Container;
from dataclasses import dataclass;
from solders.instruction import AccountMeta, Instruction;
from solders.pubkey import Pubkey as SolPubkey;
from solders.sysvar import RENT;
from ..program_id import PROGRAM_ID;

class SetMetaplexCreatorAccounts(typing.TypedDict):
    mint:SolPubkey
    metadata:SolPubkey
    bondingCurve:SolPubkey
    eventAuthority:SolPubkey
    program:SolPubkey

def SetMetaplexCreator(
    accounts: SetMetaplexCreatorAccounts,
    program_id: SolPubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["mint"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["metadata"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["bondingCurve"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["eventAuthority"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["program"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=RENT, is_signer=False, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\x8a\x60\xae\xd9\x30\x55\xc5\xf6"
    encoded_args = b""

    data = identifier + encoded_args
    return Instruction(program_id,data,keys)

def find_Metadata(mint: SolPubkey) -> typing.Tuple[SolPubkey, int]:
    seeds = [
       b"\x6d\x65\x74\x61\x64\x61\x74\x61",
       b"\x0b\x70\x65\xb1\xe3\xd1\x7c\x45\x38\x9d\x52\x7f\x6b\x04\xc3\xcd\x58\xb8\x6c\x73\x1a\xa0\xfd\xb5\x49\xb6\xd1\xbc\x03\xf8\x29\x46",
       bytes(mint),
    ]

    address, bump = SolPubkey.find_program_address(seeds,
            program_id=SolPubkey.from_string('metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s')
            )

    return address, bump



def find_BondingCurve(mint: SolPubkey) -> typing.Tuple[SolPubkey, int]:
    seeds = [
       b"\x62\x6f\x6e\x64\x69\x6e\x67\x2d\x63\x75\x72\x76\x65",
       bytes(mint),
    ]

    address, bump = SolPubkey.find_program_address(seeds,
        PROGRAM_ID
            )

    return address, bump



def find_EventAuthority() -> typing.Tuple[SolPubkey, int]:
    seeds = [
       b"\x5f\x5f\x65\x76\x65\x6e\x74\x5f\x61\x75\x74\x68\x6f\x72\x69\x74\x79",
    ]

    address, bump = SolPubkey.find_program_address(seeds,
        PROGRAM_ID
            )

    return address, bump



