'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import typing
from solders.instruction import AccountMeta, Instruction
from solders.pubkey import Pubkey as SolPubkey
from ..program_id import PROGRAM_ID

class UpdateGlobalAuthorityAccounts(typing.TypedDict):
    global_:SolPubkey
    authority:SolPubkey
    newAuthority:SolPubkey
    eventAuthority:SolPubkey
    program:SolPubkey

def UpdateGlobalAuthority(
    accounts: UpdateGlobalAuthorityAccounts,
    program_id: SolPubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["global_"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["authority"], is_signer=True, is_writable=False),
    AccountMeta(pubkey=accounts["newAuthority"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["eventAuthority"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["program"], is_signer=False, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\xe3\xb5\x4a\xc4\xd0\x15\x61\xd5"
    encoded_args = b""
    data = identifier + encoded_args
    return Instruction(program_id,data,keys)


def find_Global() -> typing.Tuple[SolPubkey, int]:
    seeds = [
       b"\x67\x6c\x6f\x62\x61\x6c",
    ]

    address, bump = SolPubkey.find_program_address(seeds,
        PROGRAM_ID
            )

    return address, bump





def find_EventAuthority() -> typing.Tuple[SolPubkey, int]:
    seeds = [
       b"\x5f\x5f\x65\x76\x65\x6e\x74\x5f\x61\x75\x74\x68\x6f\x72\x69\x74\x79",
    ]

    address, bump = SolPubkey.find_program_address(seeds,
        PROGRAM_ID
            )

    return address, bump



