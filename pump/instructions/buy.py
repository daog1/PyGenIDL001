'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from construct import Container;
from dataclasses import dataclass;
from solders.instruction import AccountMeta, Instruction;
from solders.pubkey import Pubkey as SolPubkey;
from ..program_id import PROGRAM_ID;
class BuyArgs(typing.TypedDict):
    amount:int
    maxSolCost:int


layout = borsh.CStruct(
    "amount" /borsh.U64,
    "maxSolCost" /borsh.U64,
    )


class BuyAccounts(typing.TypedDict):
    global_:SolPubkey
    feeRecipient:SolPubkey
    mint:SolPubkey
    bondingCurve:SolPubkey
    associatedBondingCurve:SolPubkey
    associatedUser:SolPubkey
    user:SolPubkey
    systemProgram:SolPubkey
    tokenProgram:SolPubkey
    creatorVault:SolPubkey
    eventAuthority:SolPubkey
    program:SolPubkey

def Buy(
    args: BuyArgs,
    accounts: BuyAccounts,
    program_id: SolPubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["global_"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["feeRecipient"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["mint"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["bondingCurve"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["associatedBondingCurve"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["associatedUser"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["user"], is_signer=True, is_writable=True),
    AccountMeta(pubkey=accounts["systemProgram"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["tokenProgram"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["creatorVault"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["eventAuthority"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["program"], is_signer=False, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\x66\x06\x3d\x12\x01\xda\xeb\xea"
    encoded_args = layout.build({
        "amount":args["amount"],
        "maxSolCost":args["maxSolCost"],
       })
    data = identifier + encoded_args
    return Instruction(program_id,data,keys)


def find_Global() -> typing.Tuple[SolPubkey, int]:
    seeds = [
       b"\x67\x6c\x6f\x62\x61\x6c",
    ]

    address, bump = SolPubkey.find_program_address(seeds,
        PROGRAM_ID
            )

    return address, bump



def find_BondingCurve(mint: SolPubkey) -> typing.Tuple[SolPubkey, int]:
    seeds = [
       b"\x62\x6f\x6e\x64\x69\x6e\x67\x2d\x63\x75\x72\x76\x65",
       bytes(mint),
    ]

    address, bump = SolPubkey.find_program_address(seeds,
        PROGRAM_ID
            )

    return address, bump



def find_AssociatedBondingCurve(bondingCurve: SolPubkey, mint: SolPubkey) -> typing.Tuple[SolPubkey, int]:
    seeds = [
       bytes(bondingCurve),
       b"\x06\xdd\xf6\xe1\xd7\x65\xa1\x93\xd9\xcb\xe1\x46\xce\xeb\x79\xac\x1c\xb4\x85\xed\x5f\x5b\x37\x91\x3a\x8c\xf5\x85\x7e\xff\x00\xa9",
       bytes(mint),
    ]

    address, bump = SolPubkey.find_program_address(seeds,
            program_id=SolPubkey.from_string('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL')
            )

    return address, bump







def find_EventAuthority() -> typing.Tuple[SolPubkey, int]:
    seeds = [
       b"\x5f\x5f\x65\x76\x65\x6e\x74\x5f\x61\x75\x74\x68\x6f\x72\x69\x74\x79",
    ]

    address, bump = SolPubkey.find_program_address(seeds,
        PROGRAM_ID
            )

    return address, bump



