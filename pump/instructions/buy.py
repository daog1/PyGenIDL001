'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from construct import Container;
from dataclasses import dataclass;
from solders.instruction import AccountMeta, Instruction;
from solders.pubkey import Pubkey;
from solders.sysvar import RENT;
from ..program_id import PROGRAM_ID;
class BuyArgs(typing.TypedDict):
    amount:int
    maxSolCost:int


layout = borsh.CStruct(
    "amount" /borsh.U64,
    "maxSolCost" /borsh.U64,
    )


class BuyAccounts(typing.TypedDict):
    global_:Pubkey
    feeRecipient:Pubkey
    mint:Pubkey
    bondingCurve:Pubkey
    associatedBondingCurve:Pubkey
    associatedUser:Pubkey
    user:Pubkey
    systemProgram:Pubkey
    tokenProgram:Pubkey
    rent:Pubkey
    eventAuthority:Pubkey
    program:Pubkey

def Buy(
    args: BuyArgs,
    accounts: BuyAccounts,
    program_id: Pubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["global_"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["feeRecipient"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["mint"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["bondingCurve"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["associatedBondingCurve"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["associatedUser"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["user"], is_signer=True, is_writable=True),
    AccountMeta(pubkey=accounts["systemProgram"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["tokenProgram"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["rent"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["eventAuthority"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["program"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=RENT, is_signer=False, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\x66\x06\x3d\x12\x01\xda\xeb\xea"
    encoded_args = b""

    data = identifier + encoded_args
    return Instruction(program_id,data,keys)

