'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from anchorpy.borsh_extension import BorshPubkey
from solders.instruction import AccountMeta, Instruction
from solders.pubkey import Pubkey as SolPubkey
from ..program_id import PROGRAM_ID
class CreateArgs(typing.TypedDict):
    name:str
    symbol:str
    uri:str
    creator:SolPubkey


layout = borsh.CStruct(
    "name" /borsh.String,
    "symbol" /borsh.String,
    "uri" /borsh.String,
    "creator" /BorshPubkey,
    )


class CreateAccounts(typing.TypedDict):
    mint:SolPubkey
    mintAuthority:SolPubkey
    bondingCurve:SolPubkey
    associatedBondingCurve:SolPubkey
    global_:SolPubkey
    mplTokenMetadata:SolPubkey
    metadata:SolPubkey
    user:SolPubkey
    systemProgram:SolPubkey
    tokenProgram:SolPubkey
    associatedTokenProgram:SolPubkey
    rent:SolPubkey
    eventAuthority:SolPubkey
    program:SolPubkey

def Create(
    args: CreateArgs,
    accounts: CreateAccounts,
    program_id: SolPubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["mint"], is_signer=True, is_writable=True),
    AccountMeta(pubkey=accounts["mintAuthority"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["bondingCurve"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["associatedBondingCurve"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["global_"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["mplTokenMetadata"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["metadata"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["user"], is_signer=True, is_writable=True),
    AccountMeta(pubkey=accounts["systemProgram"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["tokenProgram"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["associatedTokenProgram"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["rent"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["eventAuthority"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["program"], is_signer=False, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\x18\x1e\xc8\x28\x05\x1c\x07\x77"
    encoded_args = layout.build({
        "name":args["name"],
        "symbol":args["symbol"],
        "uri":args["uri"],
        "creator":args["creator"],
       })
    data = identifier + encoded_args
    return Instruction(program_id,data,keys)


def find_MintAuthority() -> typing.Tuple[SolPubkey, int]:
    seeds = [
       b"\x6d\x69\x6e\x74\x2d\x61\x75\x74\x68\x6f\x72\x69\x74\x79",
    ]

    address, bump = SolPubkey.find_program_address(seeds,
        PROGRAM_ID
            )

    return address, bump



def find_BondingCurve(mint: SolPubkey) -> typing.Tuple[SolPubkey, int]:
    seeds = [
       b"\x62\x6f\x6e\x64\x69\x6e\x67\x2d\x63\x75\x72\x76\x65",
       bytes(mint),
    ]

    address, bump = SolPubkey.find_program_address(seeds,
        PROGRAM_ID
            )

    return address, bump



def find_AssociatedBondingCurve(bondingCurve: SolPubkey, mint: SolPubkey) -> typing.Tuple[SolPubkey, int]:
    seeds = [
       bytes(bondingCurve),
       b"\x06\xdd\xf6\xe1\xd7\x65\xa1\x93\xd9\xcb\xe1\x46\xce\xeb\x79\xac\x1c\xb4\x85\xed\x5f\x5b\x37\x91\x3a\x8c\xf5\x85\x7e\xff\x00\xa9",
       bytes(mint),
    ]

    address, bump = SolPubkey.find_program_address(seeds,
            program_id=SolPubkey.from_string('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL')
            )

    return address, bump



def find_Global() -> typing.Tuple[SolPubkey, int]:
    seeds = [
       b"\x67\x6c\x6f\x62\x61\x6c",
    ]

    address, bump = SolPubkey.find_program_address(seeds,
        PROGRAM_ID
            )

    return address, bump





def find_Metadata(mint: SolPubkey) -> typing.Tuple[SolPubkey, int]:
    seeds = [
       b"\x6d\x65\x74\x61\x64\x61\x74\x61",
       b"\x0b\x70\x65\xb1\xe3\xd1\x7c\x45\x38\x9d\x52\x7f\x6b\x04\xc3\xcd\x58\xb8\x6c\x73\x1a\xa0\xfd\xb5\x49\xb6\xd1\xbc\x03\xf8\x29\x46",
       bytes(mint),
    ]

    address, bump = SolPubkey.find_program_address(seeds,
            program_id=SolPubkey.from_string('metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s')
            )

    return address, bump











def find_EventAuthority() -> typing.Tuple[SolPubkey, int]:
    seeds = [
       b"\x5f\x5f\x65\x76\x65\x6e\x74\x5f\x61\x75\x74\x68\x6f\x72\x69\x74\x79",
    ]

    address, bump = SolPubkey.find_program_address(seeds,
        PROGRAM_ID
            )

    return address, bump



