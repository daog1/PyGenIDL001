'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey;
from construct import Container;
from dataclasses import dataclass;
from solders.instruction import AccountMeta, Instruction;
from solders.pubkey import Pubkey;
from solders.sysvar import RENT;
from ..program_id import PROGRAM_ID;
class CreateArgs(typing.TypedDict):
    name:str
    symbol:str
    uri:str
    creator:Pubkey


layout = borsh.CStruct(
    "name" /borsh.String,
    "symbol" /borsh.String,
    "uri" /borsh.String,
    "creator" /BorshPubkey,
    )


class CreateAccounts(typing.TypedDict):
    mint:Pubkey
    mintAuthority:Pubkey
    bondingCurve:Pubkey
    associatedBondingCurve:Pubkey
    global_:Pubkey
    mplTokenMetadata:Pubkey
    metadata:Pubkey
    user:Pubkey
    systemProgram:Pubkey
    tokenProgram:Pubkey
    associatedTokenProgram:Pubkey
    rent:Pubkey
    eventAuthority:Pubkey
    program:Pubkey

def Create(
    args: CreateArgs,
    accounts: CreateAccounts,
    program_id: Pubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["mint"], is_signer=True, is_writable=True),
    AccountMeta(pubkey=accounts["mintAuthority"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["bondingCurve"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["associatedBondingCurve"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["global_"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["mplTokenMetadata"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["metadata"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["user"], is_signer=True, is_writable=True),
    AccountMeta(pubkey=accounts["systemProgram"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["tokenProgram"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["associatedTokenProgram"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["rent"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["eventAuthority"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["program"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=RENT, is_signer=False, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\x18\x1e\xc8\x28\x05\x1c\x07\x77"
    encoded_args = layout.build({
    "name":args["name"],
    "symbol":args["symbol"],
    "uri":args["uri"],
    "creator":args["creator"],
       })

    data = identifier + encoded_args
    return Instruction(program_id,data,keys)







