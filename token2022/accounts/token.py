'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from anchorpy.borsh_extension import BorshPubkey
from anchorpy.error import AccountInvalidDiscriminator
from anchorpy.utils.rpc import get_multiple_accounts
from dataclasses import dataclass
from solana.rpc.async_api import AsyncClient
from solana.rpc.commitment import Commitment
from solders.pubkey import Pubkey as SolPubkey
from .. import types
from ..program_id import PROGRAM_ID
from ..shared import HiddenPrefixAdapter, OptionU32, RemainderOption


class TokenJSON(typing.TypedDict):
    mint: str
    owner: str
    amount: int
    delegate: typing.Optional[str]
    state: types.accountState.AccountStateJSON
    isNative: typing.Optional[int]
    delegatedAmount: int
    closeAuthority: typing.Optional[str]
    extensions: str

@dataclass
class Token:
    #fields
    mint: SolPubkey
    owner: SolPubkey
    amount: int
    delegate: typing.Optional[SolPubkey]
    state: types.accountState.AccountStateKind
    isNative: typing.Optional[int]
    delegatedAmount: int
    closeAuthority: typing.Optional[SolPubkey]
    extensions: SolPubkey


    layout: typing.ClassVar = borsh.CStruct(
        "mint" /BorshPubkey,
        "owner" /BorshPubkey,
        "amount" /borsh.U64,
        "delegate" /OptionU32(BorshPubkey),
        "state" /types.accountState.layout,
        "isNative" /OptionU32(borsh.U64),
        "delegatedAmount" /borsh.U64,
        "closeAuthority" /OptionU32(BorshPubkey),
        "extensions" /RemainderOption(HiddenPrefixAdapter(borsh.TupleStruct(Const(2,borsh.U8)))),
        )



    @classmethod
    async def fetch(
        cls,
        conn: AsyncClient,
        address: SolPubkey,
        commitment: typing.Optional[Commitment] = None,
        program_id: SolPubkey = PROGRAM_ID,
    ) -> typing.Optional["Token"]:
        resp = await conn.get_account_info(address, commitment=commitment)
        info = resp.value
        if info is None:
            return None
        if info.owner != program_id:
            raise ValueError("Account does not belong to this program")
        bytes_data = info.data
        return cls.decode(bytes_data)

    @classmethod
    async def fetch_multiple(
        cls,
        conn: AsyncClient,
        addresses: list[SolPubkey],
        commitment: typing.Optional[Commitment] = None,
        program_id: SolPubkey = PROGRAM_ID,
    ) -> typing.List[typing.Optional["Token"]]:
        infos = await get_multiple_accounts(conn, addresses, commitment=commitment)
        res: typing.List[typing.Optional["Token"]] = []
        for info in infos:
            if info is None:
                res.append(None)
                continue
            if info.account.owner != program_id:
                raise ValueError("Account does not belong to this program")
            res.append(cls.decode(info.account.data))
        return res

    @classmethod
    def decode(cls, data: bytes) -> "Token":
        dec = Token.layout.parse(data)
        return cls(
                mint=dec.mint,
                owner=dec.owner,
                amount=dec.amount,
                delegate=dec.delegate,
                state=types.accountState.from_decoded(dec.state),
                isNative=dec.isNative,
                delegatedAmount=dec.delegatedAmount,
                closeAuthority=dec.closeAuthority,
                extensions=dec.extensions,
                )

    def to_json(self) -> TokenJSON:
        return {
                "mint": str(self.mint),
                "owner": str(self.owner),
                "amount": self.amount,
                "delegate": (None if self.delegate is None else str(self.delegate)),
                "state": self.state.to_json(),
                "isNative": (None if self.isNative is None else self.isNative),
                "delegatedAmount": self.delegatedAmount,
                "closeAuthority": (None if self.closeAuthority is None else str(self.closeAuthority)),
                "extensions": str(self.extensions),
                }

    @classmethod
    def from_json(cls, obj: TokenJSON) -> "Token":
        return cls(
                mint=SolPubkey.from_string(obj["mint"]),
                owner=SolPubkey.from_string(obj["owner"]),
                amount=obj["amount"],
                delegate=(None if obj["delegate"] is None else SolPubkey.from_string(obj["delegate"])),
                state=types.accountState.from_json(obj["state"]),
                isNative=(None if obj["isNative"] is None else obj["isNative"]),
                delegatedAmount=obj["delegatedAmount"],
                closeAuthority=(None if obj["closeAuthority"] is None else SolPubkey.from_string(obj["closeAuthority"])),
                extensions=SolPubkey.from_string(obj["extensions"]),
                )




