'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from anchorpy.borsh_extension import BorshPubkey
from anchorpy.error import AccountInvalidDiscriminator
from anchorpy.utils.rpc import get_multiple_accounts
from dataclasses import dataclass
from solana.rpc.async_api import AsyncClient
from solana.rpc.commitment import Commitment
from solders.pubkey import Pubkey as SolPubkey
from ..program_id import PROGRAM_ID


class MultisigJSON(typing.TypedDict):
    m: int
    n: int
    isInitialized: bool
    signers: list[str]

@dataclass
class Multisig:
    #fields
    m: int
    n: int
    isInitialized: bool
    signers: list[SolPubkey]


    layout: typing.ClassVar = borsh.CStruct(
        "m" /borsh.U8,
        "n" /borsh.U8,
        "isInitialized" /borsh.Bool,
        "signers" /BorshPubkey[11],
        )



    @classmethod
    async def fetch(
        cls,
        conn: AsyncClient,
        address: SolPubkey,
        commitment: typing.Optional[Commitment] = None,
        program_id: SolPubkey = PROGRAM_ID,
    ) -> typing.Optional["Multisig"]:
        resp = await conn.get_account_info(address, commitment=commitment)
        info = resp.value
        if info is None:
            return None
        if info.owner != program_id:
            raise ValueError("Account does not belong to this program")
        bytes_data = info.data
        return cls.decode(bytes_data)

    @classmethod
    async def fetch_multiple(
        cls,
        conn: AsyncClient,
        addresses: list[SolPubkey],
        commitment: typing.Optional[Commitment] = None,
        program_id: SolPubkey = PROGRAM_ID,
    ) -> typing.List[typing.Optional["Multisig"]]:
        infos = await get_multiple_accounts(conn, addresses, commitment=commitment)
        res: typing.List[typing.Optional["Multisig"]] = []
        for info in infos:
            if info is None:
                res.append(None)
                continue
            if info.account.owner != program_id:
                raise ValueError("Account does not belong to this program")
            res.append(cls.decode(info.account.data))
        return res

    @classmethod
    def decode(cls, data: bytes) -> "Multisig":
        dec = Multisig.layout.parse(data)
        return cls(
                m=dec.m,
                n=dec.n,
                isInitialized=dec.isInitialized,
                signers=dec.signers,
                )

    def to_json(self) -> MultisigJSON:
        return {
                "m": self.m,
                "n": self.n,
                "isInitialized": self.isInitialized,
                "signers": list(map(lambda item:str(item),self.signers)),
                }

    @classmethod
    def from_json(cls, obj: MultisigJSON) -> "Multisig":
        return cls(
                m=obj["m"],
                n=obj["n"],
                isInitialized=obj["isInitialized"],
                signers=list(map(lambda item:SolPubkey.from_string(item),obj["signers"])),
                )




