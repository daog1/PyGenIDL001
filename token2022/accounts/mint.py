'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from anchorpy.borsh_extension import BorshPubkey
from anchorpy.error import AccountInvalidDiscriminator
from anchorpy.utils.rpc import get_multiple_accounts
from dataclasses import dataclass
from solana.rpc.async_api import AsyncClient
from solana.rpc.commitment import Commitment
from solders.pubkey import Pubkey as SolPubkey
from ..program_id import PROGRAM_ID
from ..shared import HiddenPrefixAdapter, OptionU32, RemainderOption


class MintJSON(typing.TypedDict):
    mintAuthority: typing.Optional[str]
    supply: int
    decimals: int
    isInitialized: bool
    freezeAuthority: typing.Optional[str]
    extensions: str

@dataclass
class Mint:
    #fields
    mintAuthority: typing.Optional[SolPubkey]
    supply: int
    decimals: int
    isInitialized: bool
    freezeAuthority: typing.Optional[SolPubkey]
    extensions: SolPubkey


    layout: typing.ClassVar = borsh.CStruct(
        "mintAuthority" /OptionU32(BorshPubkey),
        "supply" /borsh.U64,
        "decimals" /borsh.U8,
        "isInitialized" /borsh.Bool,
        "freezeAuthority" /OptionU32(BorshPubkey),
        "extensions" /RemainderOption(HiddenPrefixAdapter(borsh.TupleStruct(Const(1,PreOffset(borsh.Vec(typing.cast(Construct, types.extension.layout)),83))))),
        )



    @classmethod
    async def fetch(
        cls,
        conn: AsyncClient,
        address: SolPubkey,
        commitment: typing.Optional[Commitment] = None,
        program_id: SolPubkey = PROGRAM_ID,
    ) -> typing.Optional["Mint"]:
        resp = await conn.get_account_info(address, commitment=commitment)
        info = resp.value
        if info is None:
            return None
        if info.owner != program_id:
            raise ValueError("Account does not belong to this program")
        bytes_data = info.data
        return cls.decode(bytes_data)

    @classmethod
    async def fetch_multiple(
        cls,
        conn: AsyncClient,
        addresses: list[SolPubkey],
        commitment: typing.Optional[Commitment] = None,
        program_id: SolPubkey = PROGRAM_ID,
    ) -> typing.List[typing.Optional["Mint"]]:
        infos = await get_multiple_accounts(conn, addresses, commitment=commitment)
        res: typing.List[typing.Optional["Mint"]] = []
        for info in infos:
            if info is None:
                res.append(None)
                continue
            if info.account.owner != program_id:
                raise ValueError("Account does not belong to this program")
            res.append(cls.decode(info.account.data))
        return res

    @classmethod
    def decode(cls, data: bytes) -> "Mint":
        dec = Mint.layout.parse(data)
        return cls(
                mintAuthority=dec.mintAuthority,
                supply=dec.supply,
                decimals=dec.decimals,
                isInitialized=dec.isInitialized,
                freezeAuthority=dec.freezeAuthority,
                extensions=dec.extensions,
                )

    def to_json(self) -> MintJSON:
        return {
                "mintAuthority": (None if self.mintAuthority is None else str(self.mintAuthority)),
                "supply": self.supply,
                "decimals": self.decimals,
                "isInitialized": self.isInitialized,
                "freezeAuthority": (None if self.freezeAuthority is None else str(self.freezeAuthority)),
                "extensions": str(self.extensions),
                }

    @classmethod
    def from_json(cls, obj: MintJSON) -> "Mint":
        return cls(
                mintAuthority=(None if obj["mintAuthority"] is None else SolPubkey.from_string(obj["mintAuthority"])),
                supply=obj["supply"],
                decimals=obj["decimals"],
                isInitialized=obj["isInitialized"],
                freezeAuthority=(None if obj["freezeAuthority"] is None else SolPubkey.from_string(obj["freezeAuthority"])),
                extensions=SolPubkey.from_string(obj["extensions"]),
                )




