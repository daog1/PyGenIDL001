'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from anchorpy.borsh_extension import EnumForCodegen
from dataclasses import dataclass


class MintTokensJSON(typing.TypedDict):
    kind: typing.Literal["MintTokens"]


@dataclass
class MintTokens:
    discriminator: typing.ClassVar = 0
    def to_json(self) -> MintTokensJSON:
        return MintTokensJSON(
            kind="MintTokens",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "MintTokens": {},
        }




class FreezeAccountJSON(typing.TypedDict):
    kind: typing.Literal["FreezeAccount"]


@dataclass
class FreezeAccount:
    discriminator: typing.ClassVar = 1
    def to_json(self) -> FreezeAccountJSON:
        return FreezeAccountJSON(
            kind="FreezeAccount",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "FreezeAccount": {},
        }




class AccountOwnerJSON(typing.TypedDict):
    kind: typing.Literal["AccountOwner"]


@dataclass
class AccountOwner:
    discriminator: typing.ClassVar = 2
    def to_json(self) -> AccountOwnerJSON:
        return AccountOwnerJSON(
            kind="AccountOwner",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "AccountOwner": {},
        }




class CloseAccountJSON(typing.TypedDict):
    kind: typing.Literal["CloseAccount"]


@dataclass
class CloseAccount:
    discriminator: typing.ClassVar = 3
    def to_json(self) -> CloseAccountJSON:
        return CloseAccountJSON(
            kind="CloseAccount",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "CloseAccount": {},
        }




class TransferFeeConfigJSON(typing.TypedDict):
    kind: typing.Literal["TransferFeeConfig"]


@dataclass
class TransferFeeConfig:
    discriminator: typing.ClassVar = 4
    def to_json(self) -> TransferFeeConfigJSON:
        return TransferFeeConfigJSON(
            kind="TransferFeeConfig",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "TransferFeeConfig": {},
        }




class WithheldWithdrawJSON(typing.TypedDict):
    kind: typing.Literal["WithheldWithdraw"]


@dataclass
class WithheldWithdraw:
    discriminator: typing.ClassVar = 5
    def to_json(self) -> WithheldWithdrawJSON:
        return WithheldWithdrawJSON(
            kind="WithheldWithdraw",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "WithheldWithdraw": {},
        }




class CloseMintJSON(typing.TypedDict):
    kind: typing.Literal["CloseMint"]


@dataclass
class CloseMint:
    discriminator: typing.ClassVar = 6
    def to_json(self) -> CloseMintJSON:
        return CloseMintJSON(
            kind="CloseMint",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "CloseMint": {},
        }




class InterestRateJSON(typing.TypedDict):
    kind: typing.Literal["InterestRate"]


@dataclass
class InterestRate:
    discriminator: typing.ClassVar = 7
    def to_json(self) -> InterestRateJSON:
        return InterestRateJSON(
            kind="InterestRate",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "InterestRate": {},
        }




class PermanentDelegateJSON(typing.TypedDict):
    kind: typing.Literal["PermanentDelegate"]


@dataclass
class PermanentDelegate:
    discriminator: typing.ClassVar = 8
    def to_json(self) -> PermanentDelegateJSON:
        return PermanentDelegateJSON(
            kind="PermanentDelegate",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "PermanentDelegate": {},
        }




class ConfidentialTransferMintJSON(typing.TypedDict):
    kind: typing.Literal["ConfidentialTransferMint"]


@dataclass
class ConfidentialTransferMint:
    discriminator: typing.ClassVar = 9
    def to_json(self) -> ConfidentialTransferMintJSON:
        return ConfidentialTransferMintJSON(
            kind="ConfidentialTransferMint",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "ConfidentialTransferMint": {},
        }




class TransferHookProgramIdJSON(typing.TypedDict):
    kind: typing.Literal["TransferHookProgramId"]


@dataclass
class TransferHookProgramId:
    discriminator: typing.ClassVar = 10
    def to_json(self) -> TransferHookProgramIdJSON:
        return TransferHookProgramIdJSON(
            kind="TransferHookProgramId",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "TransferHookProgramId": {},
        }




class ConfidentialTransferFeeConfigJSON(typing.TypedDict):
    kind: typing.Literal["ConfidentialTransferFeeConfig"]


@dataclass
class ConfidentialTransferFeeConfig:
    discriminator: typing.ClassVar = 11
    def to_json(self) -> ConfidentialTransferFeeConfigJSON:
        return ConfidentialTransferFeeConfigJSON(
            kind="ConfidentialTransferFeeConfig",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "ConfidentialTransferFeeConfig": {},
        }




class MetadataPointerJSON(typing.TypedDict):
    kind: typing.Literal["MetadataPointer"]


@dataclass
class MetadataPointer:
    discriminator: typing.ClassVar = 12
    def to_json(self) -> MetadataPointerJSON:
        return MetadataPointerJSON(
            kind="MetadataPointer",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "MetadataPointer": {},
        }




class GroupPointerJSON(typing.TypedDict):
    kind: typing.Literal["GroupPointer"]


@dataclass
class GroupPointer:
    discriminator: typing.ClassVar = 13
    def to_json(self) -> GroupPointerJSON:
        return GroupPointerJSON(
            kind="GroupPointer",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "GroupPointer": {},
        }




class GroupMemberPointerJSON(typing.TypedDict):
    kind: typing.Literal["GroupMemberPointer"]


@dataclass
class GroupMemberPointer:
    discriminator: typing.ClassVar = 14
    def to_json(self) -> GroupMemberPointerJSON:
        return GroupMemberPointerJSON(
            kind="GroupMemberPointer",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "GroupMemberPointer": {},
        }




class ScaledUiAmountJSON(typing.TypedDict):
    kind: typing.Literal["ScaledUiAmount"]


@dataclass
class ScaledUiAmount:
    discriminator: typing.ClassVar = 15
    def to_json(self) -> ScaledUiAmountJSON:
        return ScaledUiAmountJSON(
            kind="ScaledUiAmount",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "ScaledUiAmount": {},
        }




class PauseJSON(typing.TypedDict):
    kind: typing.Literal["Pause"]


@dataclass
class Pause:
    discriminator: typing.ClassVar = 16
    def to_json(self) -> PauseJSON:
        return PauseJSON(
            kind="Pause",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "Pause": {},
        }





AuthorityTypeKind = typing.Union[
    MintTokens,
    FreezeAccount,
    AccountOwner,
    CloseAccount,
    TransferFeeConfig,
    WithheldWithdraw,
    CloseMint,
    InterestRate,
    PermanentDelegate,
    ConfidentialTransferMint,
    TransferHookProgramId,
    ConfidentialTransferFeeConfig,
    MetadataPointer,
    GroupPointer,
    GroupMemberPointer,
    ScaledUiAmount,
    Pause,
]
AuthorityTypeJSON = typing.Union[
    MintTokensJSON,
    FreezeAccountJSON,
    AccountOwnerJSON,
    CloseAccountJSON,
    TransferFeeConfigJSON,
    WithheldWithdrawJSON,
    CloseMintJSON,
    InterestRateJSON,
    PermanentDelegateJSON,
    ConfidentialTransferMintJSON,
    TransferHookProgramIdJSON,
    ConfidentialTransferFeeConfigJSON,
    MetadataPointerJSON,
    GroupPointerJSON,
    GroupMemberPointerJSON,
    ScaledUiAmountJSON,
    PauseJSON,
]

def from_decoded(obj: dict) -> AuthorityTypeKind:
    if not isinstance(obj, dict):
        raise ValueError("Invalid enum object")
    if "MintTokens" in obj:
      return MintTokens()
    if "FreezeAccount" in obj:
      return FreezeAccount()
    if "AccountOwner" in obj:
      return AccountOwner()
    if "CloseAccount" in obj:
      return CloseAccount()
    if "TransferFeeConfig" in obj:
      return TransferFeeConfig()
    if "WithheldWithdraw" in obj:
      return WithheldWithdraw()
    if "CloseMint" in obj:
      return CloseMint()
    if "InterestRate" in obj:
      return InterestRate()
    if "PermanentDelegate" in obj:
      return PermanentDelegate()
    if "ConfidentialTransferMint" in obj:
      return ConfidentialTransferMint()
    if "TransferHookProgramId" in obj:
      return TransferHookProgramId()
    if "ConfidentialTransferFeeConfig" in obj:
      return ConfidentialTransferFeeConfig()
    if "MetadataPointer" in obj:
      return MetadataPointer()
    if "GroupPointer" in obj:
      return GroupPointer()
    if "GroupMemberPointer" in obj:
      return GroupMemberPointer()
    if "ScaledUiAmount" in obj:
      return ScaledUiAmount()
    if "Pause" in obj:
      return Pause()
    raise ValueError("Invalid enum object")

def from_json(obj: AuthorityTypeJSON) -> AuthorityTypeKind:
    if obj["kind"] == "MintTokens":
        return MintTokens()

    if obj["kind"] == "FreezeAccount":
        return FreezeAccount()

    if obj["kind"] == "AccountOwner":
        return AccountOwner()

    if obj["kind"] == "CloseAccount":
        return CloseAccount()

    if obj["kind"] == "TransferFeeConfig":
        return TransferFeeConfig()

    if obj["kind"] == "WithheldWithdraw":
        return WithheldWithdraw()

    if obj["kind"] == "CloseMint":
        return CloseMint()

    if obj["kind"] == "InterestRate":
        return InterestRate()

    if obj["kind"] == "PermanentDelegate":
        return PermanentDelegate()

    if obj["kind"] == "ConfidentialTransferMint":
        return ConfidentialTransferMint()

    if obj["kind"] == "TransferHookProgramId":
        return TransferHookProgramId()

    if obj["kind"] == "ConfidentialTransferFeeConfig":
        return ConfidentialTransferFeeConfig()

    if obj["kind"] == "MetadataPointer":
        return MetadataPointer()

    if obj["kind"] == "GroupPointer":
        return GroupPointer()

    if obj["kind"] == "GroupMemberPointer":
        return GroupMemberPointer()

    if obj["kind"] == "ScaledUiAmount":
        return ScaledUiAmount()

    if obj["kind"] == "Pause":
        return Pause()

    kind = obj["kind"]
    raise ValueError(f"Unrecognized enum kind: {kind}")


layout = EnumForCodegen(
"MintTokens" / borsh.CStruct(),
"FreezeAccount" / borsh.CStruct(),
"AccountOwner" / borsh.CStruct(),
"CloseAccount" / borsh.CStruct(),
"TransferFeeConfig" / borsh.CStruct(),
"WithheldWithdraw" / borsh.CStruct(),
"CloseMint" / borsh.CStruct(),
"InterestRate" / borsh.CStruct(),
"PermanentDelegate" / borsh.CStruct(),
"ConfidentialTransferMint" / borsh.CStruct(),
"TransferHookProgramId" / borsh.CStruct(),
"ConfidentialTransferFeeConfig" / borsh.CStruct(),
"MetadataPointer" / borsh.CStruct(),
"GroupPointer" / borsh.CStruct(),
"GroupMemberPointer" / borsh.CStruct(),
"ScaledUiAmount" / borsh.CStruct(),
"Pause" / borsh.CStruct(),
)
