'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from anchorpy.borsh_extension import BorshPubkey, EnumForCodegen
from dataclasses import dataclass
from solders.pubkey import Pubkey as SolPubkey
from . import accountState, decryptableBalance, encryptedBalance, transferFee
from ..shared import ZeroableOption


class UninitializedJSON(typing.TypedDict):
    kind: typing.Literal["Uninitialized"]


@dataclass
class Uninitialized:
    discriminator: typing.ClassVar = 0
    def to_json(self) -> UninitializedJSON:
        return UninitializedJSON(
            kind="Uninitialized",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "Uninitialized": {},
        }



class TransferFeeConfigJSONValue(typing.TypedDict):
    transferFeeConfigAuthority: str
    withdrawWithheldAuthority: str
    withheldAmount: int
    olderTransferFee: transferFee.TransferFeeJSON
    newerTransferFee: transferFee.TransferFeeJSON


class TransferFeeConfigValue(typing.TypedDict):
    transferFeeConfigAuthority: SolPubkey
    withdrawWithheldAuthority: SolPubkey
    withheldAmount: int
    olderTransferFee: transferFee.TransferFee
    newerTransferFee: transferFee.TransferFee




class TransferFeeConfigJSON(typing.TypedDict):
    kind: typing.Literal["TransferFeeConfig"]
    value: TransferFeeConfigJSONValue


@dataclass
class TransferFeeConfig:
    discriminator: typing.ClassVar = 1
    value : TransferFeeConfigValue
    def to_json(self) -> TransferFeeConfigJSON:
        return TransferFeeConfigJSON(
            kind="TransferFeeConfig",
            value = {
            "transferFeeConfigAuthority":str(self.value["transferFeeConfigAuthority"]),"withdrawWithheldAuthority":str(self.value["withdrawWithheldAuthority"]),"withheldAmount":self.value["withheldAmount"],"olderTransferFee":self.value["olderTransferFee"].to_json(),"newerTransferFee":self.value["newerTransferFee"].to_json()
            }
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "TransferFeeConfig":{ "transferFeeConfigAuthority":self.value["transferFeeConfigAuthority"],"withdrawWithheldAuthority":self.value["withdrawWithheldAuthority"],"withheldAmount":self.value["withheldAmount"],"olderTransferFee":self.value["olderTransferFee"].to_encodable(),"newerTransferFee":self.value["newerTransferFee"].to_encodable() }
            }



class TransferFeeAmountJSONValue(typing.TypedDict):
    withheldAmount: int


class TransferFeeAmountValue(typing.TypedDict):
    withheldAmount: int




class TransferFeeAmountJSON(typing.TypedDict):
    kind: typing.Literal["TransferFeeAmount"]
    value: TransferFeeAmountJSONValue


@dataclass
class TransferFeeAmount:
    discriminator: typing.ClassVar = 2
    value : TransferFeeAmountValue
    def to_json(self) -> TransferFeeAmountJSON:
        return TransferFeeAmountJSON(
            kind="TransferFeeAmount",
            value = {
            "withheldAmount":self.value["withheldAmount"]
            }
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "TransferFeeAmount":{ "withheldAmount":self.value["withheldAmount"] }
            }



class MintCloseAuthorityJSONValue(typing.TypedDict):
    closeAuthority: str


class MintCloseAuthorityValue(typing.TypedDict):
    closeAuthority: SolPubkey




class MintCloseAuthorityJSON(typing.TypedDict):
    kind: typing.Literal["MintCloseAuthority"]
    value: MintCloseAuthorityJSONValue


@dataclass
class MintCloseAuthority:
    discriminator: typing.ClassVar = 3
    value : MintCloseAuthorityValue
    def to_json(self) -> MintCloseAuthorityJSON:
        return MintCloseAuthorityJSON(
            kind="MintCloseAuthority",
            value = {
            "closeAuthority":str(self.value["closeAuthority"])
            }
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "MintCloseAuthority":{ "closeAuthority":self.value["closeAuthority"] }
            }



class ConfidentialTransferMintJSONValue(typing.TypedDict):
    authority: str
    autoApproveNewAccounts: bool
    auditorElgamalPubkey: str


class ConfidentialTransferMintValue(typing.TypedDict):
    authority: borsh.String
    autoApproveNewAccounts: bool
    auditorElgamalPubkey: borsh.String




class ConfidentialTransferMintJSON(typing.TypedDict):
    kind: typing.Literal["ConfidentialTransferMint"]
    value: ConfidentialTransferMintJSONValue


@dataclass
class ConfidentialTransferMint:
    discriminator: typing.ClassVar = 4
    value : ConfidentialTransferMintValue
    def to_json(self) -> ConfidentialTransferMintJSON:
        return ConfidentialTransferMintJSON(
            kind="ConfidentialTransferMint",
            value = {
            "authority":self.value["authority"],"autoApproveNewAccounts":self.value["autoApproveNewAccounts"],"auditorElgamalPubkey":self.value["auditorElgamalPubkey"]
            }
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "ConfidentialTransferMint":{ "authority":self.value["authority"],"autoApproveNewAccounts":self.value["autoApproveNewAccounts"],"auditorElgamalPubkey":self.value["auditorElgamalPubkey"] }
            }



class ConfidentialTransferAccountJSONValue(typing.TypedDict):
    approved: bool
    elgamalPubkey: str
    pendingBalanceLow: encryptedBalance.EncryptedBalanceJSON
    pendingBalanceHigh: encryptedBalance.EncryptedBalanceJSON
    availableBalance: encryptedBalance.EncryptedBalanceJSON
    decryptableAvailableBalance: decryptableBalance.DecryptableBalanceJSON
    allowConfidentialCredits: bool
    allowNonConfidentialCredits: bool
    pendingBalanceCreditCounter: int
    maximumPendingBalanceCreditCounter: int
    expectedPendingBalanceCreditCounter: int
    actualPendingBalanceCreditCounter: int


class ConfidentialTransferAccountValue(typing.TypedDict):
    approved: bool
    elgamalPubkey: SolPubkey
    pendingBalanceLow: encryptedBalance.pyType
    pendingBalanceHigh: encryptedBalance.pyType
    availableBalance: encryptedBalance.pyType
    decryptableAvailableBalance: decryptableBalance.pyType
    allowConfidentialCredits: bool
    allowNonConfidentialCredits: bool
    pendingBalanceCreditCounter: int
    maximumPendingBalanceCreditCounter: int
    expectedPendingBalanceCreditCounter: int
    actualPendingBalanceCreditCounter: int




class ConfidentialTransferAccountJSON(typing.TypedDict):
    kind: typing.Literal["ConfidentialTransferAccount"]
    value: ConfidentialTransferAccountJSONValue


@dataclass
class ConfidentialTransferAccount:
    discriminator: typing.ClassVar = 5
    value : ConfidentialTransferAccountValue
    def to_json(self) -> ConfidentialTransferAccountJSON:
        return ConfidentialTransferAccountJSON(
            kind="ConfidentialTransferAccount",
            value = {
            "approved":self.value["approved"],"elgamalPubkey":str(self.value["elgamalPubkey"]),"pendingBalanceLow":self.value["pendingBalanceLow"].to_json(),"pendingBalanceHigh":self.value["pendingBalanceHigh"].to_json(),"availableBalance":self.value["availableBalance"].to_json(),"decryptableAvailableBalance":self.value["decryptableAvailableBalance"].to_json(),"allowConfidentialCredits":self.value["allowConfidentialCredits"],"allowNonConfidentialCredits":self.value["allowNonConfidentialCredits"],"pendingBalanceCreditCounter":self.value["pendingBalanceCreditCounter"],"maximumPendingBalanceCreditCounter":self.value["maximumPendingBalanceCreditCounter"],"expectedPendingBalanceCreditCounter":self.value["expectedPendingBalanceCreditCounter"],"actualPendingBalanceCreditCounter":self.value["actualPendingBalanceCreditCounter"]
            }
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "ConfidentialTransferAccount":{ "approved":self.value["approved"],"elgamalPubkey":self.value["elgamalPubkey"],"pendingBalanceLow":self.value["pendingBalanceLow"],"pendingBalanceHigh":self.value["pendingBalanceHigh"],"availableBalance":self.value["availableBalance"],"decryptableAvailableBalance":self.value["decryptableAvailableBalance"],"allowConfidentialCredits":self.value["allowConfidentialCredits"],"allowNonConfidentialCredits":self.value["allowNonConfidentialCredits"],"pendingBalanceCreditCounter":self.value["pendingBalanceCreditCounter"],"maximumPendingBalanceCreditCounter":self.value["maximumPendingBalanceCreditCounter"],"expectedPendingBalanceCreditCounter":self.value["expectedPendingBalanceCreditCounter"],"actualPendingBalanceCreditCounter":self.value["actualPendingBalanceCreditCounter"] }
            }



class DefaultAccountStateJSONValue(typing.TypedDict):
    state: accountState.AccountStateJSON


class DefaultAccountStateValue(typing.TypedDict):
    state: accountState.AccountStateKind




class DefaultAccountStateJSON(typing.TypedDict):
    kind: typing.Literal["DefaultAccountState"]
    value: DefaultAccountStateJSONValue


@dataclass
class DefaultAccountState:
    discriminator: typing.ClassVar = 6
    value : DefaultAccountStateValue
    def to_json(self) -> DefaultAccountStateJSON:
        return DefaultAccountStateJSON(
            kind="DefaultAccountState",
            value = {
            "state":self.value["state"].to_json()
            }
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "DefaultAccountState":{ "state":self.value["state"].to_encodable() }
            }



class ImmutableOwnerJSONValue(typing.TypedDict):


class ImmutableOwnerValue(typing.TypedDict):




class ImmutableOwnerJSON(typing.TypedDict):
    kind: typing.Literal["ImmutableOwner"]
    value: ImmutableOwnerJSONValue


@dataclass
class ImmutableOwner:
    discriminator: typing.ClassVar = 7
    value : ImmutableOwnerValue
    def to_json(self) -> ImmutableOwnerJSON:
        return ImmutableOwnerJSON(
            kind="ImmutableOwner",
            value = {
            
            }
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "ImmutableOwner":{  }
            }



class MemoTransferJSONValue(typing.TypedDict):
    requireIncomingTransferMemos: bool


class MemoTransferValue(typing.TypedDict):
    requireIncomingTransferMemos: bool




class MemoTransferJSON(typing.TypedDict):
    kind: typing.Literal["MemoTransfer"]
    value: MemoTransferJSONValue


@dataclass
class MemoTransfer:
    discriminator: typing.ClassVar = 8
    value : MemoTransferValue
    def to_json(self) -> MemoTransferJSON:
        return MemoTransferJSON(
            kind="MemoTransfer",
            value = {
            "requireIncomingTransferMemos":self.value["requireIncomingTransferMemos"]
            }
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "MemoTransfer":{ "requireIncomingTransferMemos":self.value["requireIncomingTransferMemos"] }
            }



class NonTransferableJSONValue(typing.TypedDict):


class NonTransferableValue(typing.TypedDict):




class NonTransferableJSON(typing.TypedDict):
    kind: typing.Literal["NonTransferable"]
    value: NonTransferableJSONValue


@dataclass
class NonTransferable:
    discriminator: typing.ClassVar = 9
    value : NonTransferableValue
    def to_json(self) -> NonTransferableJSON:
        return NonTransferableJSON(
            kind="NonTransferable",
            value = {
            
            }
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "NonTransferable":{  }
            }



class InterestBearingConfigJSONValue(typing.TypedDict):
    rateAuthority: str
    initializationTimestamp: int
    preUpdateAverageRate: int
    lastUpdateTimestamp: int
    currentRate: int


class InterestBearingConfigValue(typing.TypedDict):
    rateAuthority: SolPubkey
    initializationTimestamp: int
    preUpdateAverageRate: int
    lastUpdateTimestamp: int
    currentRate: int




class InterestBearingConfigJSON(typing.TypedDict):
    kind: typing.Literal["InterestBearingConfig"]
    value: InterestBearingConfigJSONValue


@dataclass
class InterestBearingConfig:
    discriminator: typing.ClassVar = 10
    value : InterestBearingConfigValue
    def to_json(self) -> InterestBearingConfigJSON:
        return InterestBearingConfigJSON(
            kind="InterestBearingConfig",
            value = {
            "rateAuthority":str(self.value["rateAuthority"]),"initializationTimestamp":self.value["initializationTimestamp"],"preUpdateAverageRate":self.value["preUpdateAverageRate"],"lastUpdateTimestamp":self.value["lastUpdateTimestamp"],"currentRate":self.value["currentRate"]
            }
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "InterestBearingConfig":{ "rateAuthority":self.value["rateAuthority"],"initializationTimestamp":self.value["initializationTimestamp"],"preUpdateAverageRate":self.value["preUpdateAverageRate"],"lastUpdateTimestamp":self.value["lastUpdateTimestamp"],"currentRate":self.value["currentRate"] }
            }



class CpiGuardJSONValue(typing.TypedDict):
    lockCpi: bool


class CpiGuardValue(typing.TypedDict):
    lockCpi: bool




class CpiGuardJSON(typing.TypedDict):
    kind: typing.Literal["CpiGuard"]
    value: CpiGuardJSONValue


@dataclass
class CpiGuard:
    discriminator: typing.ClassVar = 11
    value : CpiGuardValue
    def to_json(self) -> CpiGuardJSON:
        return CpiGuardJSON(
            kind="CpiGuard",
            value = {
            "lockCpi":self.value["lockCpi"]
            }
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "CpiGuard":{ "lockCpi":self.value["lockCpi"] }
            }



class PermanentDelegateJSONValue(typing.TypedDict):
    delegate: str


class PermanentDelegateValue(typing.TypedDict):
    delegate: SolPubkey




class PermanentDelegateJSON(typing.TypedDict):
    kind: typing.Literal["PermanentDelegate"]
    value: PermanentDelegateJSONValue


@dataclass
class PermanentDelegate:
    discriminator: typing.ClassVar = 12
    value : PermanentDelegateValue
    def to_json(self) -> PermanentDelegateJSON:
        return PermanentDelegateJSON(
            kind="PermanentDelegate",
            value = {
            "delegate":str(self.value["delegate"])
            }
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "PermanentDelegate":{ "delegate":self.value["delegate"] }
            }



class NonTransferableAccountJSONValue(typing.TypedDict):


class NonTransferableAccountValue(typing.TypedDict):




class NonTransferableAccountJSON(typing.TypedDict):
    kind: typing.Literal["NonTransferableAccount"]
    value: NonTransferableAccountJSONValue


@dataclass
class NonTransferableAccount:
    discriminator: typing.ClassVar = 13
    value : NonTransferableAccountValue
    def to_json(self) -> NonTransferableAccountJSON:
        return NonTransferableAccountJSON(
            kind="NonTransferableAccount",
            value = {
            
            }
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "NonTransferableAccount":{  }
            }



class TransferHookJSONValue(typing.TypedDict):
    authority: str
    programId: str


class TransferHookValue(typing.TypedDict):
    authority: SolPubkey
    programId: SolPubkey




class TransferHookJSON(typing.TypedDict):
    kind: typing.Literal["TransferHook"]
    value: TransferHookJSONValue


@dataclass
class TransferHook:
    discriminator: typing.ClassVar = 14
    value : TransferHookValue
    def to_json(self) -> TransferHookJSON:
        return TransferHookJSON(
            kind="TransferHook",
            value = {
            "authority":str(self.value["authority"]),"programId":str(self.value["programId"])
            }
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "TransferHook":{ "authority":self.value["authority"],"programId":self.value["programId"] }
            }



class TransferHookAccountJSONValue(typing.TypedDict):
    transferring: bool


class TransferHookAccountValue(typing.TypedDict):
    transferring: bool




class TransferHookAccountJSON(typing.TypedDict):
    kind: typing.Literal["TransferHookAccount"]
    value: TransferHookAccountJSONValue


@dataclass
class TransferHookAccount:
    discriminator: typing.ClassVar = 15
    value : TransferHookAccountValue
    def to_json(self) -> TransferHookAccountJSON:
        return TransferHookAccountJSON(
            kind="TransferHookAccount",
            value = {
            "transferring":self.value["transferring"]
            }
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "TransferHookAccount":{ "transferring":self.value["transferring"] }
            }



class ConfidentialTransferFeeJSONValue(typing.TypedDict):
    authority: str
    elgamalPubkey: str
    harvestToMintEnabled: bool
    withheldAmount: encryptedBalance.EncryptedBalanceJSON


class ConfidentialTransferFeeValue(typing.TypedDict):
    authority: borsh.String
    elgamalPubkey: SolPubkey
    harvestToMintEnabled: bool
    withheldAmount: encryptedBalance.pyType




class ConfidentialTransferFeeJSON(typing.TypedDict):
    kind: typing.Literal["ConfidentialTransferFee"]
    value: ConfidentialTransferFeeJSONValue


@dataclass
class ConfidentialTransferFee:
    discriminator: typing.ClassVar = 16
    value : ConfidentialTransferFeeValue
    def to_json(self) -> ConfidentialTransferFeeJSON:
        return ConfidentialTransferFeeJSON(
            kind="ConfidentialTransferFee",
            value = {
            "authority":self.value["authority"],"elgamalPubkey":str(self.value["elgamalPubkey"]),"harvestToMintEnabled":self.value["harvestToMintEnabled"],"withheldAmount":self.value["withheldAmount"].to_json()
            }
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "ConfidentialTransferFee":{ "authority":self.value["authority"],"elgamalPubkey":self.value["elgamalPubkey"],"harvestToMintEnabled":self.value["harvestToMintEnabled"],"withheldAmount":self.value["withheldAmount"] }
            }



class ConfidentialTransferFeeAmountJSONValue(typing.TypedDict):
    withheldAmount: encryptedBalance.EncryptedBalanceJSON


class ConfidentialTransferFeeAmountValue(typing.TypedDict):
    withheldAmount: encryptedBalance.pyType




class ConfidentialTransferFeeAmountJSON(typing.TypedDict):
    kind: typing.Literal["ConfidentialTransferFeeAmount"]
    value: ConfidentialTransferFeeAmountJSONValue


@dataclass
class ConfidentialTransferFeeAmount:
    discriminator: typing.ClassVar = 17
    value : ConfidentialTransferFeeAmountValue
    def to_json(self) -> ConfidentialTransferFeeAmountJSON:
        return ConfidentialTransferFeeAmountJSON(
            kind="ConfidentialTransferFeeAmount",
            value = {
            "withheldAmount":self.value["withheldAmount"].to_json()
            }
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "ConfidentialTransferFeeAmount":{ "withheldAmount":self.value["withheldAmount"] }
            }



class MetadataPointerJSONValue(typing.TypedDict):
    authority: str
    metadataAddress: str


class MetadataPointerValue(typing.TypedDict):
    authority: borsh.String
    metadataAddress: borsh.String




class MetadataPointerJSON(typing.TypedDict):
    kind: typing.Literal["MetadataPointer"]
    value: MetadataPointerJSONValue


@dataclass
class MetadataPointer:
    discriminator: typing.ClassVar = 18
    value : MetadataPointerValue
    def to_json(self) -> MetadataPointerJSON:
        return MetadataPointerJSON(
            kind="MetadataPointer",
            value = {
            "authority":self.value["authority"],"metadataAddress":self.value["metadataAddress"]
            }
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "MetadataPointer":{ "authority":self.value["authority"],"metadataAddress":self.value["metadataAddress"] }
            }



class TokenMetadataJSONValue(typing.TypedDict):
    updateAuthority: str
    mint: str
    name: str
    symbol: str
    uri: str
    additionalMetadata: int


class TokenMetadataValue(typing.TypedDict):
    updateAuthority: borsh.String
    mint: SolPubkey
    name: borsh.String
    symbol: borsh.String
    uri: borsh.String
    additionalMetadata: int




class TokenMetadataJSON(typing.TypedDict):
    kind: typing.Literal["TokenMetadata"]
    value: TokenMetadataJSONValue


@dataclass
class TokenMetadata:
    discriminator: typing.ClassVar = 19
    value : TokenMetadataValue
    def to_json(self) -> TokenMetadataJSON:
        return TokenMetadataJSON(
            kind="TokenMetadata",
            value = {
            "updateAuthority":self.value["updateAuthority"],"mint":str(self.value["mint"]),"name":self.value["name"],"symbol":self.value["symbol"],"uri":self.value["uri"],"additionalMetadata":self.value["additionalMetadata"]
            }
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "TokenMetadata":{ "updateAuthority":self.value["updateAuthority"],"mint":self.value["mint"],"name":self.value["name"],"symbol":self.value["symbol"],"uri":self.value["uri"],"additionalMetadata":self.value["additionalMetadata"] }
            }



class GroupPointerJSONValue(typing.TypedDict):
    authority: str
    groupAddress: str


class GroupPointerValue(typing.TypedDict):
    authority: borsh.String
    groupAddress: borsh.String




class GroupPointerJSON(typing.TypedDict):
    kind: typing.Literal["GroupPointer"]
    value: GroupPointerJSONValue


@dataclass
class GroupPointer:
    discriminator: typing.ClassVar = 20
    value : GroupPointerValue
    def to_json(self) -> GroupPointerJSON:
        return GroupPointerJSON(
            kind="GroupPointer",
            value = {
            "authority":self.value["authority"],"groupAddress":self.value["groupAddress"]
            }
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "GroupPointer":{ "authority":self.value["authority"],"groupAddress":self.value["groupAddress"] }
            }



class TokenGroupJSONValue(typing.TypedDict):
    updateAuthority: str
    mint: str
    size: int
    maxSize: int


class TokenGroupValue(typing.TypedDict):
    updateAuthority: borsh.String
    mint: SolPubkey
    size: int
    maxSize: int




class TokenGroupJSON(typing.TypedDict):
    kind: typing.Literal["TokenGroup"]
    value: TokenGroupJSONValue


@dataclass
class TokenGroup:
    discriminator: typing.ClassVar = 21
    value : TokenGroupValue
    def to_json(self) -> TokenGroupJSON:
        return TokenGroupJSON(
            kind="TokenGroup",
            value = {
            "updateAuthority":self.value["updateAuthority"],"mint":str(self.value["mint"]),"size":self.value["size"],"maxSize":self.value["maxSize"]
            }
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "TokenGroup":{ "updateAuthority":self.value["updateAuthority"],"mint":self.value["mint"],"size":self.value["size"],"maxSize":self.value["maxSize"] }
            }



class GroupMemberPointerJSONValue(typing.TypedDict):
    authority: str
    memberAddress: str


class GroupMemberPointerValue(typing.TypedDict):
    authority: borsh.String
    memberAddress: borsh.String




class GroupMemberPointerJSON(typing.TypedDict):
    kind: typing.Literal["GroupMemberPointer"]
    value: GroupMemberPointerJSONValue


@dataclass
class GroupMemberPointer:
    discriminator: typing.ClassVar = 22
    value : GroupMemberPointerValue
    def to_json(self) -> GroupMemberPointerJSON:
        return GroupMemberPointerJSON(
            kind="GroupMemberPointer",
            value = {
            "authority":self.value["authority"],"memberAddress":self.value["memberAddress"]
            }
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "GroupMemberPointer":{ "authority":self.value["authority"],"memberAddress":self.value["memberAddress"] }
            }



class TokenGroupMemberJSONValue(typing.TypedDict):
    mint: str
    group: str
    memberNumber: int


class TokenGroupMemberValue(typing.TypedDict):
    mint: SolPubkey
    group: SolPubkey
    memberNumber: int




class TokenGroupMemberJSON(typing.TypedDict):
    kind: typing.Literal["TokenGroupMember"]
    value: TokenGroupMemberJSONValue


@dataclass
class TokenGroupMember:
    discriminator: typing.ClassVar = 23
    value : TokenGroupMemberValue
    def to_json(self) -> TokenGroupMemberJSON:
        return TokenGroupMemberJSON(
            kind="TokenGroupMember",
            value = {
            "mint":str(self.value["mint"]),"group":str(self.value["group"]),"memberNumber":self.value["memberNumber"]
            }
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "TokenGroupMember":{ "mint":self.value["mint"],"group":self.value["group"],"memberNumber":self.value["memberNumber"] }
            }




class ConfidentialMintBurnJSON(typing.TypedDict):
    kind: typing.Literal["ConfidentialMintBurn"]


@dataclass
class ConfidentialMintBurn:
    discriminator: typing.ClassVar = 24
    def to_json(self) -> ConfidentialMintBurnJSON:
        return ConfidentialMintBurnJSON(
            kind="ConfidentialMintBurn",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "ConfidentialMintBurn": {},
        }



class ScaledUiAmountConfigJSONValue(typing.TypedDict):
    authority: str
    multiplier: int
    newMultiplierEffectiveTimestamp: int
    newMultiplier: int


class ScaledUiAmountConfigValue(typing.TypedDict):
    authority: SolPubkey
    multiplier: int
    newMultiplierEffectiveTimestamp: int
    newMultiplier: int




class ScaledUiAmountConfigJSON(typing.TypedDict):
    kind: typing.Literal["ScaledUiAmountConfig"]
    value: ScaledUiAmountConfigJSONValue


@dataclass
class ScaledUiAmountConfig:
    discriminator: typing.ClassVar = 25
    value : ScaledUiAmountConfigValue
    def to_json(self) -> ScaledUiAmountConfigJSON:
        return ScaledUiAmountConfigJSON(
            kind="ScaledUiAmountConfig",
            value = {
            "authority":str(self.value["authority"]),"multiplier":self.value["multiplier"],"newMultiplierEffectiveTimestamp":self.value["newMultiplierEffectiveTimestamp"],"newMultiplier":self.value["newMultiplier"]
            }
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "ScaledUiAmountConfig":{ "authority":self.value["authority"],"multiplier":self.value["multiplier"],"newMultiplierEffectiveTimestamp":self.value["newMultiplierEffectiveTimestamp"],"newMultiplier":self.value["newMultiplier"] }
            }



class PausableConfigJSONValue(typing.TypedDict):
    authority: str
    paused: bool


class PausableConfigValue(typing.TypedDict):
    authority: borsh.String
    paused: bool




class PausableConfigJSON(typing.TypedDict):
    kind: typing.Literal["PausableConfig"]
    value: PausableConfigJSONValue


@dataclass
class PausableConfig:
    discriminator: typing.ClassVar = 26
    value : PausableConfigValue
    def to_json(self) -> PausableConfigJSON:
        return PausableConfigJSON(
            kind="PausableConfig",
            value = {
            "authority":self.value["authority"],"paused":self.value["paused"]
            }
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "PausableConfig":{ "authority":self.value["authority"],"paused":self.value["paused"] }
            }




class PausableAccountJSON(typing.TypedDict):
    kind: typing.Literal["PausableAccount"]


@dataclass
class PausableAccount:
    discriminator: typing.ClassVar = 27
    def to_json(self) -> PausableAccountJSON:
        return PausableAccountJSON(
            kind="PausableAccount",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "PausableAccount": {},
        }





ExtensionKind = typing.Union[
    Uninitialized,
    TransferFeeConfig,
    TransferFeeAmount,
    MintCloseAuthority,
    ConfidentialTransferMint,
    ConfidentialTransferAccount,
    DefaultAccountState,
    ImmutableOwner,
    MemoTransfer,
    NonTransferable,
    InterestBearingConfig,
    CpiGuard,
    PermanentDelegate,
    NonTransferableAccount,
    TransferHook,
    TransferHookAccount,
    ConfidentialTransferFee,
    ConfidentialTransferFeeAmount,
    MetadataPointer,
    TokenMetadata,
    GroupPointer,
    TokenGroup,
    GroupMemberPointer,
    TokenGroupMember,
    ConfidentialMintBurn,
    ScaledUiAmountConfig,
    PausableConfig,
    PausableAccount,
]
ExtensionJSON = typing.Union[
    UninitializedJSON,
    TransferFeeConfigJSON,
    TransferFeeAmountJSON,
    MintCloseAuthorityJSON,
    ConfidentialTransferMintJSON,
    ConfidentialTransferAccountJSON,
    DefaultAccountStateJSON,
    ImmutableOwnerJSON,
    MemoTransferJSON,
    NonTransferableJSON,
    InterestBearingConfigJSON,
    CpiGuardJSON,
    PermanentDelegateJSON,
    NonTransferableAccountJSON,
    TransferHookJSON,
    TransferHookAccountJSON,
    ConfidentialTransferFeeJSON,
    ConfidentialTransferFeeAmountJSON,
    MetadataPointerJSON,
    TokenMetadataJSON,
    GroupPointerJSON,
    TokenGroupJSON,
    GroupMemberPointerJSON,
    TokenGroupMemberJSON,
    ConfidentialMintBurnJSON,
    ScaledUiAmountConfigJSON,
    PausableConfigJSON,
    PausableAccountJSON,
]

def from_decoded(obj: dict) -> ExtensionKind:
    if not isinstance(obj, dict):
        raise ValueError("Invalid enum object")
    if "Uninitialized" in obj:
      return Uninitialized()
    if "TransferFeeConfig" in obj:
      val = obj["TransferFeeConfig"]
      return TransferFeeConfig(
            TransferFeeConfigValue(
                transferFeeConfigAuthority= val["transferFeeConfigAuthority"],withdrawWithheldAuthority= val["withdrawWithheldAuthority"],withheldAmount= val["withheldAmount"],olderTransferFee= transferFee.TransferFee.from_decoded(val["olderTransferFee"]),newerTransferFee= transferFee.TransferFee.from_decoded(val["newerTransferFee"])
            )
        )

    if "TransferFeeAmount" in obj:
      val = obj["TransferFeeAmount"]
      return TransferFeeAmount(
            TransferFeeAmountValue(
                withheldAmount= val["withheldAmount"]
            )
        )

    if "MintCloseAuthority" in obj:
      val = obj["MintCloseAuthority"]
      return MintCloseAuthority(
            MintCloseAuthorityValue(
                closeAuthority= val["closeAuthority"]
            )
        )

    if "ConfidentialTransferMint" in obj:
      val = obj["ConfidentialTransferMint"]
      return ConfidentialTransferMint(
            ConfidentialTransferMintValue(
                authority= val["authority"],autoApproveNewAccounts= val["autoApproveNewAccounts"],auditorElgamalPubkey= val["auditorElgamalPubkey"]
            )
        )

    if "ConfidentialTransferAccount" in obj:
      val = obj["ConfidentialTransferAccount"]
      return ConfidentialTransferAccount(
            ConfidentialTransferAccountValue(
                approved= val["approved"],elgamalPubkey= val["elgamalPubkey"],pendingBalanceLow= encryptedBalance.EncryptedBalance.from_decoded(val["pendingBalanceLow"]),pendingBalanceHigh= encryptedBalance.EncryptedBalance.from_decoded(val["pendingBalanceHigh"]),availableBalance= encryptedBalance.EncryptedBalance.from_decoded(val["availableBalance"]),decryptableAvailableBalance= decryptableBalance.DecryptableBalance.from_decoded(val["decryptableAvailableBalance"]),allowConfidentialCredits= val["allowConfidentialCredits"],allowNonConfidentialCredits= val["allowNonConfidentialCredits"],pendingBalanceCreditCounter= val["pendingBalanceCreditCounter"],maximumPendingBalanceCreditCounter= val["maximumPendingBalanceCreditCounter"],expectedPendingBalanceCreditCounter= val["expectedPendingBalanceCreditCounter"],actualPendingBalanceCreditCounter= val["actualPendingBalanceCreditCounter"]
            )
        )

    if "DefaultAccountState" in obj:
      val = obj["DefaultAccountState"]
      return DefaultAccountState(
            DefaultAccountStateValue(
                state= accountState.from_decoded(val["state"])
            )
        )

    if "ImmutableOwner" in obj:
      val = obj["ImmutableOwner"]
      return ImmutableOwner(
            ImmutableOwnerValue(
                
            )
        )

    if "MemoTransfer" in obj:
      val = obj["MemoTransfer"]
      return MemoTransfer(
            MemoTransferValue(
                requireIncomingTransferMemos= val["requireIncomingTransferMemos"]
            )
        )

    if "NonTransferable" in obj:
      val = obj["NonTransferable"]
      return NonTransferable(
            NonTransferableValue(
                
            )
        )

    if "InterestBearingConfig" in obj:
      val = obj["InterestBearingConfig"]
      return InterestBearingConfig(
            InterestBearingConfigValue(
                rateAuthority= val["rateAuthority"],initializationTimestamp= val["initializationTimestamp"],preUpdateAverageRate= val["preUpdateAverageRate"],lastUpdateTimestamp= val["lastUpdateTimestamp"],currentRate= val["currentRate"]
            )
        )

    if "CpiGuard" in obj:
      val = obj["CpiGuard"]
      return CpiGuard(
            CpiGuardValue(
                lockCpi= val["lockCpi"]
            )
        )

    if "PermanentDelegate" in obj:
      val = obj["PermanentDelegate"]
      return PermanentDelegate(
            PermanentDelegateValue(
                delegate= val["delegate"]
            )
        )

    if "NonTransferableAccount" in obj:
      val = obj["NonTransferableAccount"]
      return NonTransferableAccount(
            NonTransferableAccountValue(
                
            )
        )

    if "TransferHook" in obj:
      val = obj["TransferHook"]
      return TransferHook(
            TransferHookValue(
                authority= val["authority"],programId= val["programId"]
            )
        )

    if "TransferHookAccount" in obj:
      val = obj["TransferHookAccount"]
      return TransferHookAccount(
            TransferHookAccountValue(
                transferring= val["transferring"]
            )
        )

    if "ConfidentialTransferFee" in obj:
      val = obj["ConfidentialTransferFee"]
      return ConfidentialTransferFee(
            ConfidentialTransferFeeValue(
                authority= val["authority"],elgamalPubkey= val["elgamalPubkey"],harvestToMintEnabled= val["harvestToMintEnabled"],withheldAmount= encryptedBalance.EncryptedBalance.from_decoded(val["withheldAmount"])
            )
        )

    if "ConfidentialTransferFeeAmount" in obj:
      val = obj["ConfidentialTransferFeeAmount"]
      return ConfidentialTransferFeeAmount(
            ConfidentialTransferFeeAmountValue(
                withheldAmount= encryptedBalance.EncryptedBalance.from_decoded(val["withheldAmount"])
            )
        )

    if "MetadataPointer" in obj:
      val = obj["MetadataPointer"]
      return MetadataPointer(
            MetadataPointerValue(
                authority= val["authority"],metadataAddress= val["metadataAddress"]
            )
        )

    if "TokenMetadata" in obj:
      val = obj["TokenMetadata"]
      return TokenMetadata(
            TokenMetadataValue(
                updateAuthority= val["updateAuthority"],mint= val["mint"],name= val["name"],symbol= val["symbol"],uri= val["uri"],additionalMetadata= val["additionalMetadata"]
            )
        )

    if "GroupPointer" in obj:
      val = obj["GroupPointer"]
      return GroupPointer(
            GroupPointerValue(
                authority= val["authority"],groupAddress= val["groupAddress"]
            )
        )

    if "TokenGroup" in obj:
      val = obj["TokenGroup"]
      return TokenGroup(
            TokenGroupValue(
                updateAuthority= val["updateAuthority"],mint= val["mint"],size= val["size"],maxSize= val["maxSize"]
            )
        )

    if "GroupMemberPointer" in obj:
      val = obj["GroupMemberPointer"]
      return GroupMemberPointer(
            GroupMemberPointerValue(
                authority= val["authority"],memberAddress= val["memberAddress"]
            )
        )

    if "TokenGroupMember" in obj:
      val = obj["TokenGroupMember"]
      return TokenGroupMember(
            TokenGroupMemberValue(
                mint= val["mint"],group= val["group"],memberNumber= val["memberNumber"]
            )
        )

    if "ConfidentialMintBurn" in obj:
      return ConfidentialMintBurn()
    if "ScaledUiAmountConfig" in obj:
      val = obj["ScaledUiAmountConfig"]
      return ScaledUiAmountConfig(
            ScaledUiAmountConfigValue(
                authority= val["authority"],multiplier= val["multiplier"],newMultiplierEffectiveTimestamp= val["newMultiplierEffectiveTimestamp"],newMultiplier= val["newMultiplier"]
            )
        )

    if "PausableConfig" in obj:
      val = obj["PausableConfig"]
      return PausableConfig(
            PausableConfigValue(
                authority= val["authority"],paused= val["paused"]
            )
        )

    if "PausableAccount" in obj:
      return PausableAccount()
    raise ValueError("Invalid enum object")

def from_json(obj: ExtensionJSON) -> ExtensionKind:
    if obj["kind"] == "Uninitialized":
        return Uninitialized()

    if obj["kind"] == "TransferFeeConfig":
        transferFeeConfigJSONValue = typing.cast(TransferFeeConfigJSONValue, obj["value"])
        return TransferFeeConfig(
            TransferFeeConfigValue(
                transferFeeConfigAuthority=SolPubkey.from_string(transferFeeConfigJSONValue["transferFeeConfigAuthority"]),withdrawWithheldAuthority=SolPubkey.from_string(transferFeeConfigJSONValue["withdrawWithheldAuthority"]),withheldAmount=transferFeeConfigJSONValue["withheldAmount"],olderTransferFee=transferFee.TransferFee.from_json(transferFeeConfigJSONValue["olderTransferFee"]),newerTransferFee=transferFee.TransferFee.from_json(transferFeeConfigJSONValue["newerTransferFee"])
            )
        )


    if obj["kind"] == "TransferFeeAmount":
        transferFeeAmountJSONValue = typing.cast(TransferFeeAmountJSONValue, obj["value"])
        return TransferFeeAmount(
            TransferFeeAmountValue(
                withheldAmount=transferFeeAmountJSONValue["withheldAmount"]
            )
        )


    if obj["kind"] == "MintCloseAuthority":
        mintCloseAuthorityJSONValue = typing.cast(MintCloseAuthorityJSONValue, obj["value"])
        return MintCloseAuthority(
            MintCloseAuthorityValue(
                closeAuthority=SolPubkey.from_string(mintCloseAuthorityJSONValue["closeAuthority"])
            )
        )


    if obj["kind"] == "ConfidentialTransferMint":
        confidentialTransferMintJSONValue = typing.cast(ConfidentialTransferMintJSONValue, obj["value"])
        return ConfidentialTransferMint(
            ConfidentialTransferMintValue(
                authority=confidentialTransferMintJSONValue["authority"],autoApproveNewAccounts=confidentialTransferMintJSONValue["autoApproveNewAccounts"],auditorElgamalPubkey=confidentialTransferMintJSONValue["auditorElgamalPubkey"]
            )
        )


    if obj["kind"] == "ConfidentialTransferAccount":
        confidentialTransferAccountJSONValue = typing.cast(ConfidentialTransferAccountJSONValue, obj["value"])
        return ConfidentialTransferAccount(
            ConfidentialTransferAccountValue(
                approved=confidentialTransferAccountJSONValue["approved"],elgamalPubkey=SolPubkey.from_string(confidentialTransferAccountJSONValue["elgamalPubkey"]),pendingBalanceLow=encryptedBalance.EncryptedBalance.from_json(confidentialTransferAccountJSONValue["pendingBalanceLow"]),pendingBalanceHigh=encryptedBalance.EncryptedBalance.from_json(confidentialTransferAccountJSONValue["pendingBalanceHigh"]),availableBalance=encryptedBalance.EncryptedBalance.from_json(confidentialTransferAccountJSONValue["availableBalance"]),decryptableAvailableBalance=decryptableBalance.DecryptableBalance.from_json(confidentialTransferAccountJSONValue["decryptableAvailableBalance"]),allowConfidentialCredits=confidentialTransferAccountJSONValue["allowConfidentialCredits"],allowNonConfidentialCredits=confidentialTransferAccountJSONValue["allowNonConfidentialCredits"],pendingBalanceCreditCounter=confidentialTransferAccountJSONValue["pendingBalanceCreditCounter"],maximumPendingBalanceCreditCounter=confidentialTransferAccountJSONValue["maximumPendingBalanceCreditCounter"],expectedPendingBalanceCreditCounter=confidentialTransferAccountJSONValue["expectedPendingBalanceCreditCounter"],actualPendingBalanceCreditCounter=confidentialTransferAccountJSONValue["actualPendingBalanceCreditCounter"]
            )
        )


    if obj["kind"] == "DefaultAccountState":
        defaultAccountStateJSONValue = typing.cast(DefaultAccountStateJSONValue, obj["value"])
        return DefaultAccountState(
            DefaultAccountStateValue(
                state=accountState.from_json(defaultAccountStateJSONValue["state"])
            )
        )


    if obj["kind"] == "ImmutableOwner":
        immutableOwnerJSONValue = typing.cast(ImmutableOwnerJSONValue, obj["value"])
        return ImmutableOwner(
            ImmutableOwnerValue(
                
            )
        )


    if obj["kind"] == "MemoTransfer":
        memoTransferJSONValue = typing.cast(MemoTransferJSONValue, obj["value"])
        return MemoTransfer(
            MemoTransferValue(
                requireIncomingTransferMemos=memoTransferJSONValue["requireIncomingTransferMemos"]
            )
        )


    if obj["kind"] == "NonTransferable":
        nonTransferableJSONValue = typing.cast(NonTransferableJSONValue, obj["value"])
        return NonTransferable(
            NonTransferableValue(
                
            )
        )


    if obj["kind"] == "InterestBearingConfig":
        interestBearingConfigJSONValue = typing.cast(InterestBearingConfigJSONValue, obj["value"])
        return InterestBearingConfig(
            InterestBearingConfigValue(
                rateAuthority=SolPubkey.from_string(interestBearingConfigJSONValue["rateAuthority"]),initializationTimestamp=interestBearingConfigJSONValue["initializationTimestamp"],preUpdateAverageRate=interestBearingConfigJSONValue["preUpdateAverageRate"],lastUpdateTimestamp=interestBearingConfigJSONValue["lastUpdateTimestamp"],currentRate=interestBearingConfigJSONValue["currentRate"]
            )
        )


    if obj["kind"] == "CpiGuard":
        cpiGuardJSONValue = typing.cast(CpiGuardJSONValue, obj["value"])
        return CpiGuard(
            CpiGuardValue(
                lockCpi=cpiGuardJSONValue["lockCpi"]
            )
        )


    if obj["kind"] == "PermanentDelegate":
        permanentDelegateJSONValue = typing.cast(PermanentDelegateJSONValue, obj["value"])
        return PermanentDelegate(
            PermanentDelegateValue(
                delegate=SolPubkey.from_string(permanentDelegateJSONValue["delegate"])
            )
        )


    if obj["kind"] == "NonTransferableAccount":
        nonTransferableAccountJSONValue = typing.cast(NonTransferableAccountJSONValue, obj["value"])
        return NonTransferableAccount(
            NonTransferableAccountValue(
                
            )
        )


    if obj["kind"] == "TransferHook":
        transferHookJSONValue = typing.cast(TransferHookJSONValue, obj["value"])
        return TransferHook(
            TransferHookValue(
                authority=SolPubkey.from_string(transferHookJSONValue["authority"]),programId=SolPubkey.from_string(transferHookJSONValue["programId"])
            )
        )


    if obj["kind"] == "TransferHookAccount":
        transferHookAccountJSONValue = typing.cast(TransferHookAccountJSONValue, obj["value"])
        return TransferHookAccount(
            TransferHookAccountValue(
                transferring=transferHookAccountJSONValue["transferring"]
            )
        )


    if obj["kind"] == "ConfidentialTransferFee":
        confidentialTransferFeeJSONValue = typing.cast(ConfidentialTransferFeeJSONValue, obj["value"])
        return ConfidentialTransferFee(
            ConfidentialTransferFeeValue(
                authority=confidentialTransferFeeJSONValue["authority"],elgamalPubkey=SolPubkey.from_string(confidentialTransferFeeJSONValue["elgamalPubkey"]),harvestToMintEnabled=confidentialTransferFeeJSONValue["harvestToMintEnabled"],withheldAmount=encryptedBalance.EncryptedBalance.from_json(confidentialTransferFeeJSONValue["withheldAmount"])
            )
        )


    if obj["kind"] == "ConfidentialTransferFeeAmount":
        confidentialTransferFeeAmountJSONValue = typing.cast(ConfidentialTransferFeeAmountJSONValue, obj["value"])
        return ConfidentialTransferFeeAmount(
            ConfidentialTransferFeeAmountValue(
                withheldAmount=encryptedBalance.EncryptedBalance.from_json(confidentialTransferFeeAmountJSONValue["withheldAmount"])
            )
        )


    if obj["kind"] == "MetadataPointer":
        metadataPointerJSONValue = typing.cast(MetadataPointerJSONValue, obj["value"])
        return MetadataPointer(
            MetadataPointerValue(
                authority=metadataPointerJSONValue["authority"],metadataAddress=metadataPointerJSONValue["metadataAddress"]
            )
        )


    if obj["kind"] == "TokenMetadata":
        tokenMetadataJSONValue = typing.cast(TokenMetadataJSONValue, obj["value"])
        return TokenMetadata(
            TokenMetadataValue(
                updateAuthority=tokenMetadataJSONValue["updateAuthority"],mint=SolPubkey.from_string(tokenMetadataJSONValue["mint"]),name=tokenMetadataJSONValue["name"],symbol=tokenMetadataJSONValue["symbol"],uri=tokenMetadataJSONValue["uri"],additionalMetadata=tokenMetadataJSONValue["additionalMetadata"]
            )
        )


    if obj["kind"] == "GroupPointer":
        groupPointerJSONValue = typing.cast(GroupPointerJSONValue, obj["value"])
        return GroupPointer(
            GroupPointerValue(
                authority=groupPointerJSONValue["authority"],groupAddress=groupPointerJSONValue["groupAddress"]
            )
        )


    if obj["kind"] == "TokenGroup":
        tokenGroupJSONValue = typing.cast(TokenGroupJSONValue, obj["value"])
        return TokenGroup(
            TokenGroupValue(
                updateAuthority=tokenGroupJSONValue["updateAuthority"],mint=SolPubkey.from_string(tokenGroupJSONValue["mint"]),size=tokenGroupJSONValue["size"],maxSize=tokenGroupJSONValue["maxSize"]
            )
        )


    if obj["kind"] == "GroupMemberPointer":
        groupMemberPointerJSONValue = typing.cast(GroupMemberPointerJSONValue, obj["value"])
        return GroupMemberPointer(
            GroupMemberPointerValue(
                authority=groupMemberPointerJSONValue["authority"],memberAddress=groupMemberPointerJSONValue["memberAddress"]
            )
        )


    if obj["kind"] == "TokenGroupMember":
        tokenGroupMemberJSONValue = typing.cast(TokenGroupMemberJSONValue, obj["value"])
        return TokenGroupMember(
            TokenGroupMemberValue(
                mint=SolPubkey.from_string(tokenGroupMemberJSONValue["mint"]),group=SolPubkey.from_string(tokenGroupMemberJSONValue["group"]),memberNumber=tokenGroupMemberJSONValue["memberNumber"]
            )
        )


    if obj["kind"] == "ConfidentialMintBurn":
        return ConfidentialMintBurn()

    if obj["kind"] == "ScaledUiAmountConfig":
        scaledUiAmountConfigJSONValue = typing.cast(ScaledUiAmountConfigJSONValue, obj["value"])
        return ScaledUiAmountConfig(
            ScaledUiAmountConfigValue(
                authority=SolPubkey.from_string(scaledUiAmountConfigJSONValue["authority"]),multiplier=scaledUiAmountConfigJSONValue["multiplier"],newMultiplierEffectiveTimestamp=scaledUiAmountConfigJSONValue["newMultiplierEffectiveTimestamp"],newMultiplier=scaledUiAmountConfigJSONValue["newMultiplier"]
            )
        )


    if obj["kind"] == "PausableConfig":
        pausableConfigJSONValue = typing.cast(PausableConfigJSONValue, obj["value"])
        return PausableConfig(
            PausableConfigValue(
                authority=pausableConfigJSONValue["authority"],paused=pausableConfigJSONValue["paused"]
            )
        )


    if obj["kind"] == "PausableAccount":
        return PausableAccount()

    kind = obj["kind"]
    raise ValueError(f"Unrecognized enum kind: {kind}")


"Uninitialized" / borsh.CStruct(),
"TransferFeeConfig" / borsh.CStruct("transferFeeConfigAuthority" /BorshPubkey,"withdrawWithheldAuthority" /BorshPubkey,"withheldAmount" /borsh.U64,"olderTransferFee" /transferFee.TransferFee.layout,"newerTransferFee" /transferFee.TransferFee.layout),
"TransferFeeAmount" / borsh.CStruct("withheldAmount" /borsh.U64),
"MintCloseAuthority" / borsh.CStruct("closeAuthority" /BorshPubkey),
"ConfidentialTransferMint" / borsh.CStruct("authority" /ZeroableOption(BorshPubkey),"autoApproveNewAccounts" /borsh.Bool,"auditorElgamalPubkey" /ZeroableOption(BorshPubkey)),
"ConfidentialTransferAccount" / borsh.CStruct("approved" /borsh.Bool,"elgamalPubkey" /BorshPubkey,"pendingBalanceLow" /encryptedBalance.EncryptedBalance,"pendingBalanceHigh" /encryptedBalance.EncryptedBalance,"availableBalance" /encryptedBalance.EncryptedBalance,"decryptableAvailableBalance" /decryptableBalance.DecryptableBalance,"allowConfidentialCredits" /borsh.Bool,"allowNonConfidentialCredits" /borsh.Bool,"pendingBalanceCreditCounter" /borsh.U64,"maximumPendingBalanceCreditCounter" /borsh.U64,"expectedPendingBalanceCreditCounter" /borsh.U64,"actualPendingBalanceCreditCounter" /borsh.U64),
"DefaultAccountState" / borsh.CStruct("state" /accountState.layout),
"ImmutableOwner" / borsh.CStruct(),
"MemoTransfer" / borsh.CStruct("requireIncomingTransferMemos" /borsh.Bool),
"NonTransferable" / borsh.CStruct(),
"InterestBearingConfig" / borsh.CStruct("rateAuthority" /BorshPubkey,"initializationTimestamp" /borsh.U64,"preUpdateAverageRate" /borsh.I16,"lastUpdateTimestamp" /borsh.U64,"currentRate" /borsh.I16),
"CpiGuard" / borsh.CStruct("lockCpi" /borsh.Bool),
"PermanentDelegate" / borsh.CStruct("delegate" /BorshPubkey),
"NonTransferableAccount" / borsh.CStruct(),
"TransferHook" / borsh.CStruct("authority" /BorshPubkey,"programId" /BorshPubkey),
"TransferHookAccount" / borsh.CStruct("transferring" /borsh.Bool),
"ConfidentialTransferFee" / borsh.CStruct("authority" /ZeroableOption(BorshPubkey),"elgamalPubkey" /BorshPubkey,"harvestToMintEnabled" /borsh.Bool,"withheldAmount" /encryptedBalance.EncryptedBalance),
"ConfidentialTransferFeeAmount" / borsh.CStruct("withheldAmount" /encryptedBalance.EncryptedBalance),
"MetadataPointer" / borsh.CStruct("authority" /ZeroableOption(BorshPubkey),"metadataAddress" /ZeroableOption(BorshPubkey)),
"TokenMetadata" / borsh.CStruct("updateAuthority" /ZeroableOption(BorshPubkey),"mint" /BorshPubkey,"name" /borsh.String,"symbol" /borsh.String,"uri" /borsh.String,"additionalMetadata" /borsh.HashMap(borsh.String,borsh.String)),
"GroupPointer" / borsh.CStruct("authority" /ZeroableOption(BorshPubkey),"groupAddress" /ZeroableOption(BorshPubkey)),
"TokenGroup" / borsh.CStruct("updateAuthority" /ZeroableOption(BorshPubkey),"mint" /BorshPubkey,"size" /borsh.U64,"maxSize" /borsh.U64),
"GroupMemberPointer" / borsh.CStruct("authority" /ZeroableOption(BorshPubkey),"memberAddress" /ZeroableOption(BorshPubkey)),
"TokenGroupMember" / borsh.CStruct("mint" /BorshPubkey,"group" /BorshPubkey,"memberNumber" /borsh.U64),
"ConfidentialMintBurn" / borsh.CStruct(),
"ScaledUiAmountConfig" / borsh.CStruct("authority" /BorshPubkey,"multiplier" /borsh.F64,"newMultiplierEffectiveTimestamp" /borsh.U64,"newMultiplier" /borsh.F64),
"PausableConfig" / borsh.CStruct("authority" /ZeroableOption(BorshPubkey),"paused" /borsh.Bool),
"PausableAccount" / borsh.CStruct(),
)
