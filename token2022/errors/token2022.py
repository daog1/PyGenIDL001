'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import typing
from anchorpy.error import ProgramError

class NotRentExempt(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            0, ""
        )

    code = 0
    name = "NotRentExempt"
    msg = ""
class InsufficientFunds(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            1, ""
        )

    code = 1
    name = "InsufficientFunds"
    msg = ""
class InvalidMint(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            2, ""
        )

    code = 2
    name = "InvalidMint"
    msg = ""
class MintMismatch(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            3, ""
        )

    code = 3
    name = "MintMismatch"
    msg = ""
class OwnerMismatch(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            4, ""
        )

    code = 4
    name = "OwnerMismatch"
    msg = ""
class FixedSupply(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            5, ""
        )

    code = 5
    name = "FixedSupply"
    msg = ""
class AlreadyInUse(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6, ""
        )

    code = 6
    name = "AlreadyInUse"
    msg = ""
class InvalidNumberOfProvidedSigners(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            7, ""
        )

    code = 7
    name = "InvalidNumberOfProvidedSigners"
    msg = ""
class InvalidNumberOfRequiredSigners(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            8, ""
        )

    code = 8
    name = "InvalidNumberOfRequiredSigners"
    msg = ""
class UninitializedState(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            9, ""
        )

    code = 9
    name = "UninitializedState"
    msg = ""
class NativeNotSupported(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            10, ""
        )

    code = 10
    name = "NativeNotSupported"
    msg = ""
class NonNativeHasBalance(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            11, ""
        )

    code = 11
    name = "NonNativeHasBalance"
    msg = ""
class InvalidInstruction(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            12, ""
        )

    code = 12
    name = "InvalidInstruction"
    msg = ""
class InvalidState(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            13, ""
        )

    code = 13
    name = "InvalidState"
    msg = ""
class Overflow(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            14, ""
        )

    code = 14
    name = "Overflow"
    msg = ""
class AuthorityTypeNotSupported(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            15, ""
        )

    code = 15
    name = "AuthorityTypeNotSupported"
    msg = ""
class MintCannotFreeze(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            16, ""
        )

    code = 16
    name = "MintCannotFreeze"
    msg = ""
class AccountFrozen(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            17, ""
        )

    code = 17
    name = "AccountFrozen"
    msg = ""
class MintDecimalsMismatch(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            18, ""
        )

    code = 18
    name = "MintDecimalsMismatch"
    msg = ""
class NonNativeNotSupported(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            19, ""
        )

    code = 19
    name = "NonNativeNotSupported"
    msg = ""

CustomError = typing.Union[
    NotRentExempt,
    InsufficientFunds,
    InvalidMint,
    MintMismatch,
    OwnerMismatch,
    FixedSupply,
    AlreadyInUse,
    InvalidNumberOfProvidedSigners,
    InvalidNumberOfRequiredSigners,
    UninitializedState,
    NativeNotSupported,
    NonNativeHasBalance,
    InvalidInstruction,
    InvalidState,
    Overflow,
    AuthorityTypeNotSupported,
    MintCannotFreeze,
    AccountFrozen,
    MintDecimalsMismatch,
    NonNativeNotSupported,
 ]
CUSTOM_ERROR_MAP: dict[int, CustomError] = {
    0: NotRentExempt(),
    1: InsufficientFunds(),
    2: InvalidMint(),
    3: MintMismatch(),
    4: OwnerMismatch(),
    5: FixedSupply(),
    6: AlreadyInUse(),
    7: InvalidNumberOfProvidedSigners(),
    8: InvalidNumberOfRequiredSigners(),
    9: UninitializedState(),
    10: NativeNotSupported(),
    11: NonNativeHasBalance(),
    12: InvalidInstruction(),
    13: InvalidState(),
    14: Overflow(),
    15: AuthorityTypeNotSupported(),
    16: MintCannotFreeze(),
    17: AccountFrozen(),
    18: MintDecimalsMismatch(),
    19: NonNativeNotSupported(),
}

def from_code(code: int) -> typing.Optional[CustomError]:
    maybe_err = CUSTOM_ERROR_MAP.get(code)
    if maybe_err is None:
        return None
    return maybe_err

