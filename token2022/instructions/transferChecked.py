'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from solders.instruction import AccountMeta, Instruction
from solders.pubkey import Pubkey as SolPubkey
from ..program_id import PROGRAM_ID
class TransferCheckedArgs(typing.TypedDict):
    amount:int
    decimals:int


layout = borsh.CStruct(
    "amount" /borsh.U64,
    "decimals" /borsh.U8,
    )


class TransferCheckedAccounts(typing.TypedDict):
    source:SolPubkey
    mint:SolPubkey
    destination:SolPubkey
    authority:SolPubkey

def TransferChecked(
    args: TransferCheckedArgs,
    accounts: TransferCheckedAccounts,
    program_id: SolPubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["source"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["mint"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["destination"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["authority"], is_signer=True, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\x0c"
    encoded_args = layout.build({
        "amount":args["amount"],
        "decimals":args["decimals"],
       })
    data = identifier + encoded_args
    return Instruction(program_id,data,keys)




