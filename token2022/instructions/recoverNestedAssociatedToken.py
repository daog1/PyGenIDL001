'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import typing
from solders.instruction import AccountMeta, Instruction
from solders.pubkey import Pubkey as SolPubkey
from ..program_id import ASSOCIATED_TOKEN_PROGRAM_ADDRESS

class RecoverNestedAssociatedTokenAccounts(typing.TypedDict):
    nestedAssociatedAccountAddress:SolPubkey
    nestedTokenMintAddress:SolPubkey
    destinationAssociatedAccountAddress:SolPubkey
    ownerAssociatedAccountAddress:SolPubkey
    ownerTokenMintAddress:SolPubkey
    walletAddress:SolPubkey
    tokenProgram:SolPubkey

def RecoverNestedAssociatedToken(
    accounts: RecoverNestedAssociatedTokenAccounts,
    program_id: SolPubkey =  ASSOCIATED_TOKEN_PROGRAM_ADDRESS,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["nestedAssociatedAccountAddress"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["nestedTokenMintAddress"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["destinationAssociatedAccountAddress"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["ownerAssociatedAccountAddress"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["ownerTokenMintAddress"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["walletAddress"], is_signer=True, is_writable=True),
    AccountMeta(pubkey=accounts["tokenProgram"], is_signer=False, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\x02"
    encoded_args = b""
    data = identifier + encoded_args
    return Instruction(program_id,data,keys)


def find_NestedAssociatedAccountAddress() -> typing.Tuple[SolPubkey, int]:
    seeds = [
    ]

    address, bump = SolPubkey.find_program_address(seeds,
         ASSOCIATED_TOKEN_PROGRAM_ADDRESS
            )

    return address, bump



def find_DestinationAssociatedAccountAddress() -> typing.Tuple[SolPubkey, int]:
    seeds = [
    ]

    address, bump = SolPubkey.find_program_address(seeds,
         ASSOCIATED_TOKEN_PROGRAM_ADDRESS
            )

    return address, bump



def find_OwnerAssociatedAccountAddress() -> typing.Tuple[SolPubkey, int]:
    seeds = [
    ]

    address, bump = SolPubkey.find_program_address(seeds,
         ASSOCIATED_TOKEN_PROGRAM_ADDRESS
            )

    return address, bump





