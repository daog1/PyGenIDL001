'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from anchorpy.borsh_extension import BorshPubkey
from solders.instruction import AccountMeta, Instruction
from solders.pubkey import Pubkey as SolPubkey
from ..program_id import TOKEN_2022_PROGRAM_ADDRESS
class InitializeTransferFeeConfigArgs(typing.TypedDict):
    transferFeeDiscriminator:int
    transferFeeConfigAuthority:typing.Optional[SolPubkey]
    withdrawWithheldAuthority:typing.Optional[SolPubkey]
    transferFeeBasisPoints:int
    maximumFee:int


layout = borsh.CStruct(
    "transferFeeDiscriminator" /borsh.U8,
    "transferFeeConfigAuthority" /borsh.Option(BorshPubkey),
    "withdrawWithheldAuthority" /borsh.Option(BorshPubkey),
    "transferFeeBasisPoints" /borsh.U16,
    "maximumFee" /borsh.U64,
    )


class InitializeTransferFeeConfigAccounts(typing.TypedDict):
    mint:SolPubkey

def InitializeTransferFeeConfig(
    args: InitializeTransferFeeConfigArgs,
    accounts: InitializeTransferFeeConfigAccounts,
    program_id: SolPubkey =  TOKEN_2022_PROGRAM_ADDRESS,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["mint"], is_signer=False, is_writable=True),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\x1a"
    encoded_args = layout.build({
        "transferFeeDiscriminator":args["transferFeeDiscriminator"],
        "transferFeeConfigAuthority":args["transferFeeConfigAuthority"],
        "withdrawWithheldAuthority":args["withdrawWithheldAuthority"],
        "transferFeeBasisPoints":args["transferFeeBasisPoints"],
        "maximumFee":args["maximumFee"],
       })
    data = identifier + encoded_args
    return Instruction(program_id,data,keys)



