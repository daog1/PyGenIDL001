'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from solders.instruction import AccountMeta, Instruction
from solders.pubkey import Pubkey as SolPubkey
from ..program_id import TOKEN_2022_PROGRAM_ADDRESS
class InitializeTokenMetadataArgs(typing.TypedDict):
    name:str
    symbol:str
    uri:str


layout = borsh.CStruct(
    "name" /borsh.String,
    "symbol" /borsh.String,
    "uri" /borsh.String,
    )


class InitializeTokenMetadataAccounts(typing.TypedDict):
    metadata:SolPubkey
    updateAuthority:SolPubkey
    mint:SolPubkey
    mintAuthority:SolPubkey

def InitializeTokenMetadata(
    args: InitializeTokenMetadataArgs,
    accounts: InitializeTokenMetadataAccounts,
    program_id: SolPubkey =  TOKEN_2022_PROGRAM_ADDRESS,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["metadata"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["updateAuthority"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["mint"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["mintAuthority"], is_signer=True, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    encoded_args = layout.build({
        "name":args["name"],
        "symbol":args["symbol"],
        "uri":args["uri"],
       })
    return Instruction(program_id,encoded_args,keys)



