'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from solders.instruction import AccountMeta, Instruction
from solders.pubkey import Pubkey as SolPubkey
from .. import types
from ..program_id import PROGRAM_ID
class ConfidentialTransferArgs(typing.TypedDict):
    confidentialTransferDiscriminator:int
    newSourceDecryptableAvailableBalance:types.decryptableBalance.pyType
    equalityProofInstructionOffset:int
    ciphertextValidityProofInstructionOffset:int
    rangeProofInstructionOffset:int


layout = borsh.CStruct(
    "confidentialTransferDiscriminator" /borsh.U8,
    "newSourceDecryptableAvailableBalance" /types.decryptableBalance.DecryptableBalance,
    "equalityProofInstructionOffset" /borsh.I8,
    "ciphertextValidityProofInstructionOffset" /borsh.I8,
    "rangeProofInstructionOffset" /borsh.I8,
    )


class ConfidentialTransferAccounts(typing.TypedDict):
    sourceToken:SolPubkey
    mint:SolPubkey
    destinationToken:SolPubkey
    instructionsSysvar:SolPubkey
    equalityRecord:SolPubkey
    ciphertextValidityRecord:SolPubkey
    rangeRecord:SolPubkey
    authority:SolPubkey

def ConfidentialTransfer(
    args: ConfidentialTransferArgs,
    accounts: ConfidentialTransferAccounts,
    program_id: SolPubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["sourceToken"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["mint"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["destinationToken"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["instructionsSysvar"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["equalityRecord"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["ciphertextValidityRecord"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["rangeRecord"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["authority"], is_signer=True, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\x1b"
    encoded_args = layout.build({
        "confidentialTransferDiscriminator":args["confidentialTransferDiscriminator"],
        "newSourceDecryptableAvailableBalance":args["newSourceDecryptableAvailableBalance"],
        "equalityProofInstructionOffset":args["equalityProofInstructionOffset"],
        "ciphertextValidityProofInstructionOffset":args["ciphertextValidityProofInstructionOffset"],
        "rangeProofInstructionOffset":args["rangeProofInstructionOffset"],
       })
    data = identifier + encoded_args
    return Instruction(program_id,data,keys)



