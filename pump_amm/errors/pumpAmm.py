'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import typing;
from anchorpy.error import ProgramError;

class FeeBasisPointsExceedsMaximum(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6000, ""
        )

    code = 6000
    name = "FeeBasisPointsExceedsMaximum"
    msg = ""
class ZeroBaseAmount(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6001, ""
        )

    code = 6001
    name = "ZeroBaseAmount"
    msg = ""
class ZeroQuoteAmount(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6002, ""
        )

    code = 6002
    name = "ZeroQuoteAmount"
    msg = ""
class TooLittlePoolTokenLiquidity(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6003, ""
        )

    code = 6003
    name = "TooLittlePoolTokenLiquidity"
    msg = ""
class ExceededSlippage(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6004, ""
        )

    code = 6004
    name = "ExceededSlippage"
    msg = ""
class InvalidAdmin(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6005, ""
        )

    code = 6005
    name = "InvalidAdmin"
    msg = ""
class UnsupportedBaseMint(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6006, ""
        )

    code = 6006
    name = "UnsupportedBaseMint"
    msg = ""
class UnsupportedQuoteMint(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6007, ""
        )

    code = 6007
    name = "UnsupportedQuoteMint"
    msg = ""
class InvalidBaseMint(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6008, ""
        )

    code = 6008
    name = "InvalidBaseMint"
    msg = ""
class InvalidQuoteMint(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6009, ""
        )

    code = 6009
    name = "InvalidQuoteMint"
    msg = ""
class InvalidLpMint(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6010, ""
        )

    code = 6010
    name = "InvalidLpMint"
    msg = ""
class AllProtocolFeeRecipientsShouldBeNonZero(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6011, ""
        )

    code = 6011
    name = "AllProtocolFeeRecipientsShouldBeNonZero"
    msg = ""
class UnsortedNotUniqueProtocolFeeRecipients(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6012, ""
        )

    code = 6012
    name = "UnsortedNotUniqueProtocolFeeRecipients"
    msg = ""
class InvalidProtocolFeeRecipient(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6013, ""
        )

    code = 6013
    name = "InvalidProtocolFeeRecipient"
    msg = ""
class InvalidPoolBaseTokenAccount(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6014, ""
        )

    code = 6014
    name = "InvalidPoolBaseTokenAccount"
    msg = ""
class InvalidPoolQuoteTokenAccount(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6015, ""
        )

    code = 6015
    name = "InvalidPoolQuoteTokenAccount"
    msg = ""
class BuyMoreBaseAmountThanPoolReserves(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6016, ""
        )

    code = 6016
    name = "BuyMoreBaseAmountThanPoolReserves"
    msg = ""
class DisabledCreatePool(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6017, ""
        )

    code = 6017
    name = "DisabledCreatePool"
    msg = ""
class DisabledDeposit(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6018, ""
        )

    code = 6018
    name = "DisabledDeposit"
    msg = ""
class DisabledWithdraw(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6019, ""
        )

    code = 6019
    name = "DisabledWithdraw"
    msg = ""
class DisabledBuy(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6020, ""
        )

    code = 6020
    name = "DisabledBuy"
    msg = ""
class DisabledSell(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6021, ""
        )

    code = 6021
    name = "DisabledSell"
    msg = ""
class SameMint(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6022, ""
        )

    code = 6022
    name = "SameMint"
    msg = ""
class Overflow(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6023, ""
        )

    code = 6023
    name = "Overflow"
    msg = ""
class Truncation(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6024, ""
        )

    code = 6024
    name = "Truncation"
    msg = ""
class DivisionByZero(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6025, ""
        )

    code = 6025
    name = "DivisionByZero"
    msg = ""
class NewSizeLessThanCurrentSize(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6026, ""
        )

    code = 6026
    name = "NewSizeLessThanCurrentSize"
    msg = ""
class AccountTypeNotSupported(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6027, ""
        )

    code = 6027
    name = "AccountTypeNotSupported"
    msg = ""

CustomError = typing.Union[
    FeeBasisPointsExceedsMaximum,
    ZeroBaseAmount,
    ZeroQuoteAmount,
    TooLittlePoolTokenLiquidity,
    ExceededSlippage,
    InvalidAdmin,
    UnsupportedBaseMint,
    UnsupportedQuoteMint,
    InvalidBaseMint,
    InvalidQuoteMint,
    InvalidLpMint,
    AllProtocolFeeRecipientsShouldBeNonZero,
    UnsortedNotUniqueProtocolFeeRecipients,
    InvalidProtocolFeeRecipient,
    InvalidPoolBaseTokenAccount,
    InvalidPoolQuoteTokenAccount,
    BuyMoreBaseAmountThanPoolReserves,
    DisabledCreatePool,
    DisabledDeposit,
    DisabledWithdraw,
    DisabledBuy,
    DisabledSell,
    SameMint,
    Overflow,
    Truncation,
    DivisionByZero,
    NewSizeLessThanCurrentSize,
    AccountTypeNotSupported,
 ]
CUSTOM_ERROR_MAP: dict[int, CustomError] = {
    6000: FeeBasisPointsExceedsMaximum(),
    6001: ZeroBaseAmount(),
    6002: ZeroQuoteAmount(),
    6003: TooLittlePoolTokenLiquidity(),
    6004: ExceededSlippage(),
    6005: InvalidAdmin(),
    6006: UnsupportedBaseMint(),
    6007: UnsupportedQuoteMint(),
    6008: InvalidBaseMint(),
    6009: InvalidQuoteMint(),
    6010: InvalidLpMint(),
    6011: AllProtocolFeeRecipientsShouldBeNonZero(),
    6012: UnsortedNotUniqueProtocolFeeRecipients(),
    6013: InvalidProtocolFeeRecipient(),
    6014: InvalidPoolBaseTokenAccount(),
    6015: InvalidPoolQuoteTokenAccount(),
    6016: BuyMoreBaseAmountThanPoolReserves(),
    6017: DisabledCreatePool(),
    6018: DisabledDeposit(),
    6019: DisabledWithdraw(),
    6020: DisabledBuy(),
    6021: DisabledSell(),
    6022: SameMint(),
    6023: Overflow(),
    6024: Truncation(),
    6025: DivisionByZero(),
    6026: NewSizeLessThanCurrentSize(),
    6027: AccountTypeNotSupported(),
}

def from_code(code: int) -> typing.Optional[CustomError]:
    maybe_err = CUSTOM_ERROR_MAP.get(code)
    if maybe_err is None:
        return None
    return maybe_err

