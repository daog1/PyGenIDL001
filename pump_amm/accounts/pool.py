'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey;
from anchorpy.coder.accounts import ACCOUNT_DISCRIMINATOR_SIZE;
from anchorpy.error import AccountInvalidDiscriminator;
from anchorpy.utils.rpc import get_multiple_accounts;
from dataclasses import dataclass;
from solana.rpc.async_api import AsyncClient;
from solana.rpc.commitment import Commitment;
from solana.rpc.types import MemcmpOpts;
from solders.pubkey import Pubkey;
from ..program_id import PROGRAM_ID;


class PoolJSON(typing.TypedDict):
    poolBump: int
    index: int
    creator: str
    baseMint: str
    quoteMint: str
    lpMint: str
    poolBaseTokenAccount: str
    poolQuoteTokenAccount: str
    lpSupply: int

@dataclass
class Pool:
    discriminator: typing.ClassVar = b"\xf1\x9a\x6d\x04\x11\xb1\x6d\xbc";

    layout: typing.ClassVar = borsh.CStruct(
        "poolBump" /borsh.U8,
        "index" /borsh.U16,
        "creator" /BorshPubkey,
        "baseMint" /BorshPubkey,
        "quoteMint" /BorshPubkey,
        "lpMint" /BorshPubkey,
        "poolBaseTokenAccount" /BorshPubkey,
        "poolQuoteTokenAccount" /BorshPubkey,
        "lpSupply" /borsh.U64,
        )
    #fields
    poolBump: int
    index: int
    creator: Pubkey
    baseMint: Pubkey
    quoteMint: Pubkey
    lpMint: Pubkey
    poolBaseTokenAccount: Pubkey
    poolQuoteTokenAccount: Pubkey
    lpSupply: int
    

    @classmethod
    async def fetch(
        cls,
        conn: AsyncClient,
        address: Pubkey,
        commitment: typing.Optional[Commitment] = None,
        program_id: Pubkey = PROGRAM_ID,
    ) -> typing.Optional["Pool"]:
        resp = await conn.get_account_info(address, commitment=commitment)
        info = resp.value
        if info is None:
            return None
        if info.owner != program_id:
            raise ValueError("Account does not belong to this program")
        bytes_data = info.data
        return cls.decode(bytes_data)

    @classmethod
    async def fetch_multiple(
        cls,
        conn: AsyncClient,
        addresses: list[Pubkey],
        commitment: typing.Optional[Commitment] = None,
        program_id: Pubkey = PROGRAM_ID,
    ) -> typing.List[typing.Optional["Pool"]]:
        infos = await get_multiple_accounts(conn, addresses, commitment=commitment)
        res: typing.List[typing.Optional["Pool"]] = []
        for info in infos:
            if info is None:
                res.append(None)
                continue
            if info.account.owner != program_id:
                raise ValueError("Account does not belong to this program")
            res.append(cls.decode(info.account.data))
        return res

    @classmethod
    def decode(cls, data: bytes) -> "Pool":
        if data[:ACCOUNT_DISCRIMINATOR_SIZE] != cls.discriminator:
            raise AccountInvalidDiscriminator(
                "The discriminator for this account is invalid"
            )
        dec = Pool.layout.parse(data[ACCOUNT_DISCRIMINATOR_SIZE:])
        return cls(
                poolBump=dec.poolBump,
                index=dec.index,
                creator=dec.creator,
                baseMint=dec.baseMint,
                quoteMint=dec.quoteMint,
                lpMint=dec.lpMint,
                poolBaseTokenAccount=dec.poolBaseTokenAccount,
                poolQuoteTokenAccount=dec.poolQuoteTokenAccount,
                lpSupply=dec.lpSupply,
                )

    def to_json(self) -> PoolJSON:
        return {
                "poolBump": self.poolBump,
                "index": self.index,
                "creator": str(self.creator),
                "baseMint": str(self.baseMint),
                "quoteMint": str(self.quoteMint),
                "lpMint": str(self.lpMint),
                "poolBaseTokenAccount": str(self.poolBaseTokenAccount),
                "poolQuoteTokenAccount": str(self.poolQuoteTokenAccount),
                "lpSupply": self.lpSupply,
                }

    @classmethod
    def from_json(cls, obj: PoolJSON) -> "Pool":
        return cls(
                poolBump=obj["poolBump"],
                index=obj["index"],
                creator=Pubkey.from_string(obj["creator"]),
                baseMint=Pubkey.from_string(obj["baseMint"]),
                quoteMint=Pubkey.from_string(obj["quoteMint"]),
                lpMint=Pubkey.from_string(obj["lpMint"]),
                poolBaseTokenAccount=Pubkey.from_string(obj["poolBaseTokenAccount"]),
                poolQuoteTokenAccount=Pubkey.from_string(obj["poolQuoteTokenAccount"]),
                lpSupply=obj["lpSupply"],
                )




