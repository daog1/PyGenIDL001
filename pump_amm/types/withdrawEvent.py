'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey;
from solders.sysvar import RENT;

class WithdrawEventJSON(typing.TypedDict):
    timestamp: int
    lpTokenAmountIn: int
    minBaseAmountOut: int
    minQuoteAmountOut: int
    userBaseTokenReserves: int
    userQuoteTokenReserves: int
    poolBaseTokenReserves: int
    poolQuoteTokenReserves: int
    baseAmountOut: int
    quoteAmountOut: int
    lpMintSupply: int
    pool: str
    user: str
    userBaseTokenAccount: str
    userQuoteTokenAccount: str
    userPoolTokenAccount: str

@dataclass
class WithdrawEvent:
    layout: typing.ClassVar = borsh.CStruct(
        "timestamp" /borsh.I64,
        "lpTokenAmountIn" /borsh.U64,
        "minBaseAmountOut" /borsh.U64,
        "minQuoteAmountOut" /borsh.U64,
        "userBaseTokenReserves" /borsh.U64,
        "userQuoteTokenReserves" /borsh.U64,
        "poolBaseTokenReserves" /borsh.U64,
        "poolQuoteTokenReserves" /borsh.U64,
        "baseAmountOut" /borsh.U64,
        "quoteAmountOut" /borsh.U64,
        "lpMintSupply" /borsh.U64,
        "pool" /BorshPubkey,
        "user" /BorshPubkey,
        "userBaseTokenAccount" /BorshPubkey,
        "userQuoteTokenAccount" /BorshPubkey,
        "userPoolTokenAccount" /BorshPubkey,
        )
    #fields
    timestamp: int
    lpTokenAmountIn: int
    minBaseAmountOut: int
    minQuoteAmountOut: int
    userBaseTokenReserves: int
    userQuoteTokenReserves: int
    poolBaseTokenReserves: int
    poolQuoteTokenReserves: int
    baseAmountOut: int
    quoteAmountOut: int
    lpMintSupply: int
    pool: Pubkey
    user: Pubkey
    userBaseTokenAccount: Pubkey
    userQuoteTokenAccount: Pubkey
    userPoolTokenAccount: Pubkey
    
    @classmethod
    def from_decoded(cls, obj: Container) -> "WithdrawEvent":
        return cls(
        timestamp=obj["timestamp"],
        lpTokenAmountIn=obj["lpTokenAmountIn"],
        minBaseAmountOut=obj["minBaseAmountOut"],
        minQuoteAmountOut=obj["minQuoteAmountOut"],
        userBaseTokenReserves=obj["userBaseTokenReserves"],
        userQuoteTokenReserves=obj["userQuoteTokenReserves"],
        poolBaseTokenReserves=obj["poolBaseTokenReserves"],
        poolQuoteTokenReserves=obj["poolQuoteTokenReserves"],
        baseAmountOut=obj["baseAmountOut"],
        quoteAmountOut=obj["quoteAmountOut"],
        lpMintSupply=obj["lpMintSupply"],
        pool=Pubkey.from_string(obj["pool"]),
        user=Pubkey.from_string(obj["user"]),
        userBaseTokenAccount=Pubkey.from_string(obj["userBaseTokenAccount"]),
        userQuoteTokenAccount=Pubkey.from_string(obj["userQuoteTokenAccount"]),
        userPoolTokenAccount=Pubkey.from_string(obj["userPoolTokenAccount"]),
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
                "timestamp": self.timestamp,
                "lpTokenAmountIn": self.lpTokenAmountIn,
                "minBaseAmountOut": self.minBaseAmountOut,
                "minQuoteAmountOut": self.minQuoteAmountOut,
                "userBaseTokenReserves": self.userBaseTokenReserves,
                "userQuoteTokenReserves": self.userQuoteTokenReserves,
                "poolBaseTokenReserves": self.poolBaseTokenReserves,
                "poolQuoteTokenReserves": self.poolQuoteTokenReserves,
                "baseAmountOut": self.baseAmountOut,
                "quoteAmountOut": self.quoteAmountOut,
                "lpMintSupply": self.lpMintSupply,
                "pool": self.pool,
                "user": self.user,
                "userBaseTokenAccount": self.userBaseTokenAccount,
                "userQuoteTokenAccount": self.userQuoteTokenAccount,
                "userPoolTokenAccount": self.userPoolTokenAccount,
                }

    def to_json(self) -> WithdrawEventJSON:
        return {
                "timestamp": self.timestamp,
                "lpTokenAmountIn": self.lpTokenAmountIn,
                "minBaseAmountOut": self.minBaseAmountOut,
                "minQuoteAmountOut": self.minQuoteAmountOut,
                "userBaseTokenReserves": self.userBaseTokenReserves,
                "userQuoteTokenReserves": self.userQuoteTokenReserves,
                "poolBaseTokenReserves": self.poolBaseTokenReserves,
                "poolQuoteTokenReserves": self.poolQuoteTokenReserves,
                "baseAmountOut": self.baseAmountOut,
                "quoteAmountOut": self.quoteAmountOut,
                "lpMintSupply": self.lpMintSupply,
                "pool": str(self.pool),
                "user": str(self.user),
                "userBaseTokenAccount": str(self.userBaseTokenAccount),
                "userQuoteTokenAccount": str(self.userQuoteTokenAccount),
                "userPoolTokenAccount": str(self.userPoolTokenAccount),
                }

    @classmethod
    def from_json(cls, obj: WithdrawEventJSON) -> "WithdrawEvent":
        return cls(
                timestamp=obj["timestamp"],
                lpTokenAmountIn=obj["lpTokenAmountIn"],
                minBaseAmountOut=obj["minBaseAmountOut"],
                minQuoteAmountOut=obj["minQuoteAmountOut"],
                userBaseTokenReserves=obj["userBaseTokenReserves"],
                userQuoteTokenReserves=obj["userQuoteTokenReserves"],
                poolBaseTokenReserves=obj["poolBaseTokenReserves"],
                poolQuoteTokenReserves=obj["poolQuoteTokenReserves"],
                baseAmountOut=obj["baseAmountOut"],
                quoteAmountOut=obj["quoteAmountOut"],
                lpMintSupply=obj["lpMintSupply"],
                pool=Pubkey.from_string(obj["pool"]),
                user=Pubkey.from_string(obj["user"]),
                userBaseTokenAccount=Pubkey.from_string(obj["userBaseTokenAccount"]),
                userQuoteTokenAccount=Pubkey.from_string(obj["userQuoteTokenAccount"]),
                userPoolTokenAccount=Pubkey.from_string(obj["userPoolTokenAccount"]),
        )






