'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey;
from solders.sysvar import RENT;

class BuyEventJSON(typing.TypedDict):
    timestamp: int
    baseAmountOut: int
    maxQuoteAmountIn: int
    userBaseTokenReserves: int
    userQuoteTokenReserves: int
    poolBaseTokenReserves: int
    poolQuoteTokenReserves: int
    quoteAmountIn: int
    lpFeeBasisPoints: int
    lpFee: int
    protocolFeeBasisPoints: int
    protocolFee: int
    quoteAmountInWithLpFee: int
    userQuoteAmountIn: int
    pool: str
    user: str
    userBaseTokenAccount: str
    userQuoteTokenAccount: str
    protocolFeeRecipient: str
    protocolFeeRecipientTokenAccount: str

@dataclass
class BuyEvent:
    layout: typing.ClassVar = borsh.CStruct(
        "timestamp" /borsh.I64,
        "baseAmountOut" /borsh.U64,
        "maxQuoteAmountIn" /borsh.U64,
        "userBaseTokenReserves" /borsh.U64,
        "userQuoteTokenReserves" /borsh.U64,
        "poolBaseTokenReserves" /borsh.U64,
        "poolQuoteTokenReserves" /borsh.U64,
        "quoteAmountIn" /borsh.U64,
        "lpFeeBasisPoints" /borsh.U64,
        "lpFee" /borsh.U64,
        "protocolFeeBasisPoints" /borsh.U64,
        "protocolFee" /borsh.U64,
        "quoteAmountInWithLpFee" /borsh.U64,
        "userQuoteAmountIn" /borsh.U64,
        "pool" /BorshPubkey,
        "user" /BorshPubkey,
        "userBaseTokenAccount" /BorshPubkey,
        "userQuoteTokenAccount" /BorshPubkey,
        "protocolFeeRecipient" /BorshPubkey,
        "protocolFeeRecipientTokenAccount" /BorshPubkey,
        )
    #fields
    timestamp: int
    baseAmountOut: int
    maxQuoteAmountIn: int
    userBaseTokenReserves: int
    userQuoteTokenReserves: int
    poolBaseTokenReserves: int
    poolQuoteTokenReserves: int
    quoteAmountIn: int
    lpFeeBasisPoints: int
    lpFee: int
    protocolFeeBasisPoints: int
    protocolFee: int
    quoteAmountInWithLpFee: int
    userQuoteAmountIn: int
    pool: Pubkey
    user: Pubkey
    userBaseTokenAccount: Pubkey
    userQuoteTokenAccount: Pubkey
    protocolFeeRecipient: Pubkey
    protocolFeeRecipientTokenAccount: Pubkey
    
    @classmethod
    def from_decoded(cls, obj: Container) -> "BuyEvent":
        return cls(
        timestamp=obj["timestamp"],
        baseAmountOut=obj["baseAmountOut"],
        maxQuoteAmountIn=obj["maxQuoteAmountIn"],
        userBaseTokenReserves=obj["userBaseTokenReserves"],
        userQuoteTokenReserves=obj["userQuoteTokenReserves"],
        poolBaseTokenReserves=obj["poolBaseTokenReserves"],
        poolQuoteTokenReserves=obj["poolQuoteTokenReserves"],
        quoteAmountIn=obj["quoteAmountIn"],
        lpFeeBasisPoints=obj["lpFeeBasisPoints"],
        lpFee=obj["lpFee"],
        protocolFeeBasisPoints=obj["protocolFeeBasisPoints"],
        protocolFee=obj["protocolFee"],
        quoteAmountInWithLpFee=obj["quoteAmountInWithLpFee"],
        userQuoteAmountIn=obj["userQuoteAmountIn"],
        pool=Pubkey.from_string(obj["pool"]),
        user=Pubkey.from_string(obj["user"]),
        userBaseTokenAccount=Pubkey.from_string(obj["userBaseTokenAccount"]),
        userQuoteTokenAccount=Pubkey.from_string(obj["userQuoteTokenAccount"]),
        protocolFeeRecipient=Pubkey.from_string(obj["protocolFeeRecipient"]),
        protocolFeeRecipientTokenAccount=Pubkey.from_string(obj["protocolFeeRecipientTokenAccount"]),
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
                "timestamp": self.timestamp,
                "baseAmountOut": self.baseAmountOut,
                "maxQuoteAmountIn": self.maxQuoteAmountIn,
                "userBaseTokenReserves": self.userBaseTokenReserves,
                "userQuoteTokenReserves": self.userQuoteTokenReserves,
                "poolBaseTokenReserves": self.poolBaseTokenReserves,
                "poolQuoteTokenReserves": self.poolQuoteTokenReserves,
                "quoteAmountIn": self.quoteAmountIn,
                "lpFeeBasisPoints": self.lpFeeBasisPoints,
                "lpFee": self.lpFee,
                "protocolFeeBasisPoints": self.protocolFeeBasisPoints,
                "protocolFee": self.protocolFee,
                "quoteAmountInWithLpFee": self.quoteAmountInWithLpFee,
                "userQuoteAmountIn": self.userQuoteAmountIn,
                "pool": self.pool,
                "user": self.user,
                "userBaseTokenAccount": self.userBaseTokenAccount,
                "userQuoteTokenAccount": self.userQuoteTokenAccount,
                "protocolFeeRecipient": self.protocolFeeRecipient,
                "protocolFeeRecipientTokenAccount": self.protocolFeeRecipientTokenAccount,
                }

    def to_json(self) -> BuyEventJSON:
        return {
                "timestamp": self.timestamp,
                "baseAmountOut": self.baseAmountOut,
                "maxQuoteAmountIn": self.maxQuoteAmountIn,
                "userBaseTokenReserves": self.userBaseTokenReserves,
                "userQuoteTokenReserves": self.userQuoteTokenReserves,
                "poolBaseTokenReserves": self.poolBaseTokenReserves,
                "poolQuoteTokenReserves": self.poolQuoteTokenReserves,
                "quoteAmountIn": self.quoteAmountIn,
                "lpFeeBasisPoints": self.lpFeeBasisPoints,
                "lpFee": self.lpFee,
                "protocolFeeBasisPoints": self.protocolFeeBasisPoints,
                "protocolFee": self.protocolFee,
                "quoteAmountInWithLpFee": self.quoteAmountInWithLpFee,
                "userQuoteAmountIn": self.userQuoteAmountIn,
                "pool": str(self.pool),
                "user": str(self.user),
                "userBaseTokenAccount": str(self.userBaseTokenAccount),
                "userQuoteTokenAccount": str(self.userQuoteTokenAccount),
                "protocolFeeRecipient": str(self.protocolFeeRecipient),
                "protocolFeeRecipientTokenAccount": str(self.protocolFeeRecipientTokenAccount),
                }

    @classmethod
    def from_json(cls, obj: BuyEventJSON) -> "BuyEvent":
        return cls(
                timestamp=obj["timestamp"],
                baseAmountOut=obj["baseAmountOut"],
                maxQuoteAmountIn=obj["maxQuoteAmountIn"],
                userBaseTokenReserves=obj["userBaseTokenReserves"],
                userQuoteTokenReserves=obj["userQuoteTokenReserves"],
                poolBaseTokenReserves=obj["poolBaseTokenReserves"],
                poolQuoteTokenReserves=obj["poolQuoteTokenReserves"],
                quoteAmountIn=obj["quoteAmountIn"],
                lpFeeBasisPoints=obj["lpFeeBasisPoints"],
                lpFee=obj["lpFee"],
                protocolFeeBasisPoints=obj["protocolFeeBasisPoints"],
                protocolFee=obj["protocolFee"],
                quoteAmountInWithLpFee=obj["quoteAmountInWithLpFee"],
                userQuoteAmountIn=obj["userQuoteAmountIn"],
                pool=Pubkey.from_string(obj["pool"]),
                user=Pubkey.from_string(obj["user"]),
                userBaseTokenAccount=Pubkey.from_string(obj["userBaseTokenAccount"]),
                userQuoteTokenAccount=Pubkey.from_string(obj["userQuoteTokenAccount"]),
                protocolFeeRecipient=Pubkey.from_string(obj["protocolFeeRecipient"]),
                protocolFeeRecipientTokenAccount=Pubkey.from_string(obj["protocolFeeRecipientTokenAccount"]),
        )






