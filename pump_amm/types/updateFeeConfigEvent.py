'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey;
from solders.sysvar import RENT;

class UpdateFeeConfigEventJSON(typing.TypedDict):
    timestamp: int
    admin: str
    lpFeeBasisPoints: int
    protocolFeeBasisPoints: int
    protocolFeeRecipients: list[str]

@dataclass
class UpdateFeeConfigEvent:
    layout: typing.ClassVar = borsh.CStruct(
        "timestamp" /borsh.I64,
        "admin" /BorshPubkey,
        "lpFeeBasisPoints" /borsh.U64,
        "protocolFeeBasisPoints" /borsh.U64,
        "protocolFeeRecipients" /BorshPubkey[8],
        )
    #fields
    timestamp: int
    admin: Pubkey
    lpFeeBasisPoints: int
    protocolFeeBasisPoints: int
    protocolFeeRecipients: list[Pubkey]
    
    @classmethod
    def from_decoded(cls, obj: Container) -> "UpdateFeeConfigEvent":
        return cls(
        timestamp=obj["timestamp"],
        admin=Pubkey.from_string(obj["admin"]),
        lpFeeBasisPoints=obj["lpFeeBasisPoints"],
        protocolFeeBasisPoints=obj["protocolFeeBasisPoints"],
        protocolFeeRecipients=list(map(lambda item:Pubkey.from_string(item),obj["protocolFeeRecipients"])),
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
                "timestamp": self.timestamp,
                "admin": self.admin,
                "lpFeeBasisPoints": self.lpFeeBasisPoints,
                "protocolFeeBasisPoints": self.protocolFeeBasisPoints,
                "protocolFeeRecipients": self.protocolFeeRecipients,
                }

    def to_json(self) -> UpdateFeeConfigEventJSON:
        return {
                "timestamp": self.timestamp,
                "admin": str(self.admin),
                "lpFeeBasisPoints": self.lpFeeBasisPoints,
                "protocolFeeBasisPoints": self.protocolFeeBasisPoints,
                "protocolFeeRecipients": list(map(lambda item:str(item),self.protocolFeeRecipients)),
                }

    @classmethod
    def from_json(cls, obj: UpdateFeeConfigEventJSON) -> "UpdateFeeConfigEvent":
        return cls(
                timestamp=obj["timestamp"],
                admin=Pubkey.from_string(obj["admin"]),
                lpFeeBasisPoints=obj["lpFeeBasisPoints"],
                protocolFeeBasisPoints=obj["protocolFeeBasisPoints"],
                protocolFeeRecipients=list(map(lambda item:Pubkey.from_string(item),obj["protocolFeeRecipients"])),
        )






