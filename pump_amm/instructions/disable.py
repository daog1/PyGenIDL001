'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from construct import Container;
from dataclasses import dataclass;
from solders.instruction import AccountMeta, Instruction;
from solders.pubkey import Pubkey;
from solders.sysvar import RENT;
from ..program_id import PROGRAM_ID;
class DisableArgs(typing.TypedDict):
    disableCreatePool:bool
    disableDeposit:bool
    disableWithdraw:bool
    disableBuy:bool
    disableSell:bool


layout = borsh.CStruct(
    "disableCreatePool" /borsh.Bool,
    "disableDeposit" /borsh.Bool,
    "disableWithdraw" /borsh.Bool,
    "disableBuy" /borsh.Bool,
    "disableSell" /borsh.Bool,
    )


class DisableAccounts(typing.TypedDict):
    admin:Pubkey
    globalConfig:Pubkey
    eventAuthority:Pubkey
    program:Pubkey

def Disable(
    args: DisableArgs,
    accounts: DisableAccounts,
    program_id: Pubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["admin"], is_signer=True, is_writable=False),
    AccountMeta(pubkey=accounts["globalConfig"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["eventAuthority"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["program"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=RENT, is_signer=False, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\xb9\xad\xbb\x5a\xd8\x0f\xee\xe9"
    encoded_args = layout.build({
    "disableCreatePool":args["disableCreatePool"],
    "disableDeposit":args["disableDeposit"],
    "disableWithdraw":args["disableWithdraw"],
    "disableBuy":args["disableBuy"],
    "disableSell":args["disableSell"],
       })

    data = identifier + encoded_args
    return Instruction(program_id,data,keys)

def find_EventAuthority() -> typing.Tuple[Pubkey, int]:
    seeds = [
       b"\x5f\x5f\x65\x76\x65\x6e\x74\x5f\x61\x75\x74\x68\x6f\x72\x69\x74\x79",
    ]

    address, bump = Pubkey.find_program_address(seeds,
        PROGRAM_ID
            ) # Using solana.publickey

    return address, bump



