'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from construct import Container;
from dataclasses import dataclass;
from solders.instruction import AccountMeta, Instruction;
from solders.pubkey import Pubkey;
from solders.sysvar import RENT;
from ..program_id import PROGRAM_ID;
class CreatePoolArgs(typing.TypedDict):
    index:int
    baseAmountIn:int
    quoteAmountIn:int


layout = borsh.CStruct(
    "index" /borsh.U16,
    "baseAmountIn" /borsh.U64,
    "quoteAmountIn" /borsh.U64,
    )


class CreatePoolAccounts(typing.TypedDict):
    pool:Pubkey
    globalConfig:Pubkey
    creator:Pubkey
    baseMint:Pubkey
    quoteMint:Pubkey
    lpMint:Pubkey
    userBaseTokenAccount:Pubkey
    userQuoteTokenAccount:Pubkey
    userPoolTokenAccount:Pubkey
    poolBaseTokenAccount:Pubkey
    poolQuoteTokenAccount:Pubkey
    systemProgram:Pubkey
    token2022Program:Pubkey
    baseTokenProgram:Pubkey
    quoteTokenProgram:Pubkey
    associatedTokenProgram:Pubkey
    eventAuthority:Pubkey
    program:Pubkey

def CreatePool(
    args: CreatePoolArgs,
    accounts: CreatePoolAccounts,
    program_id: Pubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["pool"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["globalConfig"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["creator"], is_signer=True, is_writable=True),
    AccountMeta(pubkey=accounts["baseMint"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["quoteMint"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["lpMint"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["userBaseTokenAccount"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["userQuoteTokenAccount"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["userPoolTokenAccount"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["poolBaseTokenAccount"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["poolQuoteTokenAccount"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["systemProgram"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["token2022Program"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["baseTokenProgram"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["quoteTokenProgram"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["associatedTokenProgram"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["eventAuthority"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["program"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=RENT, is_signer=False, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\xe9\x92\xd1\x8e\xcf\x68\x40\xbc"
    encoded_args = layout.build({
    "index":args["index"],
    "baseAmountIn":args["baseAmountIn"],
    "quoteAmountIn":args["quoteAmountIn"],
       })

    data = identifier + encoded_args
    return Instruction(program_id,data,keys)

def find_Pool(index: , creator: Pubkey, baseMint: Pubkey, quoteMint: Pubkey) -> typing.Tuple[Pubkey, int]:
    seeds = [
       b"\x70\x6f\x6f\x6c",
       ,
       bytes(creator),
       bytes(baseMint),
       bytes(quoteMint),
    ]

    address, bump = Pubkey.find_program_address(seeds,
        PROGRAM_ID
            ) # Using solana.publickey

    return address, bump



def find_LpMint(pool: Pubkey) -> typing.Tuple[Pubkey, int]:
    seeds = [
       b"\x70\x6f\x6f\x6c\x5f\x6c\x70\x5f\x6d\x69\x6e\x74",
       bytes(pool),
    ]

    address, bump = Pubkey.find_program_address(seeds,
        PROGRAM_ID
            ) # Using solana.publickey

    return address, bump



def find_UserPoolTokenAccount(creator: Pubkey, token2022Program: Pubkey, lpMint: Pubkey) -> typing.Tuple[Pubkey, int]:
    seeds = [
       bytes(creator),
       bytes(token2022Program),
       bytes(lpMint),
    ]

    address, bump = Pubkey.find_program_address(seeds,
            program_id=Pubkey.from_string('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL')
            ) # Using solana.publickey

    return address, bump



def find_PoolBaseTokenAccount(pool: Pubkey, baseTokenProgram: Pubkey, baseMint: Pubkey) -> typing.Tuple[Pubkey, int]:
    seeds = [
       bytes(pool),
       bytes(baseTokenProgram),
       bytes(baseMint),
    ]

    address, bump = Pubkey.find_program_address(seeds,
            program_id=Pubkey.from_string('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL')
            ) # Using solana.publickey

    return address, bump



def find_PoolQuoteTokenAccount(pool: Pubkey, quoteTokenProgram: Pubkey, quoteMint: Pubkey) -> typing.Tuple[Pubkey, int]:
    seeds = [
       bytes(pool),
       bytes(quoteTokenProgram),
       bytes(quoteMint),
    ]

    address, bump = Pubkey.find_program_address(seeds,
            program_id=Pubkey.from_string('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL')
            ) # Using solana.publickey

    return address, bump









def find_EventAuthority() -> typing.Tuple[Pubkey, int]:
    seeds = [
       b"\x5f\x5f\x65\x76\x65\x6e\x74\x5f\x61\x75\x74\x68\x6f\x72\x69\x74\x79",
    ]

    address, bump = Pubkey.find_program_address(seeds,
        PROGRAM_ID
            ) # Using solana.publickey

    return address, bump



