'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey;
from construct import Container;
from dataclasses import dataclass;
from solders.instruction import AccountMeta, Instruction;
from solders.pubkey import Pubkey;
from solders.sysvar import RENT;
from ..program_id import PROGRAM_ID;
class CreateConfigArgs(typing.TypedDict):
    lpFeeBasisPoints:int
    protocolFeeBasisPoints:int
    protocolFeeRecipients:list[Pubkey]


layout = borsh.CStruct(
    "lpFeeBasisPoints" /borsh.U64,
    "protocolFeeBasisPoints" /borsh.U64,
    "protocolFeeRecipients" /BorshPubkey[8],
    )


class CreateConfigAccounts(typing.TypedDict):
    admin:Pubkey
    globalConfig:Pubkey
    systemProgram:Pubkey
    eventAuthority:Pubkey
    program:Pubkey

def CreateConfig(
    args: CreateConfigArgs,
    accounts: CreateConfigAccounts,
    program_id: Pubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["admin"], is_signer=True, is_writable=True),
    AccountMeta(pubkey=accounts["globalConfig"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["systemProgram"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["eventAuthority"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["program"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=RENT, is_signer=False, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\xc9\xcf\xf3\x72\x4b\x6f\x2f\xbd"
    encoded_args = layout.build({
    "lpFeeBasisPoints":args["lpFeeBasisPoints"],
    "protocolFeeBasisPoints":args["protocolFeeBasisPoints"],
    "protocolFeeRecipients":args["protocolFeeRecipients"],
       })

    data = identifier + encoded_args
    return Instruction(program_id,data,keys)



def find_GlobalConfig() -> typing.Tuple[Pubkey, int]:
    seeds = [
       b"\x67\x6c\x6f\x62\x61\x6c\x5f\x63\x6f\x6e\x66\x69\x67",
    ]

    address, bump = Pubkey.find_program_address(seeds,
        PROGRAM_ID
            ) # Using solana.publickey

    return address, bump





def find_EventAuthority() -> typing.Tuple[Pubkey, int]:
    seeds = [
       b"\x5f\x5f\x65\x76\x65\x6e\x74\x5f\x61\x75\x74\x68\x6f\x72\x69\x74\x79",
    ]

    address, bump = Pubkey.find_program_address(seeds,
        PROGRAM_ID
            ) # Using solana.publickey

    return address, bump



