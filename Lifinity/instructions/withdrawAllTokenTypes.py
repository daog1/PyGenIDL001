'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from construct import Container;
from dataclasses import dataclass;
from solders.instruction import AccountMeta, Instruction;
from solders.pubkey import Pubkey as SolPubkey;
from ..program_id import PROGRAM_ID;
class WithdrawAllTokenTypesArgs(typing.TypedDict):
    poolTokenAmount:int
    minimumTokenAAmount:int
    minimumTokenBAmount:int


layout = borsh.CStruct(
    "poolTokenAmount" /borsh.U64,
    "minimumTokenAAmount" /borsh.U64,
    "minimumTokenBAmount" /borsh.U64,
    )


class WithdrawAllTokenTypesAccounts(typing.TypedDict):
    amm:SolPubkey
    authority:SolPubkey
    userTransferAuthorityInfo:SolPubkey
    sourceInfo:SolPubkey
    tokenA:SolPubkey
    tokenB:SolPubkey
    poolMint:SolPubkey
    destTokenAInfo:SolPubkey
    destTokenBInfo:SolPubkey
    tokenProgram:SolPubkey

def WithdrawAllTokenTypes(
    args: WithdrawAllTokenTypesArgs,
    accounts: WithdrawAllTokenTypesAccounts,
    program_id: SolPubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["amm"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["authority"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["userTransferAuthorityInfo"], is_signer=True, is_writable=False),
    AccountMeta(pubkey=accounts["sourceInfo"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["tokenA"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["tokenB"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["poolMint"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["destTokenAInfo"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["destTokenBInfo"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["tokenProgram"], is_signer=False, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\xbd\xfe\x9c\xae\xd2\x09\xa4\xd8"
    encoded_args = layout.build({
        "poolTokenAmount":args["poolTokenAmount"],
        "minimumTokenAAmount":args["minimumTokenAAmount"],
        "minimumTokenBAmount":args["minimumTokenBAmount"],
       })
    data = identifier + encoded_args
    return Instruction(program_id,data,keys)






