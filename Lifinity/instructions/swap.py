'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from construct import Container;
from dataclasses import dataclass;
from solders.instruction import AccountMeta, Instruction;
from solders.pubkey import Pubkey as SolPubkey;
from solders.sysvar import RENT;
from ..program_id import PROGRAM_ID;
class SwapArgs(typing.TypedDict):
    amountIn:int
    minimumAmountOut:int


layout = borsh.CStruct(
    "amountIn" /borsh.U64,
    "minimumAmountOut" /borsh.U64,
    )


class SwapAccounts(typing.TypedDict):
    authority:SolPubkey
    amm:SolPubkey
    userTransferAuthority:SolPubkey
    sourceInfo:SolPubkey
    destinationInfo:SolPubkey
    swapSource:SolPubkey
    swapDestination:SolPubkey
    poolMint:SolPubkey
    feeAccount:SolPubkey
    tokenProgram:SolPubkey
    oracleMainAccount:SolPubkey
    oracleSubAccount:SolPubkey
    oraclePcAccount:SolPubkey

def Swap(
    args: SwapArgs,
    accounts: SwapAccounts,
    program_id: SolPubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["authority"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["amm"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["userTransferAuthority"], is_signer=True, is_writable=False),
    AccountMeta(pubkey=accounts["sourceInfo"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["destinationInfo"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["swapSource"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["swapDestination"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["poolMint"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["feeAccount"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["tokenProgram"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["oracleMainAccount"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["oracleSubAccount"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["oraclePcAccount"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=RENT, is_signer=False, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\xf8\xc6\x9e\x91\xe1\x75\x87\xc8"
    encoded_args = layout.build({
        "amountIn":args["amountIn"],
        "minimumAmountOut":args["minimumAmountOut"],
       })

    data = identifier + encoded_args
    return Instruction(program_id,data,keys)





