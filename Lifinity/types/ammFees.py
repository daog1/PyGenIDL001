'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey;
from solders.sysvar import RENT;

class AmmFeesJSON(typing.TypedDict):
    tradeFeeNumerator: int
    tradeFeeDenominator: int
    ownerTradeFeeNumerator: int
    ownerTradeFeeDenominator: int
    ownerWithdrawFeeNumerator: int
    ownerWithdrawFeeDenominator: int
    hostFeeNumerator: int
    hostFeeDenominator: int

@dataclass
class AmmFees:
    layout: typing.ClassVar = borsh.CStruct(
        "tradeFeeNumerator" /borsh.U64,
        "tradeFeeDenominator" /borsh.U64,
        "ownerTradeFeeNumerator" /borsh.U64,
        "ownerTradeFeeDenominator" /borsh.U64,
        "ownerWithdrawFeeNumerator" /borsh.U64,
        "ownerWithdrawFeeDenominator" /borsh.U64,
        "hostFeeNumerator" /borsh.U64,
        "hostFeeDenominator" /borsh.U64,
        )
    #fields
    tradeFeeNumerator: int
    tradeFeeDenominator: int
    ownerTradeFeeNumerator: int
    ownerTradeFeeDenominator: int
    ownerWithdrawFeeNumerator: int
    ownerWithdrawFeeDenominator: int
    hostFeeNumerator: int
    hostFeeDenominator: int
    
    @classmethod
    def from_decoded(cls, obj: Container) -> "AmmFees":
        return cls(
                   tradeFeeNumerator=obj.tradeFeeNumerator,
                   tradeFeeDenominator=obj.tradeFeeDenominator,
                   ownerTradeFeeNumerator=obj.ownerTradeFeeNumerator,
                   ownerTradeFeeDenominator=obj.ownerTradeFeeDenominator,
                   ownerWithdrawFeeNumerator=obj.ownerWithdrawFeeNumerator,
                   ownerWithdrawFeeDenominator=obj.ownerWithdrawFeeDenominator,
                   hostFeeNumerator=obj.hostFeeNumerator,
                   hostFeeDenominator=obj.hostFeeDenominator,
                )

    #def to_encodable(self) -> dict[str, typing.Any]:
    #    return {"row": self.row, "column": self.column}

    def to_json(self) -> AmmFeesJSON:
        return {
                "tradeFeeNumerator": self.tradeFeeNumerator,
                "tradeFeeDenominator": self.tradeFeeDenominator,
                "ownerTradeFeeNumerator": self.ownerTradeFeeNumerator,
                "ownerTradeFeeDenominator": self.ownerTradeFeeDenominator,
                "ownerWithdrawFeeNumerator": self.ownerWithdrawFeeNumerator,
                "ownerWithdrawFeeDenominator": self.ownerWithdrawFeeDenominator,
                "hostFeeNumerator": self.hostFeeNumerator,
                "hostFeeDenominator": self.hostFeeDenominator,
        }

    @classmethod
    def from_json(cls, obj: AmmFeesJSON) -> "AmmFees":
        return cls(
                tradeFeeNumerator=obj["tradeFeeNumerator"],
                tradeFeeDenominator=obj["tradeFeeDenominator"],
                ownerTradeFeeNumerator=obj["ownerTradeFeeNumerator"],
                ownerTradeFeeDenominator=obj["ownerTradeFeeDenominator"],
                ownerWithdrawFeeNumerator=obj["ownerWithdrawFeeNumerator"],
                ownerWithdrawFeeDenominator=obj["ownerWithdrawFeeDenominator"],
                hostFeeNumerator=obj["hostFeeNumerator"],
                hostFeeDenominator=obj["hostFeeDenominator"],
        )






