'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import typing;
from anchorpy.error import ProgramError;

class AlreadyInUse(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6000, ""
        )

    code = 6000
    name = "AlreadyInUse"
    msg = ""
class InvalidProgramAddress(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6001, ""
        )

    code = 6001
    name = "InvalidProgramAddress"
    msg = ""
class InvalidOwner(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6002, ""
        )

    code = 6002
    name = "InvalidOwner"
    msg = ""
class InvalidOutputOwner(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6003, ""
        )

    code = 6003
    name = "InvalidOutputOwner"
    msg = ""
class ExpectedMint(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6004, ""
        )

    code = 6004
    name = "ExpectedMint"
    msg = ""
class ExpectedAccount(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6005, ""
        )

    code = 6005
    name = "ExpectedAccount"
    msg = ""
class EmptySupply(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6006, ""
        )

    code = 6006
    name = "EmptySupply"
    msg = ""
class InvalidSupply(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6007, ""
        )

    code = 6007
    name = "InvalidSupply"
    msg = ""
class InvalidDelegate(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6008, ""
        )

    code = 6008
    name = "InvalidDelegate"
    msg = ""
class InvalidInput(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6009, ""
        )

    code = 6009
    name = "InvalidInput"
    msg = ""
class IncorrectSwapAccount(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6010, ""
        )

    code = 6010
    name = "IncorrectSwapAccount"
    msg = ""
class IncorrectPoolMint(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6011, ""
        )

    code = 6011
    name = "IncorrectPoolMint"
    msg = ""
class InvalidOutput(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6012, ""
        )

    code = 6012
    name = "InvalidOutput"
    msg = ""
class CalculationFailure(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6013, ""
        )

    code = 6013
    name = "CalculationFailure"
    msg = ""
class InvalidInstruction(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6014, ""
        )

    code = 6014
    name = "InvalidInstruction"
    msg = ""
class RepeatedMint(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6015, ""
        )

    code = 6015
    name = "RepeatedMint"
    msg = ""
class ExceededSlippage(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6016, ""
        )

    code = 6016
    name = "ExceededSlippage"
    msg = ""
class InvalidCloseAuthority(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6017, ""
        )

    code = 6017
    name = "InvalidCloseAuthority"
    msg = ""
class InvalidFreezeAuthority(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6018, ""
        )

    code = 6018
    name = "InvalidFreezeAuthority"
    msg = ""
class IncorrectFeeAccount(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6019, ""
        )

    code = 6019
    name = "IncorrectFeeAccount"
    msg = ""
class ZeroTradingTokens(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6020, ""
        )

    code = 6020
    name = "ZeroTradingTokens"
    msg = ""
class FeeCalculationFailure(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6021, ""
        )

    code = 6021
    name = "FeeCalculationFailure"
    msg = ""
class ConversionFailure(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6022, ""
        )

    code = 6022
    name = "ConversionFailure"
    msg = ""
class InvalidFee(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6023, ""
        )

    code = 6023
    name = "InvalidFee"
    msg = ""
class IncorrectTokenProgramId(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6024, ""
        )

    code = 6024
    name = "IncorrectTokenProgramId"
    msg = ""
class IncorrectOracleAccount(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6025, ""
        )

    code = 6025
    name = "IncorrectOracleAccount"
    msg = ""
class IncorrectConfigAccount(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6026, ""
        )

    code = 6026
    name = "IncorrectConfigAccount"
    msg = ""
class UnsupportedCurveType(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6027, ""
        )

    code = 6027
    name = "UnsupportedCurveType"
    msg = ""
class InvalidCurve(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6028, ""
        )

    code = 6028
    name = "InvalidCurve"
    msg = ""
class UnsupportedCurveOperation(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6029, ""
        )

    code = 6029
    name = "UnsupportedCurveOperation"
    msg = ""
class InvalidPythStatus(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6030, ""
        )

    code = 6030
    name = "InvalidPythStatus"
    msg = ""
class InvalidPythPrice(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6031, ""
        )

    code = 6031
    name = "InvalidPythPrice"
    msg = ""
class IncorrectSigner(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6032, ""
        )

    code = 6032
    name = "IncorrectSigner"
    msg = ""
class ExceedPoolBalance(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6033, ""
        )

    code = 6033
    name = "ExceedPoolBalance"
    msg = ""
class ProgramIsFrozen(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6034, ""
        )

    code = 6034
    name = "ProgramIsFrozen"
    msg = ""
class OracleConfidence(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6035, ""
        )

    code = 6035
    name = "OracleConfidence"
    msg = ""
class OverCapAmount(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6036, ""
        )

    code = 6036
    name = "OverCapAmount"
    msg = ""
class InvalidUpdateAccount(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6037, ""
        )

    code = 6037
    name = "InvalidUpdateAccount"
    msg = ""

CustomError = typing.Union[
    AlreadyInUse,
    InvalidProgramAddress,
    InvalidOwner,
    InvalidOutputOwner,
    ExpectedMint,
    ExpectedAccount,
    EmptySupply,
    InvalidSupply,
    InvalidDelegate,
    InvalidInput,
    IncorrectSwapAccount,
    IncorrectPoolMint,
    InvalidOutput,
    CalculationFailure,
    InvalidInstruction,
    RepeatedMint,
    ExceededSlippage,
    InvalidCloseAuthority,
    InvalidFreezeAuthority,
    IncorrectFeeAccount,
    ZeroTradingTokens,
    FeeCalculationFailure,
    ConversionFailure,
    InvalidFee,
    IncorrectTokenProgramId,
    IncorrectOracleAccount,
    IncorrectConfigAccount,
    UnsupportedCurveType,
    InvalidCurve,
    UnsupportedCurveOperation,
    InvalidPythStatus,
    InvalidPythPrice,
    IncorrectSigner,
    ExceedPoolBalance,
    ProgramIsFrozen,
    OracleConfidence,
    OverCapAmount,
    InvalidUpdateAccount,
 ]
CUSTOM_ERROR_MAP: dict[int, CustomError] = {
    6000: AlreadyInUse(),
    6001: InvalidProgramAddress(),
    6002: InvalidOwner(),
    6003: InvalidOutputOwner(),
    6004: ExpectedMint(),
    6005: ExpectedAccount(),
    6006: EmptySupply(),
    6007: InvalidSupply(),
    6008: InvalidDelegate(),
    6009: InvalidInput(),
    6010: IncorrectSwapAccount(),
    6011: IncorrectPoolMint(),
    6012: InvalidOutput(),
    6013: CalculationFailure(),
    6014: InvalidInstruction(),
    6015: RepeatedMint(),
    6016: ExceededSlippage(),
    6017: InvalidCloseAuthority(),
    6018: InvalidFreezeAuthority(),
    6019: IncorrectFeeAccount(),
    6020: ZeroTradingTokens(),
    6021: FeeCalculationFailure(),
    6022: ConversionFailure(),
    6023: InvalidFee(),
    6024: IncorrectTokenProgramId(),
    6025: IncorrectOracleAccount(),
    6026: IncorrectConfigAccount(),
    6027: UnsupportedCurveType(),
    6028: InvalidCurve(),
    6029: UnsupportedCurveOperation(),
    6030: InvalidPythStatus(),
    6031: InvalidPythPrice(),
    6032: IncorrectSigner(),
    6033: ExceedPoolBalance(),
    6034: ProgramIsFrozen(),
    6035: OracleConfidence(),
    6036: OverCapAmount(),
    6037: InvalidUpdateAccount(),
}

def from_code(code: int) -> typing.Optional[CustomError]:
    maybe_err = CUSTOM_ERROR_MAP.get(code)
    if maybe_err is None:
        return None
    return maybe_err

