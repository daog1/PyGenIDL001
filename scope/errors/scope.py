'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import typing
from anchorpy.error import ProgramError

class IntegerOverflow(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6000, ""
        )

    code = 6000
    name = "IntegerOverflow"
    msg = ""
class ConversionFailure(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6001, ""
        )

    code = 6001
    name = "ConversionFailure"
    msg = ""
class MathOverflow(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6002, ""
        )

    code = 6002
    name = "MathOverflow"
    msg = ""
class OutOfRangeIntegralConversion(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6003, ""
        )

    code = 6003
    name = "OutOfRangeIntegralConversion"
    msg = ""
class UnexpectedAccount(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6004, ""
        )

    code = 6004
    name = "UnexpectedAccount"
    msg = ""
class PriceNotValid(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6005, ""
        )

    code = 6005
    name = "PriceNotValid"
    msg = ""
class AccountsAndTokenMismatch(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6006, ""
        )

    code = 6006
    name = "AccountsAndTokenMismatch"
    msg = ""
class BadTokenNb(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6007, ""
        )

    code = 6007
    name = "BadTokenNb"
    msg = ""
class BadTokenType(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6008, ""
        )

    code = 6008
    name = "BadTokenType"
    msg = ""
class SwitchboardV2Error(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6009, ""
        )

    code = 6009
    name = "SwitchboardV2Error"
    msg = ""
class InvalidAccountDiscriminator(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6010, ""
        )

    code = 6010
    name = "InvalidAccountDiscriminator"
    msg = ""
class UnableToDeserializeAccount(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6011, ""
        )

    code = 6011
    name = "UnableToDeserializeAccount"
    msg = ""
class BadScopeChainOrPrices(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6012, ""
        )

    code = 6012
    name = "BadScopeChainOrPrices"
    msg = ""
class RefreshInCPI(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6013, ""
        )

    code = 6013
    name = "RefreshInCPI"
    msg = ""
class RefreshWithUnexpectedIxs(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6014, ""
        )

    code = 6014
    name = "RefreshWithUnexpectedIxs"
    msg = ""
class InvalidTokenUpdateMode(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6015, ""
        )

    code = 6015
    name = "InvalidTokenUpdateMode"
    msg = ""
class UnableToDerivePDA(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6016, ""
        )

    code = 6016
    name = "UnableToDerivePDA"
    msg = ""
class BadTimestamp(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6017, ""
        )

    code = 6017
    name = "BadTimestamp"
    msg = ""
class BadSlot(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6018, ""
        )

    code = 6018
    name = "BadSlot"
    msg = ""
class PriceAccountNotExpected(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6019, ""
        )

    code = 6019
    name = "PriceAccountNotExpected"
    msg = ""
class TwapSourceIndexOutOfRange(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6020, ""
        )

    code = 6020
    name = "TwapSourceIndexOutOfRange"
    msg = ""
class TwapSampleTooFrequent(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6021, ""
        )

    code = 6021
    name = "TwapSampleTooFrequent"
    msg = ""
class UnexpectedJlpConfiguration(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6022, ""
        )

    code = 6022
    name = "UnexpectedJlpConfiguration"
    msg = ""
class TwapNotEnoughSamplesInPeriod(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6023, ""
        )

    code = 6023
    name = "TwapNotEnoughSamplesInPeriod"
    msg = ""
class EmptyTokenList(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6024, ""
        )

    code = 6024
    name = "EmptyTokenList"
    msg = ""
class StakeFeeTooHigh(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6025, ""
        )

    code = 6025
    name = "StakeFeeTooHigh"
    msg = ""
class KTokenUnderlyingPriceNotValid(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6026, ""
        )

    code = 6026
    name = "KTokenUnderlyingPriceNotValid"
    msg = ""
class KTokenHoldingsCalculationError(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6027, ""
        )

    code = 6027
    name = "KTokenHoldingsCalculationError"
    msg = ""
class CannotResizeAccount(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6028, ""
        )

    code = 6028
    name = "CannotResizeAccount"
    msg = ""
class FixedPriceInvalid(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6029, ""
        )

    code = 6029
    name = "FixedPriceInvalid"
    msg = ""
class SwitchboardOnDemandError(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6030, ""
        )

    code = 6030
    name = "SwitchboardOnDemandError"
    msg = ""
class ConfidenceIntervalCheckFailed(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6031, ""
        )

    code = 6031
    name = "ConfidenceIntervalCheckFailed"
    msg = ""
class InvalidGenericData(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6032, ""
        )

    code = 6032
    name = "InvalidGenericData"
    msg = ""
class NoChainlinkReportData(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6033, ""
        )

    code = 6033
    name = "NoChainlinkReportData"
    msg = ""
class InvalidChainlinkReportData(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6034, ""
        )

    code = 6034
    name = "InvalidChainlinkReportData"
    msg = ""
class MostRecentOfInvalidSourceIndices(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6035, ""
        )

    code = 6035
    name = "MostRecentOfInvalidSourceIndices"
    msg = ""
class MostRecentOfInvalidMaxDivergence(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6036, ""
        )

    code = 6036
    name = "MostRecentOfInvalidMaxDivergence"
    msg = ""
class MostRecentOfInvalidMaxAge(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6037, ""
        )

    code = 6037
    name = "MostRecentOfInvalidMaxAge"
    msg = ""
class MostRecentOfMaxAgeViolated(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6038, ""
        )

    code = 6038
    name = "MostRecentOfMaxAgeViolated"
    msg = ""
class MostRecentOfMaxDivergenceBpsViolated(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6039, ""
        )

    code = 6039
    name = "MostRecentOfMaxDivergenceBpsViolated"
    msg = ""
class PythLazerVerifyIxFailed(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6040, ""
        )

    code = 6040
    name = "PythLazerVerifyIxFailed"
    msg = ""
class PythLazerInvalidFeedID(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6041, ""
        )

    code = 6041
    name = "PythLazerInvalidFeedID"
    msg = ""
class PythLazerInvalidExponent(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6042, ""
        )

    code = 6042
    name = "PythLazerInvalidExponent"
    msg = ""
class PythLazerInvalidConfidenceFactor(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6043, ""
        )

    code = 6043
    name = "PythLazerInvalidConfidenceFactor"
    msg = ""
class PythLazerInvalidMessagePayload(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6044, ""
        )

    code = 6044
    name = "PythLazerInvalidMessagePayload"
    msg = ""
class PythLazerInvalidChannel(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6045, ""
        )

    code = 6045
    name = "PythLazerInvalidChannel"
    msg = ""
class PythLazerInvalidFeedsLength(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6046, ""
        )

    code = 6046
    name = "PythLazerInvalidFeedsLength"
    msg = ""
class PythLazerInvalidFeedId(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6047, ""
        )

    code = 6047
    name = "PythLazerInvalidFeedId"
    msg = ""
class PythLazerPriceNotPresent(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6048, ""
        )

    code = 6048
    name = "PythLazerPriceNotPresent"
    msg = ""
class PythLazerBestBidPriceNotPresent(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6049, ""
        )

    code = 6049
    name = "PythLazerBestBidPriceNotPresent"
    msg = ""
class PythLazerBestAskPriceNotPresent(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6050, ""
        )

    code = 6050
    name = "PythLazerBestAskPriceNotPresent"
    msg = ""
class PythLazerInvalidAskBidPrices(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6051, ""
        )

    code = 6051
    name = "PythLazerInvalidAskBidPrices"
    msg = ""

CustomError = typing.Union[
    IntegerOverflow,
    ConversionFailure,
    MathOverflow,
    OutOfRangeIntegralConversion,
    UnexpectedAccount,
    PriceNotValid,
    AccountsAndTokenMismatch,
    BadTokenNb,
    BadTokenType,
    SwitchboardV2Error,
    InvalidAccountDiscriminator,
    UnableToDeserializeAccount,
    BadScopeChainOrPrices,
    RefreshInCPI,
    RefreshWithUnexpectedIxs,
    InvalidTokenUpdateMode,
    UnableToDerivePDA,
    BadTimestamp,
    BadSlot,
    PriceAccountNotExpected,
    TwapSourceIndexOutOfRange,
    TwapSampleTooFrequent,
    UnexpectedJlpConfiguration,
    TwapNotEnoughSamplesInPeriod,
    EmptyTokenList,
    StakeFeeTooHigh,
    KTokenUnderlyingPriceNotValid,
    KTokenHoldingsCalculationError,
    CannotResizeAccount,
    FixedPriceInvalid,
    SwitchboardOnDemandError,
    ConfidenceIntervalCheckFailed,
    InvalidGenericData,
    NoChainlinkReportData,
    InvalidChainlinkReportData,
    MostRecentOfInvalidSourceIndices,
    MostRecentOfInvalidMaxDivergence,
    MostRecentOfInvalidMaxAge,
    MostRecentOfMaxAgeViolated,
    MostRecentOfMaxDivergenceBpsViolated,
    PythLazerVerifyIxFailed,
    PythLazerInvalidFeedID,
    PythLazerInvalidExponent,
    PythLazerInvalidConfidenceFactor,
    PythLazerInvalidMessagePayload,
    PythLazerInvalidChannel,
    PythLazerInvalidFeedsLength,
    PythLazerInvalidFeedId,
    PythLazerPriceNotPresent,
    PythLazerBestBidPriceNotPresent,
    PythLazerBestAskPriceNotPresent,
    PythLazerInvalidAskBidPrices,
 ]
CUSTOM_ERROR_MAP: dict[int, CustomError] = {
    6000: IntegerOverflow(),
    6001: ConversionFailure(),
    6002: MathOverflow(),
    6003: OutOfRangeIntegralConversion(),
    6004: UnexpectedAccount(),
    6005: PriceNotValid(),
    6006: AccountsAndTokenMismatch(),
    6007: BadTokenNb(),
    6008: BadTokenType(),
    6009: SwitchboardV2Error(),
    6010: InvalidAccountDiscriminator(),
    6011: UnableToDeserializeAccount(),
    6012: BadScopeChainOrPrices(),
    6013: RefreshInCPI(),
    6014: RefreshWithUnexpectedIxs(),
    6015: InvalidTokenUpdateMode(),
    6016: UnableToDerivePDA(),
    6017: BadTimestamp(),
    6018: BadSlot(),
    6019: PriceAccountNotExpected(),
    6020: TwapSourceIndexOutOfRange(),
    6021: TwapSampleTooFrequent(),
    6022: UnexpectedJlpConfiguration(),
    6023: TwapNotEnoughSamplesInPeriod(),
    6024: EmptyTokenList(),
    6025: StakeFeeTooHigh(),
    6026: KTokenUnderlyingPriceNotValid(),
    6027: KTokenHoldingsCalculationError(),
    6028: CannotResizeAccount(),
    6029: FixedPriceInvalid(),
    6030: SwitchboardOnDemandError(),
    6031: ConfidenceIntervalCheckFailed(),
    6032: InvalidGenericData(),
    6033: NoChainlinkReportData(),
    6034: InvalidChainlinkReportData(),
    6035: MostRecentOfInvalidSourceIndices(),
    6036: MostRecentOfInvalidMaxDivergence(),
    6037: MostRecentOfInvalidMaxAge(),
    6038: MostRecentOfMaxAgeViolated(),
    6039: MostRecentOfMaxDivergenceBpsViolated(),
    6040: PythLazerVerifyIxFailed(),
    6041: PythLazerInvalidFeedID(),
    6042: PythLazerInvalidExponent(),
    6043: PythLazerInvalidConfidenceFactor(),
    6044: PythLazerInvalidMessagePayload(),
    6045: PythLazerInvalidChannel(),
    6046: PythLazerInvalidFeedsLength(),
    6047: PythLazerInvalidFeedId(),
    6048: PythLazerPriceNotPresent(),
    6049: PythLazerBestBidPriceNotPresent(),
    6050: PythLazerBestAskPriceNotPresent(),
    6051: PythLazerInvalidAskBidPrices(),
}

def from_code(code: int) -> typing.Optional[CustomError]:
    maybe_err = CUSTOM_ERROR_MAP.get(code)
    if maybe_err is None:
        return None
    return maybe_err

