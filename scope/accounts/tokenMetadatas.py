'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from anchorpy.error import AccountInvalidDiscriminator
from anchorpy.utils.rpc import get_multiple_accounts
from dataclasses import dataclass
from solana.rpc.async_api import AsyncClient
from solana.rpc.commitment import Commitment
from solders.pubkey import Pubkey as SolPubkey
from .. import types
from ..program_id import PROGRAM_ID


class TokenMetadatasJSON(typing.TypedDict):
    metadatasArray: list[types.tokenMetadata.TokenMetadataJSON]

@dataclass
class TokenMetadatas:
    #fields
    metadatasArray: list[types.tokenMetadata.TokenMetadata]

    discriminator: typing.ClassVar = b"\xdd\x6b\x40\x67\x43\x00\xa5\x16"
    DISCRIMINATOR_SIZE: int = 8

    layout: typing.ClassVar = borsh.CStruct(
        "metadatasArray" /types.tokenMetadata.TokenMetadata.layout[512],
        )



    @classmethod
    async def fetch(
        cls,
        conn: AsyncClient,
        address: SolPubkey,
        commitment: typing.Optional[Commitment] = None,
        program_id: SolPubkey = PROGRAM_ID,
    ) -> typing.Optional["TokenMetadatas"]:
        resp = await conn.get_account_info(address, commitment=commitment)
        info = resp.value
        if info is None:
            return None
        if info.owner != program_id:
            raise ValueError("Account does not belong to this program")
        bytes_data = info.data
        return cls.decode(bytes_data)

    @classmethod
    async def fetch_multiple(
        cls,
        conn: AsyncClient,
        addresses: list[SolPubkey],
        commitment: typing.Optional[Commitment] = None,
        program_id: SolPubkey = PROGRAM_ID,
    ) -> typing.List[typing.Optional["TokenMetadatas"]]:
        infos = await get_multiple_accounts(conn, addresses, commitment=commitment)
        res: typing.List[typing.Optional["TokenMetadatas"]] = []
        for info in infos:
            if info is None:
                res.append(None)
                continue
            if info.account.owner != program_id:
                raise ValueError("Account does not belong to this program")
            res.append(cls.decode(info.account.data))
        return res

    @classmethod
    def decode(cls, data: bytes) -> "TokenMetadatas":
        if data[:cls.DISCRIMINATOR_SIZE] != cls.discriminator:
            raise AccountInvalidDiscriminator(
                "The discriminator for this account is invalid"
            )
        dec = TokenMetadatas.layout.parse(data[cls.DISCRIMINATOR_SIZE:])
        return cls(
                metadatasArray=dec.metadatasArray,
                )

    def to_json(self) -> TokenMetadatasJSON:
        return {
                "metadatasArray": list(map(lambda item:item.to_json(),self.metadatasArray)),
                }

    @classmethod
    def from_json(cls, obj: TokenMetadatasJSON) -> "TokenMetadatas":
        return cls(
                metadatasArray=list(map(lambda item:types.tokenMetadata.TokenMetadata.from_json(item),obj["metadatasArray"])),
                )




