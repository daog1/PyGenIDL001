'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey;
from anchorpy.coder.accounts import ACCOUNT_DISCRIMINATOR_SIZE;
from anchorpy.error import AccountInvalidDiscriminator;
from anchorpy.utils.rpc import get_multiple_accounts;
from dataclasses import dataclass;
from solana.rpc.async_api import AsyncClient;
from solana.rpc.commitment import Commitment;
from solana.rpc.types import MemcmpOpts;
from solders.pubkey import Pubkey as SolPubkey;
from ..program_id import PROGRAM_ID;


class ConfigurationJSON(typing.TypedDict):
    admin: str
    oracleMappings: str
    oraclePrices: str
    tokensMetadata: str
    oracleTwaps: str
    adminCached: str
    padding: list[int]

@dataclass
class Configuration:
    discriminator: typing.ClassVar = b"\xc0\x4f\xac\x1e\x15\xad\x19\x2b";

    layout: typing.ClassVar = borsh.CStruct(
        "admin" /BorshPubkey,
        "oracleMappings" /BorshPubkey,
        "oraclePrices" /BorshPubkey,
        "tokensMetadata" /BorshPubkey,
        "oracleTwaps" /BorshPubkey,
        "adminCached" /BorshPubkey,
        "padding" /borsh.U64[1255],
        )
    #fields
    admin: SolPubkey
    oracleMappings: SolPubkey
    oraclePrices: SolPubkey
    tokensMetadata: SolPubkey
    oracleTwaps: SolPubkey
    adminCached: SolPubkey
    padding: list[int]
    

    @classmethod
    async def fetch(
        cls,
        conn: AsyncClient,
        address: SolPubkey,
        commitment: typing.Optional[Commitment] = None,
        program_id: SolPubkey = PROGRAM_ID,
    ) -> typing.Optional["Configuration"]:
        resp = await conn.get_account_info(address, commitment=commitment)
        info = resp.value
        if info is None:
            return None
        if info.owner != program_id:
            raise ValueError("Account does not belong to this program")
        bytes_data = info.data
        return cls.decode(bytes_data)

    @classmethod
    async def fetch_multiple(
        cls,
        conn: AsyncClient,
        addresses: list[SolPubkey],
        commitment: typing.Optional[Commitment] = None,
        program_id: SolPubkey = PROGRAM_ID,
    ) -> typing.List[typing.Optional["Configuration"]]:
        infos = await get_multiple_accounts(conn, addresses, commitment=commitment)
        res: typing.List[typing.Optional["Configuration"]] = []
        for info in infos:
            if info is None:
                res.append(None)
                continue
            if info.account.owner != program_id:
                raise ValueError("Account does not belong to this program")
            res.append(cls.decode(info.account.data))
        return res

    @classmethod
    def decode(cls, data: bytes) -> "Configuration":
        if data[:ACCOUNT_DISCRIMINATOR_SIZE] != cls.discriminator:
            raise AccountInvalidDiscriminator(
                "The discriminator for this account is invalid"
            )
        dec = Configuration.layout.parse(data[ACCOUNT_DISCRIMINATOR_SIZE:])
        return cls(
                admin=dec.admin,
                oracleMappings=dec.oracleMappings,
                oraclePrices=dec.oraclePrices,
                tokensMetadata=dec.tokensMetadata,
                oracleTwaps=dec.oracleTwaps,
                adminCached=dec.adminCached,
                padding=dec.padding,
                )

    def to_json(self) -> ConfigurationJSON:
        return {
                "admin": str(self.admin),
                "oracleMappings": str(self.oracleMappings),
                "oraclePrices": str(self.oraclePrices),
                "tokensMetadata": str(self.tokensMetadata),
                "oracleTwaps": str(self.oracleTwaps),
                "adminCached": str(self.adminCached),
                "padding": self.padding,
                }

    @classmethod
    def from_json(cls, obj: ConfigurationJSON) -> "Configuration":
        return cls(
                admin=SolPubkey.from_string(obj["admin"]),
                oracleMappings=SolPubkey.from_string(obj["oracleMappings"]),
                oraclePrices=SolPubkey.from_string(obj["oraclePrices"]),
                tokensMetadata=SolPubkey.from_string(obj["tokensMetadata"]),
                oracleTwaps=SolPubkey.from_string(obj["oracleTwaps"]),
                adminCached=SolPubkey.from_string(obj["adminCached"]),
                padding=obj["padding"],
                )




