'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey;
from anchorpy.error import AccountInvalidDiscriminator;
from anchorpy.utils.rpc import get_multiple_accounts;
from dataclasses import dataclass;
from solana.rpc.async_api import AsyncClient;
from solana.rpc.commitment import Commitment;
from solana.rpc.types import MemcmpOpts;
from solders.pubkey import Pubkey as SolPubkey;
from ..program_id import PROGRAM_ID;


class OracleMappingsJSON(typing.TypedDict):
    priceInfoAccounts: list[str]
    priceTypes: list[int]
    twapSource: list[int]
    twapEnabled: list[int]
    refPrice: list[int]
    generic: list[list[int]]

@dataclass
class OracleMappings:
    discriminator: typing.ClassVar = b"\x28\xf4\x6e\x50\xff\xd6\xf3\xbc"
    DISCRIMINATOR_SIZE: int = 8

    layout: typing.ClassVar = borsh.CStruct(
        "priceInfoAccounts" /BorshPubkey[512],
        "priceTypes" /borsh.U8[512],
        "twapSource" /borsh.U16[512],
        "twapEnabled" /borsh.U8[512],
        "refPrice" /borsh.U16[512],
        "generic" /borsh.U8[20][512],
        )
    #fields
    priceInfoAccounts: list[SolPubkey]
    priceTypes: list[int]
    twapSource: list[int]
    twapEnabled: list[int]
    refPrice: list[int]
    generic: list[list[int]]
    

    @classmethod
    async def fetch(
        cls,
        conn: AsyncClient,
        address: SolPubkey,
        commitment: typing.Optional[Commitment] = None,
        program_id: SolPubkey = PROGRAM_ID,
    ) -> typing.Optional["OracleMappings"]:
        resp = await conn.get_account_info(address, commitment=commitment)
        info = resp.value
        if info is None:
            return None
        if info.owner != program_id:
            raise ValueError("Account does not belong to this program")
        bytes_data = info.data
        return cls.decode(bytes_data)

    @classmethod
    async def fetch_multiple(
        cls,
        conn: AsyncClient,
        addresses: list[SolPubkey],
        commitment: typing.Optional[Commitment] = None,
        program_id: SolPubkey = PROGRAM_ID,
    ) -> typing.List[typing.Optional["OracleMappings"]]:
        infos = await get_multiple_accounts(conn, addresses, commitment=commitment)
        res: typing.List[typing.Optional["OracleMappings"]] = []
        for info in infos:
            if info is None:
                res.append(None)
                continue
            if info.account.owner != program_id:
                raise ValueError("Account does not belong to this program")
            res.append(cls.decode(info.account.data))
        return res

    @classmethod
    def decode(cls, data: bytes) -> "OracleMappings":
        if data[:cls.DISCRIMINATOR_SIZE] != cls.discriminator:
            raise AccountInvalidDiscriminator(
                "The discriminator for this account is invalid"
            )
        dec = OracleMappings.layout.parse(data[cls.DISCRIMINATOR_SIZE:])
        return cls(
                priceInfoAccounts=dec.priceInfoAccounts,
                priceTypes=dec.priceTypes,
                twapSource=dec.twapSource,
                twapEnabled=dec.twapEnabled,
                refPrice=dec.refPrice,
                generic=dec.generic,
                )

    def to_json(self) -> OracleMappingsJSON:
        return {
                "priceInfoAccounts": list(map(lambda item:str(item),self.priceInfoAccounts)),
                "priceTypes": self.priceTypes,
                "twapSource": self.twapSource,
                "twapEnabled": self.twapEnabled,
                "refPrice": self.refPrice,
                "generic": self.generic,
                }

    @classmethod
    def from_json(cls, obj: OracleMappingsJSON) -> "OracleMappings":
        return cls(
                priceInfoAccounts=list(map(lambda item:SolPubkey.from_string(item),obj["priceInfoAccounts"])),
                priceTypes=obj["priceTypes"],
                twapSource=obj["twapSource"],
                twapEnabled=obj["twapEnabled"],
                refPrice=obj["refPrice"],
                generic=obj["generic"],
                )




