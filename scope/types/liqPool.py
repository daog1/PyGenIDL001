'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from anchorpy.borsh_extension import BorshPubkey
from construct import Container
from dataclasses import dataclass
from solders.pubkey import Pubkey as SolPubkey
from . import fee

class LiqPoolJSON(typing.TypedDict):
    lpMint: str
    lpMintAuthorityBumpSeed: int
    solLegBumpSeed: int
    msolLegAuthorityBumpSeed: int
    msolLeg: str
    lpLiquidityTarget: int
    lpMaxFee: fee.FeeJSON
    lpMinFee: fee.FeeJSON
    treasuryCut: fee.FeeJSON
    lpSupply: int
    lentFromSolLeg: int
    liquiditySolCap: int

@dataclass
class LiqPool:
    layout: typing.ClassVar = borsh.CStruct(
        "lpMint" /BorshPubkey,
        "lpMintAuthorityBumpSeed" /borsh.U8,
        "solLegBumpSeed" /borsh.U8,
        "msolLegAuthorityBumpSeed" /borsh.U8,
        "msolLeg" /BorshPubkey,
        "lpLiquidityTarget" /borsh.U64,
        "lpMaxFee" /fee.Fee.layout,
        "lpMinFee" /fee.Fee.layout,
        "treasuryCut" /fee.Fee.layout,
        "lpSupply" /borsh.U64,
        "lentFromSolLeg" /borsh.U64,
        "liquiditySolCap" /borsh.U64,
        )
    #fields
    lpMint: SolPubkey
    lpMintAuthorityBumpSeed: int
    solLegBumpSeed: int
    msolLegAuthorityBumpSeed: int
    msolLeg: SolPubkey
    lpLiquidityTarget: int
    lpMaxFee: fee.Fee
    lpMinFee: fee.Fee
    treasuryCut: fee.Fee
    lpSupply: int
    lentFromSolLeg: int
    liquiditySolCap: int
    
    @classmethod
    def from_decoded(cls, obj: Container) -> "LiqPool":
        return cls(
        lpMint=obj["lpMint"],
        lpMintAuthorityBumpSeed=obj["lpMintAuthorityBumpSeed"],
        solLegBumpSeed=obj["solLegBumpSeed"],
        msolLegAuthorityBumpSeed=obj["msolLegAuthorityBumpSeed"],
        msolLeg=obj["msolLeg"],
        lpLiquidityTarget=obj["lpLiquidityTarget"],
        lpMaxFee=fee.Fee.from_decoded(obj["lpMaxFee"]),
        lpMinFee=fee.Fee.from_decoded(obj["lpMinFee"]),
        treasuryCut=fee.Fee.from_decoded(obj["treasuryCut"]),
        lpSupply=obj["lpSupply"],
        lentFromSolLeg=obj["lentFromSolLeg"],
        liquiditySolCap=obj["liquiditySolCap"],
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
                "lpMint": self.lpMint,
                "lpMintAuthorityBumpSeed": self.lpMintAuthorityBumpSeed,
                "solLegBumpSeed": self.solLegBumpSeed,
                "msolLegAuthorityBumpSeed": self.msolLegAuthorityBumpSeed,
                "msolLeg": self.msolLeg,
                "lpLiquidityTarget": self.lpLiquidityTarget,
                "lpMaxFee": self.lpMaxFee.to_encodable(),
                "lpMinFee": self.lpMinFee.to_encodable(),
                "treasuryCut": self.treasuryCut.to_encodable(),
                "lpSupply": self.lpSupply,
                "lentFromSolLeg": self.lentFromSolLeg,
                "liquiditySolCap": self.liquiditySolCap,
                }

    def to_json(self) -> LiqPoolJSON:
        return {
                "lpMint": str(self.lpMint),
                "lpMintAuthorityBumpSeed": self.lpMintAuthorityBumpSeed,
                "solLegBumpSeed": self.solLegBumpSeed,
                "msolLegAuthorityBumpSeed": self.msolLegAuthorityBumpSeed,
                "msolLeg": str(self.msolLeg),
                "lpLiquidityTarget": self.lpLiquidityTarget,
                "lpMaxFee": self.lpMaxFee.to_json(),
                "lpMinFee": self.lpMinFee.to_json(),
                "treasuryCut": self.treasuryCut.to_json(),
                "lpSupply": self.lpSupply,
                "lentFromSolLeg": self.lentFromSolLeg,
                "liquiditySolCap": self.liquiditySolCap,
                }

    @classmethod
    def from_json(cls, obj: LiqPoolJSON) -> "LiqPool":
        return cls(
                lpMint=SolPubkey.from_string(obj["lpMint"]),
                lpMintAuthorityBumpSeed=obj["lpMintAuthorityBumpSeed"],
                solLegBumpSeed=obj["solLegBumpSeed"],
                msolLegAuthorityBumpSeed=obj["msolLegAuthorityBumpSeed"],
                msolLeg=SolPubkey.from_string(obj["msolLeg"]),
                lpLiquidityTarget=obj["lpLiquidityTarget"],
                lpMaxFee=fee.Fee.from_json(obj["lpMaxFee"]),
                lpMinFee=fee.Fee.from_json(obj["lpMinFee"]),
                treasuryCut=fee.Fee.from_json(obj["treasuryCut"]),
                lpSupply=obj["lpSupply"],
                lentFromSolLeg=obj["lentFromSolLeg"],
                liquiditySolCap=obj["liquiditySolCap"],
        )






