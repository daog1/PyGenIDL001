'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey as SolPubkey;
from solders.sysvar import RENT;

class EmaTwapJSON(typing.TypedDict):
    lastUpdateSlot: int
    lastUpdateUnixTimestamp: int
    currentEma1h: int
    updatesTracker1h: int
    padding0: int
    padding1: list[int]

@dataclass
class EmaTwap:
    layout: typing.ClassVar = borsh.CStruct(
        "lastUpdateSlot" /borsh.U64,
        "lastUpdateUnixTimestamp" /borsh.U64,
        "currentEma1h" /borsh.U128,
        "updatesTracker1h" /borsh.U64,
        "padding0" /borsh.U64,
        "padding1" /borsh.U128[39],
        )
    #fields
    lastUpdateSlot: int
    lastUpdateUnixTimestamp: int
    currentEma1h: int
    updatesTracker1h: int
    padding0: int
    padding1: list[int]
    
    @classmethod
    def from_decoded(cls, obj: Container) -> "EmaTwap":
        return cls(
        lastUpdateSlot=obj["lastUpdateSlot"],
        lastUpdateUnixTimestamp=obj["lastUpdateUnixTimestamp"],
        currentEma1h=obj["currentEma1h"],
        updatesTracker1h=obj["updatesTracker1h"],
        padding0=obj["padding0"],
        padding1=obj["padding1"],
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
                "lastUpdateSlot": self.lastUpdateSlot,
                "lastUpdateUnixTimestamp": self.lastUpdateUnixTimestamp,
                "currentEma1h": self.currentEma1h,
                "updatesTracker1h": self.updatesTracker1h,
                "padding0": self.padding0,
                "padding1": self.padding1,
                }

    def to_json(self) -> EmaTwapJSON:
        return {
                "lastUpdateSlot": self.lastUpdateSlot,
                "lastUpdateUnixTimestamp": self.lastUpdateUnixTimestamp,
                "currentEma1h": self.currentEma1h,
                "updatesTracker1h": self.updatesTracker1h,
                "padding0": self.padding0,
                "padding1": self.padding1,
                }

    @classmethod
    def from_json(cls, obj: EmaTwapJSON) -> "EmaTwap":
        return cls(
                lastUpdateSlot=obj["lastUpdateSlot"],
                lastUpdateUnixTimestamp=obj["lastUpdateUnixTimestamp"],
                currentEma1h=obj["currentEma1h"],
                updatesTracker1h=obj["updatesTracker1h"],
                padding0=obj["padding0"],
                padding1=obj["padding1"],
        )






