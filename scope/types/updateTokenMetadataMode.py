'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey, EnumForCodegen;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey as SolPubkey;


class NameJSON(typing.TypedDict):
    kind: typing.Literal["Name"]


@dataclass
class Name:
    discriminator: typing.ClassVar = 0
    def to_json(self) -> NameJSON:
        return NameJSON(
            kind="Name",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "Name": {},
        }




class MaxPriceAgeSlotsJSON(typing.TypedDict):
    kind: typing.Literal["MaxPriceAgeSlots"]


@dataclass
class MaxPriceAgeSlots:
    discriminator: typing.ClassVar = 1
    def to_json(self) -> MaxPriceAgeSlotsJSON:
        return MaxPriceAgeSlotsJSON(
            kind="MaxPriceAgeSlots",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "MaxPriceAgeSlots": {},
        }




class GroupIdsJSON(typing.TypedDict):
    kind: typing.Literal["GroupIds"]


@dataclass
class GroupIds:
    discriminator: typing.ClassVar = 2
    def to_json(self) -> GroupIdsJSON:
        return GroupIdsJSON(
            kind="GroupIds",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "GroupIds": {},
        }





UpdateTokenMetadataModeKind = typing.Union[
    Name,
    MaxPriceAgeSlots,
    GroupIds,
]
UpdateTokenMetadataModeJSON = typing.Union[
    NameJSON,
    MaxPriceAgeSlotsJSON,
    GroupIdsJSON,
]

def from_decoded(obj: dict) -> UpdateTokenMetadataModeKind:
    if not isinstance(obj, dict):
        raise ValueError("Invalid enum object")
    if "Name" in obj:
      return Name()
    if "MaxPriceAgeSlots" in obj:
      return MaxPriceAgeSlots()
    if "GroupIds" in obj:
      return GroupIds()
    raise ValueError("Invalid enum object")

def from_json(obj: UpdateTokenMetadataModeJSON) -> UpdateTokenMetadataModeKind:
    if obj["kind"] == "Name":
        return Name()

    if obj["kind"] == "MaxPriceAgeSlots":
        return MaxPriceAgeSlots()

    if obj["kind"] == "GroupIds":
        return GroupIds()

    kind = obj["kind"]
    raise ValueError(f"Unrecognized enum kind: {kind}")

layout = EnumForCodegen(
"Name" / borsh.CStruct(),
"MaxPriceAgeSlots" / borsh.CStruct(),
"GroupIds" / borsh.CStruct(),
)
