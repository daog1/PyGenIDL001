'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey as SolPubkey;

class PythLazerDataJSON(typing.TypedDict):
    feedId: int
    exponent: int
    confidenceFactor: int

@dataclass
class PythLazerData:
    layout: typing.ClassVar = borsh.CStruct(
        "feedId" /borsh.U16,
        "exponent" /borsh.U8,
        "confidenceFactor" /borsh.U32,
        )
    #fields
    feedId: int
    exponent: int
    confidenceFactor: int
    
    @classmethod
    def from_decoded(cls, obj: Container) -> "PythLazerData":
        return cls(
        feedId=obj["feedId"],
        exponent=obj["exponent"],
        confidenceFactor=obj["confidenceFactor"],
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
                "feedId": self.feedId,
                "exponent": self.exponent,
                "confidenceFactor": self.confidenceFactor,
                }

    def to_json(self) -> PythLazerDataJSON:
        return {
                "feedId": self.feedId,
                "exponent": self.exponent,
                "confidenceFactor": self.confidenceFactor,
                }

    @classmethod
    def from_json(cls, obj: PythLazerDataJSON) -> "PythLazerData":
        return cls(
                feedId=obj["feedId"],
                exponent=obj["exponent"],
                confidenceFactor=obj["confidenceFactor"],
        )






