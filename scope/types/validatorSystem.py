'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey as SolPubkey;
from solders.sysvar import RENT;
from . import list;

class ValidatorSystemJSON(typing.TypedDict):
    validatorList: list.ListJSON
    managerAuthority: str
    totalValidatorScore: int
    totalActiveBalance: int
    autoAddValidatorEnabled: int

@dataclass
class ValidatorSystem:
    layout: typing.ClassVar = borsh.CStruct(
        "validatorList" /list.List.layout,
        "managerAuthority" /BorshPubkey,
        "totalValidatorScore" /borsh.U32,
        "totalActiveBalance" /borsh.U64,
        "autoAddValidatorEnabled" /borsh.U8,
        )
    #fields
    validatorList: list.List
    managerAuthority: SolPubkey
    totalValidatorScore: int
    totalActiveBalance: int
    autoAddValidatorEnabled: int
    
    @classmethod
    def from_decoded(cls, obj: Container) -> "ValidatorSystem":
        return cls(
        validatorList=list.List.from_decoded(obj["validatorList"]),
        managerAuthority=obj["managerAuthority"],
        totalValidatorScore=obj["totalValidatorScore"],
        totalActiveBalance=obj["totalActiveBalance"],
        autoAddValidatorEnabled=obj["autoAddValidatorEnabled"],
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
                "validatorList": self.validatorList.to_encodable(),
                "managerAuthority": self.managerAuthority,
                "totalValidatorScore": self.totalValidatorScore,
                "totalActiveBalance": self.totalActiveBalance,
                "autoAddValidatorEnabled": self.autoAddValidatorEnabled,
                }

    def to_json(self) -> ValidatorSystemJSON:
        return {
                "validatorList": self.validatorList.to_json(),
                "managerAuthority": str(self.managerAuthority),
                "totalValidatorScore": self.totalValidatorScore,
                "totalActiveBalance": self.totalActiveBalance,
                "autoAddValidatorEnabled": self.autoAddValidatorEnabled,
                }

    @classmethod
    def from_json(cls, obj: ValidatorSystemJSON) -> "ValidatorSystem":
        return cls(
                validatorList=list.List.from_json(obj["validatorList"]),
                managerAuthority=SolPubkey.from_string(obj["managerAuthority"]),
                totalValidatorScore=obj["totalValidatorScore"],
                totalActiveBalance=obj["totalActiveBalance"],
                autoAddValidatorEnabled=obj["autoAddValidatorEnabled"],
        )






