'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey, EnumForCodegen;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey as SolPubkey;
from solders.sysvar import RENT;


class Ema1hJSON(typing.TypedDict):
    kind: typing.Literal["Ema1h"]


@dataclass
class Ema1h:
    discriminator: typing.ClassVar = 0
    def to_json(self) -> Ema1hJSON:
        return Ema1hJSON(
            kind="Ema1h",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "Ema1h": {},
        }





EmaTypeKind = typing.Union[
    Ema1h,
]
EmaTypeJSON = typing.Union[
    Ema1hJSON,
]

def from_decoded(obj: dict) -> EmaTypeKind:
    if not isinstance(obj, dict):
        raise ValueError("Invalid enum object")
    if "Ema1h" in obj:
      return Ema1h()
    raise ValueError("Invalid enum object")

def from_json(obj: EmaTypeJSON) -> EmaTypeKind:
    if obj["kind"] == "Ema1h":
        return Ema1h()

    kind = obj["kind"]
    raise ValueError(f"Unrecognized enum kind: {kind}")

layout = EnumForCodegen(
"Ema1h" / borsh.CStruct(),
)
