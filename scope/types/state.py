'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey as SolPubkey;
from solders.sysvar import RENT;
from . import fee, liqPool, stakeSystem, validatorSystem;

class StateJSON(typing.TypedDict):
    msolMint: str
    adminAuthority: str
    operationalSolAccount: str
    treasuryMsolAccount: str
    reserveBumpSeed: int
    msolMintAuthorityBumpSeed: int
    rentExemptForTokenAcc: int
    rewardFee: fee.FeeJSON
    stakeSystem: stakeSystem.StakeSystemJSON
    validatorSystem: validatorSystem.ValidatorSystemJSON
    liqPool: liqPool.LiqPoolJSON
    availableReserveBalance: int
    msolSupply: int
    msolPrice: int
    circulatingTicketCount: int
    circulatingTicketBalance: int
    lentFromReserve: int
    minDeposit: int
    minWithdraw: int
    stakingSolCap: int
    emergencyCoolingDown: int

@dataclass
class State:
    layout: typing.ClassVar = borsh.CStruct(
        "msolMint" /BorshPubkey,
        "adminAuthority" /BorshPubkey,
        "operationalSolAccount" /BorshPubkey,
        "treasuryMsolAccount" /BorshPubkey,
        "reserveBumpSeed" /borsh.U8,
        "msolMintAuthorityBumpSeed" /borsh.U8,
        "rentExemptForTokenAcc" /borsh.U64,
        "rewardFee" /fee.Fee.layout,
        "stakeSystem" /stakeSystem.StakeSystem.layout,
        "validatorSystem" /validatorSystem.ValidatorSystem.layout,
        "liqPool" /liqPool.LiqPool.layout,
        "availableReserveBalance" /borsh.U64,
        "msolSupply" /borsh.U64,
        "msolPrice" /borsh.U64,
        "circulatingTicketCount" /borsh.U64,
        "circulatingTicketBalance" /borsh.U64,
        "lentFromReserve" /borsh.U64,
        "minDeposit" /borsh.U64,
        "minWithdraw" /borsh.U64,
        "stakingSolCap" /borsh.U64,
        "emergencyCoolingDown" /borsh.U64,
        )
    #fields
    msolMint: SolPubkey
    adminAuthority: SolPubkey
    operationalSolAccount: SolPubkey
    treasuryMsolAccount: SolPubkey
    reserveBumpSeed: int
    msolMintAuthorityBumpSeed: int
    rentExemptForTokenAcc: int
    rewardFee: fee.Fee
    stakeSystem: stakeSystem.StakeSystem
    validatorSystem: validatorSystem.ValidatorSystem
    liqPool: liqPool.LiqPool
    availableReserveBalance: int
    msolSupply: int
    msolPrice: int
    circulatingTicketCount: int
    circulatingTicketBalance: int
    lentFromReserve: int
    minDeposit: int
    minWithdraw: int
    stakingSolCap: int
    emergencyCoolingDown: int
    
    @classmethod
    def from_decoded(cls, obj: Container) -> "State":
        return cls(
        msolMint=obj["msolMint"],
        adminAuthority=obj["adminAuthority"],
        operationalSolAccount=obj["operationalSolAccount"],
        treasuryMsolAccount=obj["treasuryMsolAccount"],
        reserveBumpSeed=obj["reserveBumpSeed"],
        msolMintAuthorityBumpSeed=obj["msolMintAuthorityBumpSeed"],
        rentExemptForTokenAcc=obj["rentExemptForTokenAcc"],
        rewardFee=fee.Fee.from_decoded(obj["rewardFee"]),
        stakeSystem=stakeSystem.StakeSystem.from_decoded(obj["stakeSystem"]),
        validatorSystem=validatorSystem.ValidatorSystem.from_decoded(obj["validatorSystem"]),
        liqPool=liqPool.LiqPool.from_decoded(obj["liqPool"]),
        availableReserveBalance=obj["availableReserveBalance"],
        msolSupply=obj["msolSupply"],
        msolPrice=obj["msolPrice"],
        circulatingTicketCount=obj["circulatingTicketCount"],
        circulatingTicketBalance=obj["circulatingTicketBalance"],
        lentFromReserve=obj["lentFromReserve"],
        minDeposit=obj["minDeposit"],
        minWithdraw=obj["minWithdraw"],
        stakingSolCap=obj["stakingSolCap"],
        emergencyCoolingDown=obj["emergencyCoolingDown"],
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
                "msolMint": self.msolMint,
                "adminAuthority": self.adminAuthority,
                "operationalSolAccount": self.operationalSolAccount,
                "treasuryMsolAccount": self.treasuryMsolAccount,
                "reserveBumpSeed": self.reserveBumpSeed,
                "msolMintAuthorityBumpSeed": self.msolMintAuthorityBumpSeed,
                "rentExemptForTokenAcc": self.rentExemptForTokenAcc,
                "rewardFee": self.rewardFee.to_encodable(),
                "stakeSystem": self.stakeSystem.to_encodable(),
                "validatorSystem": self.validatorSystem.to_encodable(),
                "liqPool": self.liqPool.to_encodable(),
                "availableReserveBalance": self.availableReserveBalance,
                "msolSupply": self.msolSupply,
                "msolPrice": self.msolPrice,
                "circulatingTicketCount": self.circulatingTicketCount,
                "circulatingTicketBalance": self.circulatingTicketBalance,
                "lentFromReserve": self.lentFromReserve,
                "minDeposit": self.minDeposit,
                "minWithdraw": self.minWithdraw,
                "stakingSolCap": self.stakingSolCap,
                "emergencyCoolingDown": self.emergencyCoolingDown,
                }

    def to_json(self) -> StateJSON:
        return {
                "msolMint": str(self.msolMint),
                "adminAuthority": str(self.adminAuthority),
                "operationalSolAccount": str(self.operationalSolAccount),
                "treasuryMsolAccount": str(self.treasuryMsolAccount),
                "reserveBumpSeed": self.reserveBumpSeed,
                "msolMintAuthorityBumpSeed": self.msolMintAuthorityBumpSeed,
                "rentExemptForTokenAcc": self.rentExemptForTokenAcc,
                "rewardFee": self.rewardFee.to_json(),
                "stakeSystem": self.stakeSystem.to_json(),
                "validatorSystem": self.validatorSystem.to_json(),
                "liqPool": self.liqPool.to_json(),
                "availableReserveBalance": self.availableReserveBalance,
                "msolSupply": self.msolSupply,
                "msolPrice": self.msolPrice,
                "circulatingTicketCount": self.circulatingTicketCount,
                "circulatingTicketBalance": self.circulatingTicketBalance,
                "lentFromReserve": self.lentFromReserve,
                "minDeposit": self.minDeposit,
                "minWithdraw": self.minWithdraw,
                "stakingSolCap": self.stakingSolCap,
                "emergencyCoolingDown": self.emergencyCoolingDown,
                }

    @classmethod
    def from_json(cls, obj: StateJSON) -> "State":
        return cls(
                msolMint=SolPubkey.from_string(obj["msolMint"]),
                adminAuthority=SolPubkey.from_string(obj["adminAuthority"]),
                operationalSolAccount=SolPubkey.from_string(obj["operationalSolAccount"]),
                treasuryMsolAccount=SolPubkey.from_string(obj["treasuryMsolAccount"]),
                reserveBumpSeed=obj["reserveBumpSeed"],
                msolMintAuthorityBumpSeed=obj["msolMintAuthorityBumpSeed"],
                rentExemptForTokenAcc=obj["rentExemptForTokenAcc"],
                rewardFee=fee.Fee.from_json(obj["rewardFee"]),
                stakeSystem=stakeSystem.StakeSystem.from_json(obj["stakeSystem"]),
                validatorSystem=validatorSystem.ValidatorSystem.from_json(obj["validatorSystem"]),
                liqPool=liqPool.LiqPool.from_json(obj["liqPool"]),
                availableReserveBalance=obj["availableReserveBalance"],
                msolSupply=obj["msolSupply"],
                msolPrice=obj["msolPrice"],
                circulatingTicketCount=obj["circulatingTicketCount"],
                circulatingTicketBalance=obj["circulatingTicketBalance"],
                lentFromReserve=obj["lentFromReserve"],
                minDeposit=obj["minDeposit"],
                minWithdraw=obj["minWithdraw"],
                stakingSolCap=obj["stakingSolCap"],
                emergencyCoolingDown=obj["emergencyCoolingDown"],
        )






