'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from anchorpy.borsh_extension import EnumForCodegen
from dataclasses import dataclass


class PythJSON(typing.TypedDict):
    kind: typing.Literal["Pyth"]


@dataclass
class Pyth:
    discriminator: typing.ClassVar = 0
    def to_json(self) -> PythJSON:
        return PythJSON(
            kind="Pyth",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "Pyth": {},
        }




class DeprecatedPlaceholder1JSON(typing.TypedDict):
    kind: typing.Literal["DeprecatedPlaceholder1"]


@dataclass
class DeprecatedPlaceholder1:
    discriminator: typing.ClassVar = 1
    def to_json(self) -> DeprecatedPlaceholder1JSON:
        return DeprecatedPlaceholder1JSON(
            kind="DeprecatedPlaceholder1",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "DeprecatedPlaceholder1": {},
        }




class SwitchboardV2JSON(typing.TypedDict):
    kind: typing.Literal["SwitchboardV2"]


@dataclass
class SwitchboardV2:
    discriminator: typing.ClassVar = 2
    def to_json(self) -> SwitchboardV2JSON:
        return SwitchboardV2JSON(
            kind="SwitchboardV2",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "SwitchboardV2": {},
        }




class DeprecatedPlaceholder2JSON(typing.TypedDict):
    kind: typing.Literal["DeprecatedPlaceholder2"]


@dataclass
class DeprecatedPlaceholder2:
    discriminator: typing.ClassVar = 3
    def to_json(self) -> DeprecatedPlaceholder2JSON:
        return DeprecatedPlaceholder2JSON(
            kind="DeprecatedPlaceholder2",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "DeprecatedPlaceholder2": {},
        }




class CTokenJSON(typing.TypedDict):
    kind: typing.Literal["CToken"]


@dataclass
class CToken:
    discriminator: typing.ClassVar = 4
    def to_json(self) -> CTokenJSON:
        return CTokenJSON(
            kind="CToken",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "CToken": {},
        }




class SplStakeJSON(typing.TypedDict):
    kind: typing.Literal["SplStake"]


@dataclass
class SplStake:
    discriminator: typing.ClassVar = 5
    def to_json(self) -> SplStakeJSON:
        return SplStakeJSON(
            kind="SplStake",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "SplStake": {},
        }




class KTokenJSON(typing.TypedDict):
    kind: typing.Literal["KToken"]


@dataclass
class KToken:
    discriminator: typing.ClassVar = 6
    def to_json(self) -> KTokenJSON:
        return KTokenJSON(
            kind="KToken",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "KToken": {},
        }




class PythEMAJSON(typing.TypedDict):
    kind: typing.Literal["PythEMA"]


@dataclass
class PythEMA:
    discriminator: typing.ClassVar = 7
    def to_json(self) -> PythEMAJSON:
        return PythEMAJSON(
            kind="PythEMA",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "PythEMA": {},
        }




class MsolStakeJSON(typing.TypedDict):
    kind: typing.Literal["MsolStake"]


@dataclass
class MsolStake:
    discriminator: typing.ClassVar = 8
    def to_json(self) -> MsolStakeJSON:
        return MsolStakeJSON(
            kind="MsolStake",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "MsolStake": {},
        }




class KTokenToTokenAJSON(typing.TypedDict):
    kind: typing.Literal["KTokenToTokenA"]


@dataclass
class KTokenToTokenA:
    discriminator: typing.ClassVar = 9
    def to_json(self) -> KTokenToTokenAJSON:
        return KTokenToTokenAJSON(
            kind="KTokenToTokenA",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "KTokenToTokenA": {},
        }




class KTokenToTokenBJSON(typing.TypedDict):
    kind: typing.Literal["KTokenToTokenB"]


@dataclass
class KTokenToTokenB:
    discriminator: typing.ClassVar = 10
    def to_json(self) -> KTokenToTokenBJSON:
        return KTokenToTokenBJSON(
            kind="KTokenToTokenB",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "KTokenToTokenB": {},
        }




class JupiterLpFetchJSON(typing.TypedDict):
    kind: typing.Literal["JupiterLpFetch"]


@dataclass
class JupiterLpFetch:
    discriminator: typing.ClassVar = 11
    def to_json(self) -> JupiterLpFetchJSON:
        return JupiterLpFetchJSON(
            kind="JupiterLpFetch",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "JupiterLpFetch": {},
        }




class ScopeTwapJSON(typing.TypedDict):
    kind: typing.Literal["ScopeTwap"]


@dataclass
class ScopeTwap:
    discriminator: typing.ClassVar = 12
    def to_json(self) -> ScopeTwapJSON:
        return ScopeTwapJSON(
            kind="ScopeTwap",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "ScopeTwap": {},
        }




class OrcaWhirlpoolAtoBJSON(typing.TypedDict):
    kind: typing.Literal["OrcaWhirlpoolAtoB"]


@dataclass
class OrcaWhirlpoolAtoB:
    discriminator: typing.ClassVar = 13
    def to_json(self) -> OrcaWhirlpoolAtoBJSON:
        return OrcaWhirlpoolAtoBJSON(
            kind="OrcaWhirlpoolAtoB",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "OrcaWhirlpoolAtoB": {},
        }




class OrcaWhirlpoolBtoAJSON(typing.TypedDict):
    kind: typing.Literal["OrcaWhirlpoolBtoA"]


@dataclass
class OrcaWhirlpoolBtoA:
    discriminator: typing.ClassVar = 14
    def to_json(self) -> OrcaWhirlpoolBtoAJSON:
        return OrcaWhirlpoolBtoAJSON(
            kind="OrcaWhirlpoolBtoA",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "OrcaWhirlpoolBtoA": {},
        }




class RaydiumAmmV3AtoBJSON(typing.TypedDict):
    kind: typing.Literal["RaydiumAmmV3AtoB"]


@dataclass
class RaydiumAmmV3AtoB:
    discriminator: typing.ClassVar = 15
    def to_json(self) -> RaydiumAmmV3AtoBJSON:
        return RaydiumAmmV3AtoBJSON(
            kind="RaydiumAmmV3AtoB",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "RaydiumAmmV3AtoB": {},
        }




class RaydiumAmmV3BtoAJSON(typing.TypedDict):
    kind: typing.Literal["RaydiumAmmV3BtoA"]


@dataclass
class RaydiumAmmV3BtoA:
    discriminator: typing.ClassVar = 16
    def to_json(self) -> RaydiumAmmV3BtoAJSON:
        return RaydiumAmmV3BtoAJSON(
            kind="RaydiumAmmV3BtoA",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "RaydiumAmmV3BtoA": {},
        }




class JupiterLpComputeJSON(typing.TypedDict):
    kind: typing.Literal["JupiterLpCompute"]


@dataclass
class JupiterLpCompute:
    discriminator: typing.ClassVar = 17
    def to_json(self) -> JupiterLpComputeJSON:
        return JupiterLpComputeJSON(
            kind="JupiterLpCompute",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "JupiterLpCompute": {},
        }




class MeteoraDlmmAtoBJSON(typing.TypedDict):
    kind: typing.Literal["MeteoraDlmmAtoB"]


@dataclass
class MeteoraDlmmAtoB:
    discriminator: typing.ClassVar = 18
    def to_json(self) -> MeteoraDlmmAtoBJSON:
        return MeteoraDlmmAtoBJSON(
            kind="MeteoraDlmmAtoB",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "MeteoraDlmmAtoB": {},
        }




class MeteoraDlmmBtoAJSON(typing.TypedDict):
    kind: typing.Literal["MeteoraDlmmBtoA"]


@dataclass
class MeteoraDlmmBtoA:
    discriminator: typing.ClassVar = 19
    def to_json(self) -> MeteoraDlmmBtoAJSON:
        return MeteoraDlmmBtoAJSON(
            kind="MeteoraDlmmBtoA",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "MeteoraDlmmBtoA": {},
        }




class JupiterLpScopeJSON(typing.TypedDict):
    kind: typing.Literal["JupiterLpScope"]


@dataclass
class JupiterLpScope:
    discriminator: typing.ClassVar = 20
    def to_json(self) -> JupiterLpScopeJSON:
        return JupiterLpScopeJSON(
            kind="JupiterLpScope",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "JupiterLpScope": {},
        }




class PythPullJSON(typing.TypedDict):
    kind: typing.Literal["PythPull"]


@dataclass
class PythPull:
    discriminator: typing.ClassVar = 21
    def to_json(self) -> PythPullJSON:
        return PythPullJSON(
            kind="PythPull",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "PythPull": {},
        }




class PythPullEMAJSON(typing.TypedDict):
    kind: typing.Literal["PythPullEMA"]


@dataclass
class PythPullEMA:
    discriminator: typing.ClassVar = 22
    def to_json(self) -> PythPullEMAJSON:
        return PythPullEMAJSON(
            kind="PythPullEMA",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "PythPullEMA": {},
        }




class FixedPriceJSON(typing.TypedDict):
    kind: typing.Literal["FixedPrice"]


@dataclass
class FixedPrice:
    discriminator: typing.ClassVar = 23
    def to_json(self) -> FixedPriceJSON:
        return FixedPriceJSON(
            kind="FixedPrice",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "FixedPrice": {},
        }




class SwitchboardOnDemandJSON(typing.TypedDict):
    kind: typing.Literal["SwitchboardOnDemand"]


@dataclass
class SwitchboardOnDemand:
    discriminator: typing.ClassVar = 24
    def to_json(self) -> SwitchboardOnDemandJSON:
        return SwitchboardOnDemandJSON(
            kind="SwitchboardOnDemand",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "SwitchboardOnDemand": {},
        }




class JitoRestakingJSON(typing.TypedDict):
    kind: typing.Literal["JitoRestaking"]


@dataclass
class JitoRestaking:
    discriminator: typing.ClassVar = 25
    def to_json(self) -> JitoRestakingJSON:
        return JitoRestakingJSON(
            kind="JitoRestaking",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "JitoRestaking": {},
        }




class ChainlinkJSON(typing.TypedDict):
    kind: typing.Literal["Chainlink"]


@dataclass
class Chainlink:
    discriminator: typing.ClassVar = 26
    def to_json(self) -> ChainlinkJSON:
        return ChainlinkJSON(
            kind="Chainlink",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "Chainlink": {},
        }




class DiscountToMaturityJSON(typing.TypedDict):
    kind: typing.Literal["DiscountToMaturity"]


@dataclass
class DiscountToMaturity:
    discriminator: typing.ClassVar = 27
    def to_json(self) -> DiscountToMaturityJSON:
        return DiscountToMaturityJSON(
            kind="DiscountToMaturity",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "DiscountToMaturity": {},
        }




class MostRecentOfJSON(typing.TypedDict):
    kind: typing.Literal["MostRecentOf"]


@dataclass
class MostRecentOf:
    discriminator: typing.ClassVar = 28
    def to_json(self) -> MostRecentOfJSON:
        return MostRecentOfJSON(
            kind="MostRecentOf",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "MostRecentOf": {},
        }




class PythLazerJSON(typing.TypedDict):
    kind: typing.Literal["PythLazer"]


@dataclass
class PythLazer:
    discriminator: typing.ClassVar = 29
    def to_json(self) -> PythLazerJSON:
        return PythLazerJSON(
            kind="PythLazer",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "PythLazer": {},
        }





OracleTypeKind = typing.Union[
    Pyth,
    DeprecatedPlaceholder1,
    SwitchboardV2,
    DeprecatedPlaceholder2,
    CToken,
    SplStake,
    KToken,
    PythEMA,
    MsolStake,
    KTokenToTokenA,
    KTokenToTokenB,
    JupiterLpFetch,
    ScopeTwap,
    OrcaWhirlpoolAtoB,
    OrcaWhirlpoolBtoA,
    RaydiumAmmV3AtoB,
    RaydiumAmmV3BtoA,
    JupiterLpCompute,
    MeteoraDlmmAtoB,
    MeteoraDlmmBtoA,
    JupiterLpScope,
    PythPull,
    PythPullEMA,
    FixedPrice,
    SwitchboardOnDemand,
    JitoRestaking,
    Chainlink,
    DiscountToMaturity,
    MostRecentOf,
    PythLazer,
]
OracleTypeJSON = typing.Union[
    PythJSON,
    DeprecatedPlaceholder1JSON,
    SwitchboardV2JSON,
    DeprecatedPlaceholder2JSON,
    CTokenJSON,
    SplStakeJSON,
    KTokenJSON,
    PythEMAJSON,
    MsolStakeJSON,
    KTokenToTokenAJSON,
    KTokenToTokenBJSON,
    JupiterLpFetchJSON,
    ScopeTwapJSON,
    OrcaWhirlpoolAtoBJSON,
    OrcaWhirlpoolBtoAJSON,
    RaydiumAmmV3AtoBJSON,
    RaydiumAmmV3BtoAJSON,
    JupiterLpComputeJSON,
    MeteoraDlmmAtoBJSON,
    MeteoraDlmmBtoAJSON,
    JupiterLpScopeJSON,
    PythPullJSON,
    PythPullEMAJSON,
    FixedPriceJSON,
    SwitchboardOnDemandJSON,
    JitoRestakingJSON,
    ChainlinkJSON,
    DiscountToMaturityJSON,
    MostRecentOfJSON,
    PythLazerJSON,
]

def from_decoded(obj: dict) -> OracleTypeKind:
    if not isinstance(obj, dict):
        raise ValueError("Invalid enum object")
    if "Pyth" in obj:
      return Pyth()
    if "DeprecatedPlaceholder1" in obj:
      return DeprecatedPlaceholder1()
    if "SwitchboardV2" in obj:
      return SwitchboardV2()
    if "DeprecatedPlaceholder2" in obj:
      return DeprecatedPlaceholder2()
    if "CToken" in obj:
      return CToken()
    if "SplStake" in obj:
      return SplStake()
    if "KToken" in obj:
      return KToken()
    if "PythEMA" in obj:
      return PythEMA()
    if "MsolStake" in obj:
      return MsolStake()
    if "KTokenToTokenA" in obj:
      return KTokenToTokenA()
    if "KTokenToTokenB" in obj:
      return KTokenToTokenB()
    if "JupiterLpFetch" in obj:
      return JupiterLpFetch()
    if "ScopeTwap" in obj:
      return ScopeTwap()
    if "OrcaWhirlpoolAtoB" in obj:
      return OrcaWhirlpoolAtoB()
    if "OrcaWhirlpoolBtoA" in obj:
      return OrcaWhirlpoolBtoA()
    if "RaydiumAmmV3AtoB" in obj:
      return RaydiumAmmV3AtoB()
    if "RaydiumAmmV3BtoA" in obj:
      return RaydiumAmmV3BtoA()
    if "JupiterLpCompute" in obj:
      return JupiterLpCompute()
    if "MeteoraDlmmAtoB" in obj:
      return MeteoraDlmmAtoB()
    if "MeteoraDlmmBtoA" in obj:
      return MeteoraDlmmBtoA()
    if "JupiterLpScope" in obj:
      return JupiterLpScope()
    if "PythPull" in obj:
      return PythPull()
    if "PythPullEMA" in obj:
      return PythPullEMA()
    if "FixedPrice" in obj:
      return FixedPrice()
    if "SwitchboardOnDemand" in obj:
      return SwitchboardOnDemand()
    if "JitoRestaking" in obj:
      return JitoRestaking()
    if "Chainlink" in obj:
      return Chainlink()
    if "DiscountToMaturity" in obj:
      return DiscountToMaturity()
    if "MostRecentOf" in obj:
      return MostRecentOf()
    if "PythLazer" in obj:
      return PythLazer()
    raise ValueError("Invalid enum object")

def from_json(obj: OracleTypeJSON) -> OracleTypeKind:
    if obj["kind"] == "Pyth":
        return Pyth()

    if obj["kind"] == "DeprecatedPlaceholder1":
        return DeprecatedPlaceholder1()

    if obj["kind"] == "SwitchboardV2":
        return SwitchboardV2()

    if obj["kind"] == "DeprecatedPlaceholder2":
        return DeprecatedPlaceholder2()

    if obj["kind"] == "CToken":
        return CToken()

    if obj["kind"] == "SplStake":
        return SplStake()

    if obj["kind"] == "KToken":
        return KToken()

    if obj["kind"] == "PythEMA":
        return PythEMA()

    if obj["kind"] == "MsolStake":
        return MsolStake()

    if obj["kind"] == "KTokenToTokenA":
        return KTokenToTokenA()

    if obj["kind"] == "KTokenToTokenB":
        return KTokenToTokenB()

    if obj["kind"] == "JupiterLpFetch":
        return JupiterLpFetch()

    if obj["kind"] == "ScopeTwap":
        return ScopeTwap()

    if obj["kind"] == "OrcaWhirlpoolAtoB":
        return OrcaWhirlpoolAtoB()

    if obj["kind"] == "OrcaWhirlpoolBtoA":
        return OrcaWhirlpoolBtoA()

    if obj["kind"] == "RaydiumAmmV3AtoB":
        return RaydiumAmmV3AtoB()

    if obj["kind"] == "RaydiumAmmV3BtoA":
        return RaydiumAmmV3BtoA()

    if obj["kind"] == "JupiterLpCompute":
        return JupiterLpCompute()

    if obj["kind"] == "MeteoraDlmmAtoB":
        return MeteoraDlmmAtoB()

    if obj["kind"] == "MeteoraDlmmBtoA":
        return MeteoraDlmmBtoA()

    if obj["kind"] == "JupiterLpScope":
        return JupiterLpScope()

    if obj["kind"] == "PythPull":
        return PythPull()

    if obj["kind"] == "PythPullEMA":
        return PythPullEMA()

    if obj["kind"] == "FixedPrice":
        return FixedPrice()

    if obj["kind"] == "SwitchboardOnDemand":
        return SwitchboardOnDemand()

    if obj["kind"] == "JitoRestaking":
        return JitoRestaking()

    if obj["kind"] == "Chainlink":
        return Chainlink()

    if obj["kind"] == "DiscountToMaturity":
        return DiscountToMaturity()

    if obj["kind"] == "MostRecentOf":
        return MostRecentOf()

    if obj["kind"] == "PythLazer":
        return PythLazer()

    kind = obj["kind"]
    raise ValueError(f"Unrecognized enum kind: {kind}")


layout = EnumForCodegen(
"Pyth" / borsh.CStruct(),
"DeprecatedPlaceholder1" / borsh.CStruct(),
"SwitchboardV2" / borsh.CStruct(),
"DeprecatedPlaceholder2" / borsh.CStruct(),
"CToken" / borsh.CStruct(),
"SplStake" / borsh.CStruct(),
"KToken" / borsh.CStruct(),
"PythEMA" / borsh.CStruct(),
"MsolStake" / borsh.CStruct(),
"KTokenToTokenA" / borsh.CStruct(),
"KTokenToTokenB" / borsh.CStruct(),
"JupiterLpFetch" / borsh.CStruct(),
"ScopeTwap" / borsh.CStruct(),
"OrcaWhirlpoolAtoB" / borsh.CStruct(),
"OrcaWhirlpoolBtoA" / borsh.CStruct(),
"RaydiumAmmV3AtoB" / borsh.CStruct(),
"RaydiumAmmV3BtoA" / borsh.CStruct(),
"JupiterLpCompute" / borsh.CStruct(),
"MeteoraDlmmAtoB" / borsh.CStruct(),
"MeteoraDlmmBtoA" / borsh.CStruct(),
"JupiterLpScope" / borsh.CStruct(),
"PythPull" / borsh.CStruct(),
"PythPullEMA" / borsh.CStruct(),
"FixedPrice" / borsh.CStruct(),
"SwitchboardOnDemand" / borsh.CStruct(),
"JitoRestaking" / borsh.CStruct(),
"Chainlink" / borsh.CStruct(),
"DiscountToMaturity" / borsh.CStruct(),
"MostRecentOf" / borsh.CStruct(),
"PythLazer" / borsh.CStruct(),
)
