'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey, EnumForCodegen;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey as SolPubkey;


class TokenAJSON(typing.TypedDict):
    kind: typing.Literal["TokenA"]


@dataclass
class TokenA:
    discriminator: typing.ClassVar = 0
    def to_json(self) -> TokenAJSON:
        return TokenAJSON(
            kind="TokenA",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "TokenA": {},
        }




class TokenBJSON(typing.TypedDict):
    kind: typing.Literal["TokenB"]


@dataclass
class TokenB:
    discriminator: typing.ClassVar = 1
    def to_json(self) -> TokenBJSON:
        return TokenBJSON(
            kind="TokenB",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "TokenB": {},
        }





TokenTypesKind = typing.Union[
    TokenA,
    TokenB,
]
TokenTypesJSON = typing.Union[
    TokenAJSON,
    TokenBJSON,
]

def from_decoded(obj: dict) -> TokenTypesKind:
    if not isinstance(obj, dict):
        raise ValueError("Invalid enum object")
    if "TokenA" in obj:
      return TokenA()
    if "TokenB" in obj:
      return TokenB()
    raise ValueError("Invalid enum object")

def from_json(obj: TokenTypesJSON) -> TokenTypesKind:
    if obj["kind"] == "TokenA":
        return TokenA()

    if obj["kind"] == "TokenB":
        return TokenB()

    kind = obj["kind"]
    raise ValueError(f"Unrecognized enum kind: {kind}")

layout = EnumForCodegen(
"TokenA" / borsh.CStruct(),
"TokenB" / borsh.CStruct(),
)
