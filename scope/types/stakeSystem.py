'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey as SolPubkey;
from . import list;

class StakeSystemJSON(typing.TypedDict):
    stakeList: list.ListJSON
    delayedUnstakeCoolingDown: int
    stakeDepositBumpSeed: int
    stakeWithdrawBumpSeed: int
    slotsForStakeDelta: int
    lastStakeDeltaEpoch: int
    minStake: int
    extraStakeDeltaRuns: int

@dataclass
class StakeSystem:
    layout: typing.ClassVar = borsh.CStruct(
        "stakeList" /list.List.layout,
        "delayedUnstakeCoolingDown" /borsh.U64,
        "stakeDepositBumpSeed" /borsh.U8,
        "stakeWithdrawBumpSeed" /borsh.U8,
        "slotsForStakeDelta" /borsh.U64,
        "lastStakeDeltaEpoch" /borsh.U64,
        "minStake" /borsh.U64,
        "extraStakeDeltaRuns" /borsh.U32,
        )
    #fields
    stakeList: list.List
    delayedUnstakeCoolingDown: int
    stakeDepositBumpSeed: int
    stakeWithdrawBumpSeed: int
    slotsForStakeDelta: int
    lastStakeDeltaEpoch: int
    minStake: int
    extraStakeDeltaRuns: int
    
    @classmethod
    def from_decoded(cls, obj: Container) -> "StakeSystem":
        return cls(
        stakeList=list.List.from_decoded(obj["stakeList"]),
        delayedUnstakeCoolingDown=obj["delayedUnstakeCoolingDown"],
        stakeDepositBumpSeed=obj["stakeDepositBumpSeed"],
        stakeWithdrawBumpSeed=obj["stakeWithdrawBumpSeed"],
        slotsForStakeDelta=obj["slotsForStakeDelta"],
        lastStakeDeltaEpoch=obj["lastStakeDeltaEpoch"],
        minStake=obj["minStake"],
        extraStakeDeltaRuns=obj["extraStakeDeltaRuns"],
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
                "stakeList": self.stakeList.to_encodable(),
                "delayedUnstakeCoolingDown": self.delayedUnstakeCoolingDown,
                "stakeDepositBumpSeed": self.stakeDepositBumpSeed,
                "stakeWithdrawBumpSeed": self.stakeWithdrawBumpSeed,
                "slotsForStakeDelta": self.slotsForStakeDelta,
                "lastStakeDeltaEpoch": self.lastStakeDeltaEpoch,
                "minStake": self.minStake,
                "extraStakeDeltaRuns": self.extraStakeDeltaRuns,
                }

    def to_json(self) -> StakeSystemJSON:
        return {
                "stakeList": self.stakeList.to_json(),
                "delayedUnstakeCoolingDown": self.delayedUnstakeCoolingDown,
                "stakeDepositBumpSeed": self.stakeDepositBumpSeed,
                "stakeWithdrawBumpSeed": self.stakeWithdrawBumpSeed,
                "slotsForStakeDelta": self.slotsForStakeDelta,
                "lastStakeDeltaEpoch": self.lastStakeDeltaEpoch,
                "minStake": self.minStake,
                "extraStakeDeltaRuns": self.extraStakeDeltaRuns,
                }

    @classmethod
    def from_json(cls, obj: StakeSystemJSON) -> "StakeSystem":
        return cls(
                stakeList=list.List.from_json(obj["stakeList"]),
                delayedUnstakeCoolingDown=obj["delayedUnstakeCoolingDown"],
                stakeDepositBumpSeed=obj["stakeDepositBumpSeed"],
                stakeWithdrawBumpSeed=obj["stakeWithdrawBumpSeed"],
                slotsForStakeDelta=obj["slotsForStakeDelta"],
                lastStakeDeltaEpoch=obj["lastStakeDeltaEpoch"],
                minStake=obj["minStake"],
                extraStakeDeltaRuns=obj["extraStakeDeltaRuns"],
        )






