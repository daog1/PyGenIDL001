'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from construct import Container;
from dataclasses import dataclass;
from solders.instruction import AccountMeta, Instruction;
from solders.pubkey import Pubkey as SolPubkey;
from ..program_id import PROGRAM_ID;
class UpdateMappingArgs(typing.TypedDict):
    token:int
    priceType:int
    twapEnabled:bool
    twapSource:int
    refPriceIndex:int
    feedName:str
    genericData:list[int]


layout = borsh.CStruct(
    "token" /borsh.U16,
    "priceType" /borsh.U8,
    "twapEnabled" /borsh.Bool,
    "twapSource" /borsh.U16,
    "refPriceIndex" /borsh.U16,
    "feedName" /borsh.String,
    "genericData" /borsh.U8[20],
    )


class UpdateMappingAccounts(typing.TypedDict):
    admin:SolPubkey
    configuration:SolPubkey
    oracleMappings:SolPubkey
    priceInfo:SolPubkey

def UpdateMapping(
    args: UpdateMappingArgs,
    accounts: UpdateMappingAccounts,
    program_id: SolPubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["admin"], is_signer=True, is_writable=False),
    AccountMeta(pubkey=accounts["configuration"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["oracleMappings"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["priceInfo"], is_signer=False, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\x38\x66\x5a\xec\xf3\x15\xb9\x69"
    encoded_args = layout.build({
        "token":args["token"],
        "priceType":args["priceType"],
        "twapEnabled":args["twapEnabled"],
        "twapSource":args["twapSource"],
        "refPriceIndex":args["refPriceIndex"],
        "feedName":args["feedName"],
        "genericData":args["genericData"],
       })
    data = identifier + encoded_args
    return Instruction(program_id,data,keys)



