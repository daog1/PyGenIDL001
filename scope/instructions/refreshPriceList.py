'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from construct import Construct
from solders.instruction import AccountMeta, Instruction
from solders.pubkey import Pubkey as SolPubkey
from ..program_id import PROGRAM_ID
class RefreshPriceListArgs(typing.TypedDict):
    tokens:list[int]


layout = borsh.CStruct(
    "tokens" /borsh.Vec(typing.cast(Construct, borsh.U16)),
    )


class RefreshPriceListAccounts(typing.TypedDict):
    oraclePrices:SolPubkey
    oracleMappings:SolPubkey
    oracleTwaps:SolPubkey
    instructionSysvarAccountInfo:SolPubkey

def RefreshPriceList(
    args: RefreshPriceListArgs,
    accounts: RefreshPriceListAccounts,
    program_id: SolPubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["oraclePrices"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["oracleMappings"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["oracleTwaps"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["instructionSysvarAccountInfo"], is_signer=False, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\x53\xba\xcf\x83\xcb\xfe\xc6\x82"
    encoded_args = layout.build({
        "tokens":args["tokens"],
       })
    data = identifier + encoded_args
    return Instruction(program_id,data,keys)



