'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from construct import Container;
from dataclasses import dataclass;
from solders.instruction import AccountMeta, Instruction;
from solders.pubkey import Pubkey as SolPubkey;
from solders.sysvar import RENT;
from ..program_id import PROGRAM_ID;
class RefreshChainlinkPriceArgs(typing.TypedDict):
    token:int
    serializedChainlinkReport:str


layout = borsh.CStruct(
    "token" /borsh.U16,
    "serializedChainlinkReport" /borsh.String,
    )


class RefreshChainlinkPriceAccounts(typing.TypedDict):
    user:SolPubkey
    oraclePrices:SolPubkey
    oracleMappings:SolPubkey
    oracleTwaps:SolPubkey
    verifierAccount:SolPubkey
    accessController:SolPubkey
    configAccount:SolPubkey
    verifierProgramId:SolPubkey

def RefreshChainlinkPrice(
    args: RefreshChainlinkPriceArgs,
    accounts: RefreshChainlinkPriceAccounts,
    program_id: SolPubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["user"], is_signer=True, is_writable=False),
    AccountMeta(pubkey=accounts["oraclePrices"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["oracleMappings"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["oracleTwaps"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["verifierAccount"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["accessController"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["configAccount"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["verifierProgramId"], is_signer=False, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\x61\x09\x14\x73\x48\xff\x04\x8c"
    encoded_args = layout.build({
        "token":args["token"],
        "serializedChainlinkReport":args["serializedChainlinkReport"],
       })

    data = identifier + encoded_args
    return Instruction(program_id,data,keys)


