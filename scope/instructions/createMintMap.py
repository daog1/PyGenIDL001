'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from anchorpy.borsh_extension import BorshPubkey
from construct import Construct
from solders.instruction import AccountMeta, Instruction
from solders.pubkey import Pubkey as SolPubkey
from ..program_id import PROGRAM_ID
class CreateMintMapArgs(typing.TypedDict):
    seedPk:SolPubkey
    seedId:int
    bump:int
    scopeChains:list[list[int]]


layout = borsh.CStruct(
    "seedPk" /BorshPubkey,
    "seedId" /borsh.U64,
    "bump" /borsh.U8,
    "scopeChains" /borsh.Vec(typing.cast(Construct, borsh.U16[4])),
    )


class CreateMintMapAccounts(typing.TypedDict):
    admin:SolPubkey
    configuration:SolPubkey
    mappings:SolPubkey
    systemProgram:SolPubkey

def CreateMintMap(
    args: CreateMintMapArgs,
    accounts: CreateMintMapAccounts,
    program_id: SolPubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["admin"], is_signer=True, is_writable=True),
    AccountMeta(pubkey=accounts["configuration"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["mappings"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["systemProgram"], is_signer=False, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\xd8\xda\xe0\x3c\x17\x1f\xc1\xf3"
    encoded_args = layout.build({
        "seedPk":args["seedPk"],
        "seedId":args["seedId"],
        "bump":args["bump"],
        "scopeChains":args["scopeChains"],
       })
    data = identifier + encoded_args
    return Instruction(program_id,data,keys)




