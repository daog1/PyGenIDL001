'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey;
from anchorpy.coder.accounts import ACCOUNT_DISCRIMINATOR_SIZE;
from anchorpy.error import AccountInvalidDiscriminator;
from anchorpy.utils.rpc import get_multiple_accounts;
from dataclasses import dataclass;
from solana.rpc.async_api import AsyncClient;
from solana.rpc.commitment import Commitment;
from solana.rpc.types import MemcmpOpts;
from solders.pubkey import Pubkey;
from .. import types;
from ..program_id import PROGRAM_ID;


class OpenbookV2FulfillmentConfigJSON(typing.TypedDict):
    pubkey: str
    openbookV2ProgramId: str
    openbookV2Market: str
    openbookV2MarketAuthority: str
    openbookV2EventHeap: str
    openbookV2Bids: str
    openbookV2Asks: str
    openbookV2BaseVault: str
    openbookV2QuoteVault: str
    marketIndex: int
    fulfillmentType: types.spotFulfillmentType.SpotFulfillmentTypeJSON
    status: types.spotFulfillmentConfigStatus.SpotFulfillmentConfigStatusJSON
    padding: list[int]

@dataclass
class OpenbookV2FulfillmentConfig:
    discriminator: typing.ClassVar = b"\x03\x2b\x3a\x6a\x83\x84\xc7\xab";

    layout: typing.ClassVar = borsh.CStruct(
        "pubkey" /BorshPubkey,
        "openbookV2ProgramId" /BorshPubkey,
        "openbookV2Market" /BorshPubkey,
        "openbookV2MarketAuthority" /BorshPubkey,
        "openbookV2EventHeap" /BorshPubkey,
        "openbookV2Bids" /BorshPubkey,
        "openbookV2Asks" /BorshPubkey,
        "openbookV2BaseVault" /BorshPubkey,
        "openbookV2QuoteVault" /BorshPubkey,
        "marketIndex" /borsh.U16,
        "fulfillmentType" /types.spotFulfillmentType.layout,
        "status" /types.spotFulfillmentConfigStatus.layout,
        "padding" /borsh.U8[4],
        )
    #fields
    pubkey: Pubkey
    openbookV2ProgramId: Pubkey
    openbookV2Market: Pubkey
    openbookV2MarketAuthority: Pubkey
    openbookV2EventHeap: Pubkey
    openbookV2Bids: Pubkey
    openbookV2Asks: Pubkey
    openbookV2BaseVault: Pubkey
    openbookV2QuoteVault: Pubkey
    marketIndex: int
    fulfillmentType: types.spotFulfillmentType.SpotFulfillmentTypeKind
    status: types.spotFulfillmentConfigStatus.SpotFulfillmentConfigStatusKind
    padding: list[int]
    

    @classmethod
    async def fetch(
        cls,
        conn: AsyncClient,
        address: Pubkey,
        commitment: typing.Optional[Commitment] = None,
        program_id: Pubkey = PROGRAM_ID,
    ) -> typing.Optional["OpenbookV2FulfillmentConfig"]:
        resp = await conn.get_account_info(address, commitment=commitment)
        info = resp.value
        if info is None:
            return None
        if info.owner != program_id:
            raise ValueError("Account does not belong to this program")
        bytes_data = info.data
        return cls.decode(bytes_data)

    @classmethod
    async def fetch_multiple(
        cls,
        conn: AsyncClient,
        addresses: list[Pubkey],
        commitment: typing.Optional[Commitment] = None,
        program_id: Pubkey = PROGRAM_ID,
    ) -> typing.List[typing.Optional["OpenbookV2FulfillmentConfig"]]:
        infos = await get_multiple_accounts(conn, addresses, commitment=commitment)
        res: typing.List[typing.Optional["OpenbookV2FulfillmentConfig"]] = []
        for info in infos:
            if info is None:
                res.append(None)
                continue
            if info.account.owner != program_id:
                raise ValueError("Account does not belong to this program")
            res.append(cls.decode(info.account.data))
        return res

    @classmethod
    def decode(cls, data: bytes) -> "OpenbookV2FulfillmentConfig":
        if data[:ACCOUNT_DISCRIMINATOR_SIZE] != cls.discriminator:
            raise AccountInvalidDiscriminator(
                "The discriminator for this account is invalid"
            )
        dec = OpenbookV2FulfillmentConfig.layout.parse(data[ACCOUNT_DISCRIMINATOR_SIZE:])
        return cls(
                pubkey=dec.pubkey,
                openbookV2ProgramId=dec.openbookV2ProgramId,
                openbookV2Market=dec.openbookV2Market,
                openbookV2MarketAuthority=dec.openbookV2MarketAuthority,
                openbookV2EventHeap=dec.openbookV2EventHeap,
                openbookV2Bids=dec.openbookV2Bids,
                openbookV2Asks=dec.openbookV2Asks,
                openbookV2BaseVault=dec.openbookV2BaseVault,
                openbookV2QuoteVault=dec.openbookV2QuoteVault,
                marketIndex=dec.marketIndex,
                fulfillmentType=types.spotFulfillmentType.from_decoded(dec.fulfillmentType),
                status=types.spotFulfillmentConfigStatus.from_decoded(dec.status),
                padding=dec.padding,
                )

    def to_json(self) -> OpenbookV2FulfillmentConfigJSON:
        return {
                "pubkey": str(self.pubkey),
                "openbookV2ProgramId": str(self.openbookV2ProgramId),
                "openbookV2Market": str(self.openbookV2Market),
                "openbookV2MarketAuthority": str(self.openbookV2MarketAuthority),
                "openbookV2EventHeap": str(self.openbookV2EventHeap),
                "openbookV2Bids": str(self.openbookV2Bids),
                "openbookV2Asks": str(self.openbookV2Asks),
                "openbookV2BaseVault": str(self.openbookV2BaseVault),
                "openbookV2QuoteVault": str(self.openbookV2QuoteVault),
                "marketIndex": self.marketIndex,
                "fulfillmentType": self.fulfillmentType.to_json(),
                "status": self.status.to_json(),
                "padding": self.padding.to_json(),
                }

    @classmethod
    def from_json(cls, obj: OpenbookV2FulfillmentConfigJSON) -> "OpenbookV2FulfillmentConfig":
        return cls(
                pubkey=Pubkey.from_string(obj["pubkey"]),
                openbookV2ProgramId=Pubkey.from_string(obj["openbookV2ProgramId"]),
                openbookV2Market=Pubkey.from_string(obj["openbookV2Market"]),
                openbookV2MarketAuthority=Pubkey.from_string(obj["openbookV2MarketAuthority"]),
                openbookV2EventHeap=Pubkey.from_string(obj["openbookV2EventHeap"]),
                openbookV2Bids=Pubkey.from_string(obj["openbookV2Bids"]),
                openbookV2Asks=Pubkey.from_string(obj["openbookV2Asks"]),
                openbookV2BaseVault=Pubkey.from_string(obj["openbookV2BaseVault"]),
                openbookV2QuoteVault=Pubkey.from_string(obj["openbookV2QuoteVault"]),
                marketIndex=obj["marketIndex"],
                fulfillmentType=types.spotFulfillmentType.from_json(obj["fulfillmentType"]),
                status=types.spotFulfillmentConfigStatus.from_json(obj["status"]),
                padding=obj["padding"],
                )




