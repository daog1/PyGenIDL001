'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey;
from anchorpy.coder.accounts import ACCOUNT_DISCRIMINATOR_SIZE;
from anchorpy.error import AccountInvalidDiscriminator;
from anchorpy.utils.rpc import get_multiple_accounts;
from dataclasses import dataclass;
from solana.rpc.async_api import AsyncClient;
from solana.rpc.commitment import Commitment;
from solana.rpc.types import MemcmpOpts;
from solders.pubkey import Pubkey;
from .. import types;
from ..program_id import PROGRAM_ID;


class SpotMarketJSON(typing.TypedDict):
    pubkey: str
    oracle: str
    mint: str
    vault: str
    name: str
    historicalOracleData: types.historicalOracleData.HistoricalOracleDataJSON
    historicalIndexData: types.historicalIndexData.HistoricalIndexDataJSON
    revenuePool: types.poolBalance.PoolBalanceJSON
    spotFeePool: types.poolBalance.PoolBalanceJSON
    insuranceFund: types.insuranceFund.InsuranceFundJSON
    totalSpotFee: int
    depositBalance: int
    borrowBalance: int
    cumulativeDepositInterest: int
    cumulativeBorrowInterest: int
    totalSocialLoss: int
    totalQuoteSocialLoss: int
    withdrawGuardThreshold: int
    maxTokenDeposits: int
    depositTokenTwap: int
    borrowTokenTwap: int
    utilizationTwap: int
    lastInterestTs: int
    lastTwapTs: int
    expiryTs: int
    orderStepSize: int
    orderTickSize: int
    minOrderSize: int
    maxPositionSize: int
    nextFillRecordId: int
    nextDepositRecordId: int
    initialAssetWeight: int
    maintenanceAssetWeight: int
    initialLiabilityWeight: int
    maintenanceLiabilityWeight: int
    imfFactor: int
    liquidatorFee: int
    ifLiquidationFee: int
    optimalUtilization: int
    optimalBorrowRate: int
    maxBorrowRate: int
    decimals: int
    marketIndex: int
    ordersEnabled: bool
    oracleSource: types.oracleSource.OracleSourceJSON
    status: types.marketStatus.MarketStatusJSON
    assetTier: types.assetTier.AssetTierJSON
    pausedOperations: int
    ifPausedOperations: int
    feeAdjustment: int
    maxTokenBorrowsFraction: int
    flashLoanAmount: int
    flashLoanInitialTokenAmount: int
    totalSwapFee: int
    scaleInitialAssetWeightStart: int
    minBorrowRate: int
    fuelBoostDeposits: int
    fuelBoostBorrows: int
    fuelBoostTaker: int
    fuelBoostMaker: int
    fuelBoostInsurance: int
    tokenProgram: int
    poolId: int
    padding: str

@dataclass
class SpotMarket:
    discriminator: typing.ClassVar = b"\x64\xb1\x08\x6b\xa8\x41\x41\x27";

    layout: typing.ClassVar = borsh.CStruct(
        "pubkey" /BorshPubkey,
        "oracle" /BorshPubkey,
        "mint" /BorshPubkey,
        "vault" /BorshPubkey,
        "name" /borsh.visitFixedSizeType,
        "historicalOracleData" /types.historicalOracleData.HistoricalOracleData.layout,
        "historicalIndexData" /types.historicalIndexData.HistoricalIndexData.layout,
        "revenuePool" /types.poolBalance.PoolBalance.layout,
        "spotFeePool" /types.poolBalance.PoolBalance.layout,
        "insuranceFund" /types.insuranceFund.InsuranceFund.layout,
        "totalSpotFee" /borsh.U128,
        "depositBalance" /borsh.U128,
        "borrowBalance" /borsh.U128,
        "cumulativeDepositInterest" /borsh.U128,
        "cumulativeBorrowInterest" /borsh.U128,
        "totalSocialLoss" /borsh.U128,
        "totalQuoteSocialLoss" /borsh.U128,
        "withdrawGuardThreshold" /borsh.U64,
        "maxTokenDeposits" /borsh.U64,
        "depositTokenTwap" /borsh.U64,
        "borrowTokenTwap" /borsh.U64,
        "utilizationTwap" /borsh.U64,
        "lastInterestTs" /borsh.U64,
        "lastTwapTs" /borsh.U64,
        "expiryTs" /borsh.I64,
        "orderStepSize" /borsh.U64,
        "orderTickSize" /borsh.U64,
        "minOrderSize" /borsh.U64,
        "maxPositionSize" /borsh.U64,
        "nextFillRecordId" /borsh.U64,
        "nextDepositRecordId" /borsh.U64,
        "initialAssetWeight" /borsh.U32,
        "maintenanceAssetWeight" /borsh.U32,
        "initialLiabilityWeight" /borsh.U32,
        "maintenanceLiabilityWeight" /borsh.U32,
        "imfFactor" /borsh.U32,
        "liquidatorFee" /borsh.U32,
        "ifLiquidationFee" /borsh.U32,
        "optimalUtilization" /borsh.U32,
        "optimalBorrowRate" /borsh.U32,
        "maxBorrowRate" /borsh.U32,
        "decimals" /borsh.U32,
        "marketIndex" /borsh.U16,
        "ordersEnabled" /borsh.U8,
        "oracleSource" /types.oracleSource.OracleSource.layout,
        "status" /types.marketStatus.MarketStatus.layout,
        "assetTier" /types.assetTier.AssetTier.layout,
        "pausedOperations" /borsh.U8,
        "ifPausedOperations" /borsh.U8,
        "feeAdjustment" /borsh.I16,
        "maxTokenBorrowsFraction" /borsh.U16,
        "flashLoanAmount" /borsh.U64,
        "flashLoanInitialTokenAmount" /borsh.U64,
        "totalSwapFee" /borsh.U64,
        "scaleInitialAssetWeightStart" /borsh.U64,
        "minBorrowRate" /borsh.U8,
        "fuelBoostDeposits" /borsh.U8,
        "fuelBoostBorrows" /borsh.U8,
        "fuelBoostTaker" /borsh.U8,
        "fuelBoostMaker" /borsh.U8,
        "fuelBoostInsurance" /borsh.U8,
        "tokenProgram" /borsh.U8,
        "poolId" /borsh.U8,
        "padding" /borsh.visitFixedSizeType,
        )
    #fields
    pubkey: Pubkey
    oracle: Pubkey
    mint: Pubkey
    vault: Pubkey
    name: borsh.String
    historicalOracleData: types.historicalOracleData.HistoricalOracleData
    historicalIndexData: types.historicalIndexData.HistoricalIndexData
    revenuePool: types.poolBalance.PoolBalance
    spotFeePool: types.poolBalance.PoolBalance
    insuranceFund: types.insuranceFund.InsuranceFund
    totalSpotFee: int
    depositBalance: int
    borrowBalance: int
    cumulativeDepositInterest: int
    cumulativeBorrowInterest: int
    totalSocialLoss: int
    totalQuoteSocialLoss: int
    withdrawGuardThreshold: int
    maxTokenDeposits: int
    depositTokenTwap: int
    borrowTokenTwap: int
    utilizationTwap: int
    lastInterestTs: int
    lastTwapTs: int
    expiryTs: int
    orderStepSize: int
    orderTickSize: int
    minOrderSize: int
    maxPositionSize: int
    nextFillRecordId: int
    nextDepositRecordId: int
    initialAssetWeight: int
    maintenanceAssetWeight: int
    initialLiabilityWeight: int
    maintenanceLiabilityWeight: int
    imfFactor: int
    liquidatorFee: int
    ifLiquidationFee: int
    optimalUtilization: int
    optimalBorrowRate: int
    maxBorrowRate: int
    decimals: int
    marketIndex: int
    ordersEnabled: bool
    oracleSource: types.oracleSource.OracleSource
    status: types.marketStatus.MarketStatus
    assetTier: types.assetTier.AssetTier
    pausedOperations: int
    ifPausedOperations: int
    feeAdjustment: int
    maxTokenBorrowsFraction: int
    flashLoanAmount: int
    flashLoanInitialTokenAmount: int
    totalSwapFee: int
    scaleInitialAssetWeightStart: int
    minBorrowRate: int
    fuelBoostDeposits: int
    fuelBoostBorrows: int
    fuelBoostTaker: int
    fuelBoostMaker: int
    fuelBoostInsurance: int
    tokenProgram: int
    poolId: int
    padding: borsh.String
    

    @classmethod
    async def fetch(
        cls,
        conn: AsyncClient,
        address: Pubkey,
        commitment: typing.Optional[Commitment] = None,
        program_id: Pubkey = PROGRAM_ID,
    ) -> typing.Optional["SpotMarket"]:
        resp = await conn.get_account_info(address, commitment=commitment)
        info = resp.value
        if info is None:
            return None
        if info.owner != program_id:
            raise ValueError("Account does not belong to this program")
        bytes_data = info.data
        return cls.decode(bytes_data)

    @classmethod
    async def fetch_multiple(
        cls,
        conn: AsyncClient,
        addresses: list[Pubkey],
        commitment: typing.Optional[Commitment] = None,
        program_id: Pubkey = PROGRAM_ID,
    ) -> typing.List[typing.Optional["SpotMarket"]]:
        infos = await get_multiple_accounts(conn, addresses, commitment=commitment)
        res: typing.List[typing.Optional["SpotMarket"]] = []
        for info in infos:
            if info is None:
                res.append(None)
                continue
            if info.account.owner != program_id:
                raise ValueError("Account does not belong to this program")
            res.append(cls.decode(info.account.data))
        return res

    @classmethod
    def decode(cls, data: bytes) -> "SpotMarket":
        if data[:ACCOUNT_DISCRIMINATOR_SIZE] != cls.discriminator:
            raise AccountInvalidDiscriminator(
                "The discriminator for this account is invalid"
            )
        dec = SpotMarket.layout.parse(data[ACCOUNT_DISCRIMINATOR_SIZE:])
        return cls(
           pubkey=dec.pubkey,
           oracle=dec.oracle,
           mint=dec.mint,
           vault=dec.vault,
           name=dec.name,
           historicalOracleData=types.historicalOracleData.HistoricalOracleData.from_decoded(dec.historicalOracleData),
           historicalIndexData=types.historicalIndexData.HistoricalIndexData.from_decoded(dec.historicalIndexData),
           revenuePool=types.poolBalance.PoolBalance.from_decoded(dec.revenuePool),
           spotFeePool=types.poolBalance.PoolBalance.from_decoded(dec.spotFeePool),
           insuranceFund=types.insuranceFund.InsuranceFund.from_decoded(dec.insuranceFund),
           totalSpotFee=dec.totalSpotFee,
           depositBalance=dec.depositBalance,
           borrowBalance=dec.borrowBalance,
           cumulativeDepositInterest=dec.cumulativeDepositInterest,
           cumulativeBorrowInterest=dec.cumulativeBorrowInterest,
           totalSocialLoss=dec.totalSocialLoss,
           totalQuoteSocialLoss=dec.totalQuoteSocialLoss,
           withdrawGuardThreshold=dec.withdrawGuardThreshold,
           maxTokenDeposits=dec.maxTokenDeposits,
           depositTokenTwap=dec.depositTokenTwap,
           borrowTokenTwap=dec.borrowTokenTwap,
           utilizationTwap=dec.utilizationTwap,
           lastInterestTs=dec.lastInterestTs,
           lastTwapTs=dec.lastTwapTs,
           expiryTs=dec.expiryTs,
           orderStepSize=dec.orderStepSize,
           orderTickSize=dec.orderTickSize,
           minOrderSize=dec.minOrderSize,
           maxPositionSize=dec.maxPositionSize,
           nextFillRecordId=dec.nextFillRecordId,
           nextDepositRecordId=dec.nextDepositRecordId,
           initialAssetWeight=dec.initialAssetWeight,
           maintenanceAssetWeight=dec.maintenanceAssetWeight,
           initialLiabilityWeight=dec.initialLiabilityWeight,
           maintenanceLiabilityWeight=dec.maintenanceLiabilityWeight,
           imfFactor=dec.imfFactor,
           liquidatorFee=dec.liquidatorFee,
           ifLiquidationFee=dec.ifLiquidationFee,
           optimalUtilization=dec.optimalUtilization,
           optimalBorrowRate=dec.optimalBorrowRate,
           maxBorrowRate=dec.maxBorrowRate,
           decimals=dec.decimals,
           marketIndex=dec.marketIndex,
           ordersEnabled=dec.ordersEnabled,
           oracleSource=types.oracleSource.OracleSource.from_decoded(dec.oracleSource),
           status=types.marketStatus.MarketStatus.from_decoded(dec.status),
           assetTier=types.assetTier.AssetTier.from_decoded(dec.assetTier),
           pausedOperations=dec.pausedOperations,
           ifPausedOperations=dec.ifPausedOperations,
           feeAdjustment=dec.feeAdjustment,
           maxTokenBorrowsFraction=dec.maxTokenBorrowsFraction,
           flashLoanAmount=dec.flashLoanAmount,
           flashLoanInitialTokenAmount=dec.flashLoanInitialTokenAmount,
           totalSwapFee=dec.totalSwapFee,
           scaleInitialAssetWeightStart=dec.scaleInitialAssetWeightStart,
           minBorrowRate=dec.minBorrowRate,
           fuelBoostDeposits=dec.fuelBoostDeposits,
           fuelBoostBorrows=dec.fuelBoostBorrows,
           fuelBoostTaker=dec.fuelBoostTaker,
           fuelBoostMaker=dec.fuelBoostMaker,
           fuelBoostInsurance=dec.fuelBoostInsurance,
           tokenProgram=dec.tokenProgram,
           poolId=dec.poolId,
           padding=dec.padding,
        )

    def to_json(self) -> SpotMarketJSON:
        return {
                "pubkey": str(self.pubkey),
                "oracle": str(self.oracle),
                "mint": str(self.mint),
                "vault": str(self.vault),
                "name": self.name,
                "historicalOracleData": self.historicalOracleData.to_json(),
                "historicalIndexData": self.historicalIndexData.to_json(),
                "revenuePool": self.revenuePool.to_json(),
                "spotFeePool": self.spotFeePool.to_json(),
                "insuranceFund": self.insuranceFund.to_json(),
                "totalSpotFee": self.totalSpotFee,
                "depositBalance": self.depositBalance,
                "borrowBalance": self.borrowBalance,
                "cumulativeDepositInterest": self.cumulativeDepositInterest,
                "cumulativeBorrowInterest": self.cumulativeBorrowInterest,
                "totalSocialLoss": self.totalSocialLoss,
                "totalQuoteSocialLoss": self.totalQuoteSocialLoss,
                "withdrawGuardThreshold": self.withdrawGuardThreshold,
                "maxTokenDeposits": self.maxTokenDeposits,
                "depositTokenTwap": self.depositTokenTwap,
                "borrowTokenTwap": self.borrowTokenTwap,
                "utilizationTwap": self.utilizationTwap,
                "lastInterestTs": self.lastInterestTs,
                "lastTwapTs": self.lastTwapTs,
                "expiryTs": self.expiryTs,
                "orderStepSize": self.orderStepSize,
                "orderTickSize": self.orderTickSize,
                "minOrderSize": self.minOrderSize,
                "maxPositionSize": self.maxPositionSize,
                "nextFillRecordId": self.nextFillRecordId,
                "nextDepositRecordId": self.nextDepositRecordId,
                "initialAssetWeight": self.initialAssetWeight,
                "maintenanceAssetWeight": self.maintenanceAssetWeight,
                "initialLiabilityWeight": self.initialLiabilityWeight,
                "maintenanceLiabilityWeight": self.maintenanceLiabilityWeight,
                "imfFactor": self.imfFactor,
                "liquidatorFee": self.liquidatorFee,
                "ifLiquidationFee": self.ifLiquidationFee,
                "optimalUtilization": self.optimalUtilization,
                "optimalBorrowRate": self.optimalBorrowRate,
                "maxBorrowRate": self.maxBorrowRate,
                "decimals": self.decimals,
                "marketIndex": self.marketIndex,
                "ordersEnabled": self.ordersEnabled,
                "oracleSource": self.oracleSource.to_json(),
                "status": self.status.to_json(),
                "assetTier": self.assetTier.to_json(),
                "pausedOperations": self.pausedOperations,
                "ifPausedOperations": self.ifPausedOperations,
                "feeAdjustment": self.feeAdjustment,
                "maxTokenBorrowsFraction": self.maxTokenBorrowsFraction,
                "flashLoanAmount": self.flashLoanAmount,
                "flashLoanInitialTokenAmount": self.flashLoanInitialTokenAmount,
                "totalSwapFee": self.totalSwapFee,
                "scaleInitialAssetWeightStart": self.scaleInitialAssetWeightStart,
                "minBorrowRate": self.minBorrowRate,
                "fuelBoostDeposits": self.fuelBoostDeposits,
                "fuelBoostBorrows": self.fuelBoostBorrows,
                "fuelBoostTaker": self.fuelBoostTaker,
                "fuelBoostMaker": self.fuelBoostMaker,
                "fuelBoostInsurance": self.fuelBoostInsurance,
                "tokenProgram": self.tokenProgram,
                "poolId": self.poolId,
                "padding": self.padding,
                }

    @classmethod
    def from_json(cls, obj: SpotMarketJSON) -> "SpotMarket":
        return cls(
                pubkey=Pubkey.from_string(obj["pubkey"]),
                oracle=Pubkey.from_string(obj["oracle"]),
                mint=Pubkey.from_string(obj["mint"]),
                vault=Pubkey.from_string(obj["vault"]),
                name=obj["name"],
                historicalOracleData=types.historicalOracleData.HistoricalOracleData.from_json(obj["historicalOracleData"]),
                historicalIndexData=types.historicalIndexData.HistoricalIndexData.from_json(obj["historicalIndexData"]),
                revenuePool=types.poolBalance.PoolBalance.from_json(obj["revenuePool"]),
                spotFeePool=types.poolBalance.PoolBalance.from_json(obj["spotFeePool"]),
                insuranceFund=types.insuranceFund.InsuranceFund.from_json(obj["insuranceFund"]),
                totalSpotFee=obj["totalSpotFee"],
                depositBalance=obj["depositBalance"],
                borrowBalance=obj["borrowBalance"],
                cumulativeDepositInterest=obj["cumulativeDepositInterest"],
                cumulativeBorrowInterest=obj["cumulativeBorrowInterest"],
                totalSocialLoss=obj["totalSocialLoss"],
                totalQuoteSocialLoss=obj["totalQuoteSocialLoss"],
                withdrawGuardThreshold=obj["withdrawGuardThreshold"],
                maxTokenDeposits=obj["maxTokenDeposits"],
                depositTokenTwap=obj["depositTokenTwap"],
                borrowTokenTwap=obj["borrowTokenTwap"],
                utilizationTwap=obj["utilizationTwap"],
                lastInterestTs=obj["lastInterestTs"],
                lastTwapTs=obj["lastTwapTs"],
                expiryTs=obj["expiryTs"],
                orderStepSize=obj["orderStepSize"],
                orderTickSize=obj["orderTickSize"],
                minOrderSize=obj["minOrderSize"],
                maxPositionSize=obj["maxPositionSize"],
                nextFillRecordId=obj["nextFillRecordId"],
                nextDepositRecordId=obj["nextDepositRecordId"],
                initialAssetWeight=obj["initialAssetWeight"],
                maintenanceAssetWeight=obj["maintenanceAssetWeight"],
                initialLiabilityWeight=obj["initialLiabilityWeight"],
                maintenanceLiabilityWeight=obj["maintenanceLiabilityWeight"],
                imfFactor=obj["imfFactor"],
                liquidatorFee=obj["liquidatorFee"],
                ifLiquidationFee=obj["ifLiquidationFee"],
                optimalUtilization=obj["optimalUtilization"],
                optimalBorrowRate=obj["optimalBorrowRate"],
                maxBorrowRate=obj["maxBorrowRate"],
                decimals=obj["decimals"],
                marketIndex=obj["marketIndex"],
                ordersEnabled=obj["ordersEnabled"],
                oracleSource=types.oracleSource.OracleSource.from_json(obj["oracleSource"]),
                status=types.marketStatus.MarketStatus.from_json(obj["status"]),
                assetTier=types.assetTier.AssetTier.from_json(obj["assetTier"]),
                pausedOperations=obj["pausedOperations"],
                ifPausedOperations=obj["ifPausedOperations"],
                feeAdjustment=obj["feeAdjustment"],
                maxTokenBorrowsFraction=obj["maxTokenBorrowsFraction"],
                flashLoanAmount=obj["flashLoanAmount"],
                flashLoanInitialTokenAmount=obj["flashLoanInitialTokenAmount"],
                totalSwapFee=obj["totalSwapFee"],
                scaleInitialAssetWeightStart=obj["scaleInitialAssetWeightStart"],
                minBorrowRate=obj["minBorrowRate"],
                fuelBoostDeposits=obj["fuelBoostDeposits"],
                fuelBoostBorrows=obj["fuelBoostBorrows"],
                fuelBoostTaker=obj["fuelBoostTaker"],
                fuelBoostMaker=obj["fuelBoostMaker"],
                fuelBoostInsurance=obj["fuelBoostInsurance"],
                tokenProgram=obj["tokenProgram"],
                poolId=obj["poolId"],
                padding=obj["padding"],
                )




