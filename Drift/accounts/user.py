'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey;
from anchorpy.error import AccountInvalidDiscriminator;
from anchorpy.utils.rpc import get_multiple_accounts;
from dataclasses import dataclass;
from solana.rpc.async_api import AsyncClient;
from solana.rpc.commitment import Commitment;
from solana.rpc.types import MemcmpOpts;
from solders.pubkey import Pubkey as SolPubkey;
from .. import types;
from ..program_id import PROGRAM_ID;


class UserJSON(typing.TypedDict):
    authority: str
    delegate: str
    name: list[int]
    spotPositions: list[types.spotPosition.SpotPositionJSON]
    perpPositions: list[types.perpPosition.PerpPositionJSON]
    orders: list[types.order.OrderJSON]
    lastAddPerpLpSharesTs: int
    totalDeposits: int
    totalWithdraws: int
    totalSocialLoss: int
    settledPerpPnl: int
    cumulativeSpotFees: int
    cumulativePerpFunding: int
    liquidationMarginFreed: int
    lastActiveSlot: int
    nextOrderId: int
    maxMarginRatio: int
    nextLiquidationId: int
    subAccountId: int
    status: int
    isMarginTradingEnabled: bool
    idle: bool
    openOrders: int
    hasOpenOrder: bool
    openAuctions: int
    hasOpenAuction: bool
    marginMode: types.marginMode.MarginModeJSON
    poolId: int
    padding1: list[int]
    lastFuelBonusUpdateTs: int
    padding: list[int]

@dataclass
class User:
    discriminator: typing.ClassVar = b"\x9f\x75\x5f\xe3\xef\x97\x3a\xec"
    DISCRIMINATOR_SIZE: int = 8

    layout: typing.ClassVar = borsh.CStruct(
        "authority" /BorshPubkey,
        "delegate" /BorshPubkey,
        "name" /borsh.U8[32],
        "spotPositions" /types.spotPosition.SpotPosition.layout[8],
        "perpPositions" /types.perpPosition.PerpPosition.layout[8],
        "orders" /types.order.Order.layout[32],
        "lastAddPerpLpSharesTs" /borsh.I64,
        "totalDeposits" /borsh.U64,
        "totalWithdraws" /borsh.U64,
        "totalSocialLoss" /borsh.U64,
        "settledPerpPnl" /borsh.I64,
        "cumulativeSpotFees" /borsh.I64,
        "cumulativePerpFunding" /borsh.I64,
        "liquidationMarginFreed" /borsh.U64,
        "lastActiveSlot" /borsh.U64,
        "nextOrderId" /borsh.U32,
        "maxMarginRatio" /borsh.U32,
        "nextLiquidationId" /borsh.U16,
        "subAccountId" /borsh.U16,
        "status" /borsh.U8,
        "isMarginTradingEnabled" /borsh.Bool,
        "idle" /borsh.Bool,
        "openOrders" /borsh.U8,
        "hasOpenOrder" /borsh.Bool,
        "openAuctions" /borsh.U8,
        "hasOpenAuction" /borsh.Bool,
        "marginMode" /types.marginMode.layout,
        "poolId" /borsh.U8,
        "padding1" /borsh.U8[3],
        "lastFuelBonusUpdateTs" /borsh.U32,
        "padding" /borsh.U8[12],
        )
    #fields
    authority: SolPubkey
    delegate: SolPubkey
    name: list[int]
    spotPositions: list[types.spotPosition.SpotPosition]
    perpPositions: list[types.perpPosition.PerpPosition]
    orders: list[types.order.Order]
    lastAddPerpLpSharesTs: int
    totalDeposits: int
    totalWithdraws: int
    totalSocialLoss: int
    settledPerpPnl: int
    cumulativeSpotFees: int
    cumulativePerpFunding: int
    liquidationMarginFreed: int
    lastActiveSlot: int
    nextOrderId: int
    maxMarginRatio: int
    nextLiquidationId: int
    subAccountId: int
    status: int
    isMarginTradingEnabled: bool
    idle: bool
    openOrders: int
    hasOpenOrder: bool
    openAuctions: int
    hasOpenAuction: bool
    marginMode: types.marginMode.MarginModeKind
    poolId: int
    padding1: list[int]
    lastFuelBonusUpdateTs: int
    padding: list[int]
    

    @classmethod
    async def fetch(
        cls,
        conn: AsyncClient,
        address: SolPubkey,
        commitment: typing.Optional[Commitment] = None,
        program_id: SolPubkey = PROGRAM_ID,
    ) -> typing.Optional["User"]:
        resp = await conn.get_account_info(address, commitment=commitment)
        info = resp.value
        if info is None:
            return None
        if info.owner != program_id:
            raise ValueError("Account does not belong to this program")
        bytes_data = info.data
        return cls.decode(bytes_data)

    @classmethod
    async def fetch_multiple(
        cls,
        conn: AsyncClient,
        addresses: list[SolPubkey],
        commitment: typing.Optional[Commitment] = None,
        program_id: SolPubkey = PROGRAM_ID,
    ) -> typing.List[typing.Optional["User"]]:
        infos = await get_multiple_accounts(conn, addresses, commitment=commitment)
        res: typing.List[typing.Optional["User"]] = []
        for info in infos:
            if info is None:
                res.append(None)
                continue
            if info.account.owner != program_id:
                raise ValueError("Account does not belong to this program")
            res.append(cls.decode(info.account.data))
        return res

    @classmethod
    def decode(cls, data: bytes) -> "User":
        if data[:cls.DISCRIMINATOR_SIZE] != cls.discriminator:
            raise AccountInvalidDiscriminator(
                "The discriminator for this account is invalid"
            )
        dec = User.layout.parse(data[cls.DISCRIMINATOR_SIZE:])
        return cls(
                authority=dec.authority,
                delegate=dec.delegate,
                name=dec.name,
                spotPositions=dec.spotPositions,
                perpPositions=dec.perpPositions,
                orders=dec.orders,
                lastAddPerpLpSharesTs=dec.lastAddPerpLpSharesTs,
                totalDeposits=dec.totalDeposits,
                totalWithdraws=dec.totalWithdraws,
                totalSocialLoss=dec.totalSocialLoss,
                settledPerpPnl=dec.settledPerpPnl,
                cumulativeSpotFees=dec.cumulativeSpotFees,
                cumulativePerpFunding=dec.cumulativePerpFunding,
                liquidationMarginFreed=dec.liquidationMarginFreed,
                lastActiveSlot=dec.lastActiveSlot,
                nextOrderId=dec.nextOrderId,
                maxMarginRatio=dec.maxMarginRatio,
                nextLiquidationId=dec.nextLiquidationId,
                subAccountId=dec.subAccountId,
                status=dec.status,
                isMarginTradingEnabled=dec.isMarginTradingEnabled,
                idle=dec.idle,
                openOrders=dec.openOrders,
                hasOpenOrder=dec.hasOpenOrder,
                openAuctions=dec.openAuctions,
                hasOpenAuction=dec.hasOpenAuction,
                marginMode=types.marginMode.from_decoded(dec.marginMode),
                poolId=dec.poolId,
                padding1=dec.padding1,
                lastFuelBonusUpdateTs=dec.lastFuelBonusUpdateTs,
                padding=dec.padding,
                )

    def to_json(self) -> UserJSON:
        return {
                "authority": str(self.authority),
                "delegate": str(self.delegate),
                "name": self.name,
                "spotPositions": list(map(lambda item:item.to_json(),self.spotPositions)),
                "perpPositions": list(map(lambda item:item.to_json(),self.perpPositions)),
                "orders": list(map(lambda item:item.to_json(),self.orders)),
                "lastAddPerpLpSharesTs": self.lastAddPerpLpSharesTs,
                "totalDeposits": self.totalDeposits,
                "totalWithdraws": self.totalWithdraws,
                "totalSocialLoss": self.totalSocialLoss,
                "settledPerpPnl": self.settledPerpPnl,
                "cumulativeSpotFees": self.cumulativeSpotFees,
                "cumulativePerpFunding": self.cumulativePerpFunding,
                "liquidationMarginFreed": self.liquidationMarginFreed,
                "lastActiveSlot": self.lastActiveSlot,
                "nextOrderId": self.nextOrderId,
                "maxMarginRatio": self.maxMarginRatio,
                "nextLiquidationId": self.nextLiquidationId,
                "subAccountId": self.subAccountId,
                "status": self.status,
                "isMarginTradingEnabled": self.isMarginTradingEnabled,
                "idle": self.idle,
                "openOrders": self.openOrders,
                "hasOpenOrder": self.hasOpenOrder,
                "openAuctions": self.openAuctions,
                "hasOpenAuction": self.hasOpenAuction,
                "marginMode": self.marginMode.to_json(),
                "poolId": self.poolId,
                "padding1": self.padding1,
                "lastFuelBonusUpdateTs": self.lastFuelBonusUpdateTs,
                "padding": self.padding,
                }

    @classmethod
    def from_json(cls, obj: UserJSON) -> "User":
        return cls(
                authority=SolPubkey.from_string(obj["authority"]),
                delegate=SolPubkey.from_string(obj["delegate"]),
                name=obj["name"],
                spotPositions=list(map(lambda item:types.spotPosition.SpotPosition.from_json(item),obj["spotPositions"])),
                perpPositions=list(map(lambda item:types.perpPosition.PerpPosition.from_json(item),obj["perpPositions"])),
                orders=list(map(lambda item:types.order.Order.from_json(item),obj["orders"])),
                lastAddPerpLpSharesTs=obj["lastAddPerpLpSharesTs"],
                totalDeposits=obj["totalDeposits"],
                totalWithdraws=obj["totalWithdraws"],
                totalSocialLoss=obj["totalSocialLoss"],
                settledPerpPnl=obj["settledPerpPnl"],
                cumulativeSpotFees=obj["cumulativeSpotFees"],
                cumulativePerpFunding=obj["cumulativePerpFunding"],
                liquidationMarginFreed=obj["liquidationMarginFreed"],
                lastActiveSlot=obj["lastActiveSlot"],
                nextOrderId=obj["nextOrderId"],
                maxMarginRatio=obj["maxMarginRatio"],
                nextLiquidationId=obj["nextLiquidationId"],
                subAccountId=obj["subAccountId"],
                status=obj["status"],
                isMarginTradingEnabled=obj["isMarginTradingEnabled"],
                idle=obj["idle"],
                openOrders=obj["openOrders"],
                hasOpenOrder=obj["hasOpenOrder"],
                openAuctions=obj["openAuctions"],
                hasOpenAuction=obj["hasOpenAuction"],
                marginMode=types.marginMode.from_json(obj["marginMode"]),
                poolId=obj["poolId"],
                padding1=obj["padding1"],
                lastFuelBonusUpdateTs=obj["lastFuelBonusUpdateTs"],
                padding=obj["padding"],
                )




