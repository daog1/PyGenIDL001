'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey;
from anchorpy.coder.accounts import ACCOUNT_DISCRIMINATOR_SIZE;
from anchorpy.error import AccountInvalidDiscriminator;
from anchorpy.utils.rpc import get_multiple_accounts;
from dataclasses import dataclass;
from solana.rpc.async_api import AsyncClient;
from solana.rpc.commitment import Commitment;
from solana.rpc.types import MemcmpOpts;
from solders.pubkey import Pubkey;
from .. import types;
from ..program_id import PROGRAM_ID;


class PhoenixV1FulfillmentConfigJSON(typing.TypedDict):
    pubkey: str
    phoenixProgramId: str
    phoenixLogAuthority: str
    phoenixMarket: str
    phoenixBaseVault: str
    phoenixQuoteVault: str
    marketIndex: int
    fulfillmentType: types.spotFulfillmentType.SpotFulfillmentTypeJSON
    status: types.spotFulfillmentConfigStatus.SpotFulfillmentConfigStatusJSON
    padding: list[int]

@dataclass
class PhoenixV1FulfillmentConfig:
    discriminator: typing.ClassVar = b"\xe9\x2d\x3e\x28\x23\x81\x30\x48";

    layout: typing.ClassVar = borsh.CStruct(
        "pubkey" /BorshPubkey,
        "phoenixProgramId" /BorshPubkey,
        "phoenixLogAuthority" /BorshPubkey,
        "phoenixMarket" /BorshPubkey,
        "phoenixBaseVault" /BorshPubkey,
        "phoenixQuoteVault" /BorshPubkey,
        "marketIndex" /borsh.U16,
        "fulfillmentType" /types.spotFulfillmentType.SpotFulfillmentType.layout,
        "status" /types.spotFulfillmentConfigStatus.SpotFulfillmentConfigStatus.layout,
        "padding" /borsh.U8[4],
        )
    #fields
    pubkey: Pubkey
    phoenixProgramId: Pubkey
    phoenixLogAuthority: Pubkey
    phoenixMarket: Pubkey
    phoenixBaseVault: Pubkey
    phoenixQuoteVault: Pubkey
    marketIndex: int
    fulfillmentType: types.spotFulfillmentType.SpotFulfillmentType
    status: types.spotFulfillmentConfigStatus.SpotFulfillmentConfigStatus
    padding: list[int]
    

    @classmethod
    async def fetch(
        cls,
        conn: AsyncClient,
        address: Pubkey,
        commitment: typing.Optional[Commitment] = None,
        program_id: Pubkey = PROGRAM_ID,
    ) -> typing.Optional["PhoenixV1FulfillmentConfig"]:
        resp = await conn.get_account_info(address, commitment=commitment)
        info = resp.value
        if info is None:
            return None
        if info.owner != program_id:
            raise ValueError("Account does not belong to this program")
        bytes_data = info.data
        return cls.decode(bytes_data)

    @classmethod
    async def fetch_multiple(
        cls,
        conn: AsyncClient,
        addresses: list[Pubkey],
        commitment: typing.Optional[Commitment] = None,
        program_id: Pubkey = PROGRAM_ID,
    ) -> typing.List[typing.Optional["PhoenixV1FulfillmentConfig"]]:
        infos = await get_multiple_accounts(conn, addresses, commitment=commitment)
        res: typing.List[typing.Optional["PhoenixV1FulfillmentConfig"]] = []
        for info in infos:
            if info is None:
                res.append(None)
                continue
            if info.account.owner != program_id:
                raise ValueError("Account does not belong to this program")
            res.append(cls.decode(info.account.data))
        return res

    @classmethod
    def decode(cls, data: bytes) -> "PhoenixV1FulfillmentConfig":
        if data[:ACCOUNT_DISCRIMINATOR_SIZE] != cls.discriminator:
            raise AccountInvalidDiscriminator(
                "The discriminator for this account is invalid"
            )
        dec = PhoenixV1FulfillmentConfig.layout.parse(data[ACCOUNT_DISCRIMINATOR_SIZE:])
        return cls(
           pubkey=dec.pubkey,
           phoenixProgramId=dec.phoenixProgramId,
           phoenixLogAuthority=dec.phoenixLogAuthority,
           phoenixMarket=dec.phoenixMarket,
           phoenixBaseVault=dec.phoenixBaseVault,
           phoenixQuoteVault=dec.phoenixQuoteVault,
           marketIndex=dec.marketIndex,
           fulfillmentType=types.spotFulfillmentType.SpotFulfillmentType.from_decoded(dec.fulfillmentType),
           status=types.spotFulfillmentConfigStatus.SpotFulfillmentConfigStatus.from_decoded(dec.status),
           padding=dec.padding,
        )

    def to_json(self) -> PhoenixV1FulfillmentConfigJSON:
        return {
                "pubkey": str(self.pubkey),
                "phoenixProgramId": str(self.phoenixProgramId),
                "phoenixLogAuthority": str(self.phoenixLogAuthority),
                "phoenixMarket": str(self.phoenixMarket),
                "phoenixBaseVault": str(self.phoenixBaseVault),
                "phoenixQuoteVault": str(self.phoenixQuoteVault),
                "marketIndex": self.marketIndex,
                "fulfillmentType": self.fulfillmentType.to_json(),
                "status": self.status.to_json(),
                "padding": self.padding,
                }

    @classmethod
    def from_json(cls, obj: PhoenixV1FulfillmentConfigJSON) -> "PhoenixV1FulfillmentConfig":
        return cls(
                pubkey=Pubkey.from_string(obj["pubkey"]),
                phoenixProgramId=Pubkey.from_string(obj["phoenixProgramId"]),
                phoenixLogAuthority=Pubkey.from_string(obj["phoenixLogAuthority"]),
                phoenixMarket=Pubkey.from_string(obj["phoenixMarket"]),
                phoenixBaseVault=Pubkey.from_string(obj["phoenixBaseVault"]),
                phoenixQuoteVault=Pubkey.from_string(obj["phoenixQuoteVault"]),
                marketIndex=obj["marketIndex"],
                fulfillmentType=types.spotFulfillmentType.SpotFulfillmentType.from_json(obj["fulfillmentType"]),
                status=types.spotFulfillmentConfigStatus.SpotFulfillmentConfigStatus.from_json(obj["status"]),
                padding=obj["padding"],
                )




