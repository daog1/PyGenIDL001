'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey;
from anchorpy.coder.accounts import ACCOUNT_DISCRIMINATOR_SIZE;
from anchorpy.error import AccountInvalidDiscriminator;
from anchorpy.utils.rpc import get_multiple_accounts;
from dataclasses import dataclass;
from solana.rpc.async_api import AsyncClient;
from solana.rpc.commitment import Commitment;
from solana.rpc.types import MemcmpOpts;
from solders.pubkey import Pubkey as SolPubkey;
from .. import types;
from ..program_id import PROGRAM_ID;


class RFQUserJSON(typing.TypedDict):
    userPubkey: str
    rfqOrderData: list[types.rFQOrderId.RFQOrderIdJSON]

@dataclass
class RFQUser:
    discriminator: typing.ClassVar = b"\xd5\x54\xbb\x9f\x46\x70\x34\xba";

    layout: typing.ClassVar = borsh.CStruct(
        "userPubkey" /BorshPubkey,
        "rfqOrderData" /types.rFQOrderId.RFQOrderId.layout[32],
        )
    #fields
    userPubkey: SolPubkey
    rfqOrderData: list[types.rFQOrderId.RFQOrderId]
    

    @classmethod
    async def fetch(
        cls,
        conn: AsyncClient,
        address: SolPubkey,
        commitment: typing.Optional[Commitment] = None,
        program_id: SolPubkey = PROGRAM_ID,
    ) -> typing.Optional["RFQUser"]:
        resp = await conn.get_account_info(address, commitment=commitment)
        info = resp.value
        if info is None:
            return None
        if info.owner != program_id:
            raise ValueError("Account does not belong to this program")
        bytes_data = info.data
        return cls.decode(bytes_data)

    @classmethod
    async def fetch_multiple(
        cls,
        conn: AsyncClient,
        addresses: list[SolPubkey],
        commitment: typing.Optional[Commitment] = None,
        program_id: SolPubkey = PROGRAM_ID,
    ) -> typing.List[typing.Optional["RFQUser"]]:
        infos = await get_multiple_accounts(conn, addresses, commitment=commitment)
        res: typing.List[typing.Optional["RFQUser"]] = []
        for info in infos:
            if info is None:
                res.append(None)
                continue
            if info.account.owner != program_id:
                raise ValueError("Account does not belong to this program")
            res.append(cls.decode(info.account.data))
        return res

    @classmethod
    def decode(cls, data: bytes) -> "RFQUser":
        if data[:ACCOUNT_DISCRIMINATOR_SIZE] != cls.discriminator:
            raise AccountInvalidDiscriminator(
                "The discriminator for this account is invalid"
            )
        dec = RFQUser.layout.parse(data[ACCOUNT_DISCRIMINATOR_SIZE:])
        return cls(
                userPubkey=dec.userPubkey,
                rfqOrderData=dec.rfqOrderData,
                )

    def to_json(self) -> RFQUserJSON:
        return {
                "userPubkey": str(self.userPubkey),
                "rfqOrderData": list(map(lambda item:item.to_json(),self.rfqOrderData)),
                }

    @classmethod
    def from_json(cls, obj: RFQUserJSON) -> "RFQUser":
        return cls(
                userPubkey=SolPubkey.from_string(obj["userPubkey"]),
                rfqOrderData=list(map(lambda item:types.rFQOrderId.RFQOrderId.from_json(item),obj["rfqOrderData"])),
                )




