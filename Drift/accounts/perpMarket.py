'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey;
from anchorpy.coder.accounts import ACCOUNT_DISCRIMINATOR_SIZE;
from anchorpy.error import AccountInvalidDiscriminator;
from anchorpy.utils.rpc import get_multiple_accounts;
from dataclasses import dataclass;
from solana.rpc.async_api import AsyncClient;
from solana.rpc.commitment import Commitment;
from solana.rpc.types import MemcmpOpts;
from solders.pubkey import Pubkey as SolPubkey;
from .. import types;
from ..program_id import PROGRAM_ID;


class PerpMarketJSON(typing.TypedDict):
    pubkey: str
    amm: types.aMM.AMMJSON
    pnlPool: types.poolBalance.PoolBalanceJSON
    name: list[int]
    insuranceClaim: types.insuranceClaim.InsuranceClaimJSON
    unrealizedPnlMaxImbalance: int
    expiryTs: int
    expiryPrice: int
    nextFillRecordId: int
    nextFundingRateRecordId: int
    nextCurveRecordId: int
    imfFactor: int
    unrealizedPnlImfFactor: int
    liquidatorFee: int
    ifLiquidationFee: int
    marginRatioInitial: int
    marginRatioMaintenance: int
    unrealizedPnlInitialAssetWeight: int
    unrealizedPnlMaintenanceAssetWeight: int
    numberOfUsersWithBase: int
    numberOfUsers: int
    marketIndex: int
    status: types.marketStatus.MarketStatusJSON
    contractType: types.contractType.ContractTypeJSON
    contractTier: types.contractTier.ContractTierJSON
    pausedOperations: int
    quoteSpotMarketIndex: int
    feeAdjustment: int
    fuelBoostPosition: int
    fuelBoostTaker: int
    fuelBoostMaker: int
    poolId: int
    highLeverageMarginRatioInitial: int
    highLeverageMarginRatioMaintenance: int
    padding: list[int]

@dataclass
class PerpMarket:
    discriminator: typing.ClassVar = b"\x0a\xdf\x0c\x2c\x6b\xf5\x37\xf7";

    layout: typing.ClassVar = borsh.CStruct(
        "pubkey" /BorshPubkey,
        "amm" /types.aMM.AMM.layout,
        "pnlPool" /types.poolBalance.PoolBalance.layout,
        "name" /borsh.U8[32],
        "insuranceClaim" /types.insuranceClaim.InsuranceClaim.layout,
        "unrealizedPnlMaxImbalance" /borsh.U64,
        "expiryTs" /borsh.I64,
        "expiryPrice" /borsh.I64,
        "nextFillRecordId" /borsh.U64,
        "nextFundingRateRecordId" /borsh.U64,
        "nextCurveRecordId" /borsh.U64,
        "imfFactor" /borsh.U32,
        "unrealizedPnlImfFactor" /borsh.U32,
        "liquidatorFee" /borsh.U32,
        "ifLiquidationFee" /borsh.U32,
        "marginRatioInitial" /borsh.U32,
        "marginRatioMaintenance" /borsh.U32,
        "unrealizedPnlInitialAssetWeight" /borsh.U32,
        "unrealizedPnlMaintenanceAssetWeight" /borsh.U32,
        "numberOfUsersWithBase" /borsh.U32,
        "numberOfUsers" /borsh.U32,
        "marketIndex" /borsh.U16,
        "status" /types.marketStatus.layout,
        "contractType" /types.contractType.layout,
        "contractTier" /types.contractTier.layout,
        "pausedOperations" /borsh.U8,
        "quoteSpotMarketIndex" /borsh.U16,
        "feeAdjustment" /borsh.I16,
        "fuelBoostPosition" /borsh.U8,
        "fuelBoostTaker" /borsh.U8,
        "fuelBoostMaker" /borsh.U8,
        "poolId" /borsh.U8,
        "highLeverageMarginRatioInitial" /borsh.U16,
        "highLeverageMarginRatioMaintenance" /borsh.U16,
        "padding" /borsh.U8[38],
        )
    #fields
    pubkey: SolPubkey
    amm: types.aMM.AMM
    pnlPool: types.poolBalance.PoolBalance
    name: list[int]
    insuranceClaim: types.insuranceClaim.InsuranceClaim
    unrealizedPnlMaxImbalance: int
    expiryTs: int
    expiryPrice: int
    nextFillRecordId: int
    nextFundingRateRecordId: int
    nextCurveRecordId: int
    imfFactor: int
    unrealizedPnlImfFactor: int
    liquidatorFee: int
    ifLiquidationFee: int
    marginRatioInitial: int
    marginRatioMaintenance: int
    unrealizedPnlInitialAssetWeight: int
    unrealizedPnlMaintenanceAssetWeight: int
    numberOfUsersWithBase: int
    numberOfUsers: int
    marketIndex: int
    status: types.marketStatus.MarketStatusKind
    contractType: types.contractType.ContractTypeKind
    contractTier: types.contractTier.ContractTierKind
    pausedOperations: int
    quoteSpotMarketIndex: int
    feeAdjustment: int
    fuelBoostPosition: int
    fuelBoostTaker: int
    fuelBoostMaker: int
    poolId: int
    highLeverageMarginRatioInitial: int
    highLeverageMarginRatioMaintenance: int
    padding: list[int]
    

    @classmethod
    async def fetch(
        cls,
        conn: AsyncClient,
        address: SolPubkey,
        commitment: typing.Optional[Commitment] = None,
        program_id: SolPubkey = PROGRAM_ID,
    ) -> typing.Optional["PerpMarket"]:
        resp = await conn.get_account_info(address, commitment=commitment)
        info = resp.value
        if info is None:
            return None
        if info.owner != program_id:
            raise ValueError("Account does not belong to this program")
        bytes_data = info.data
        return cls.decode(bytes_data)

    @classmethod
    async def fetch_multiple(
        cls,
        conn: AsyncClient,
        addresses: list[SolPubkey],
        commitment: typing.Optional[Commitment] = None,
        program_id: SolPubkey = PROGRAM_ID,
    ) -> typing.List[typing.Optional["PerpMarket"]]:
        infos = await get_multiple_accounts(conn, addresses, commitment=commitment)
        res: typing.List[typing.Optional["PerpMarket"]] = []
        for info in infos:
            if info is None:
                res.append(None)
                continue
            if info.account.owner != program_id:
                raise ValueError("Account does not belong to this program")
            res.append(cls.decode(info.account.data))
        return res

    @classmethod
    def decode(cls, data: bytes) -> "PerpMarket":
        if data[:ACCOUNT_DISCRIMINATOR_SIZE] != cls.discriminator:
            raise AccountInvalidDiscriminator(
                "The discriminator for this account is invalid"
            )
        dec = PerpMarket.layout.parse(data[ACCOUNT_DISCRIMINATOR_SIZE:])
        return cls(
                pubkey=dec.pubkey,
                amm=types.aMM.AMM.from_decoded(dec.amm),
                pnlPool=types.poolBalance.PoolBalance.from_decoded(dec.pnlPool),
                name=dec.name,
                insuranceClaim=types.insuranceClaim.InsuranceClaim.from_decoded(dec.insuranceClaim),
                unrealizedPnlMaxImbalance=dec.unrealizedPnlMaxImbalance,
                expiryTs=dec.expiryTs,
                expiryPrice=dec.expiryPrice,
                nextFillRecordId=dec.nextFillRecordId,
                nextFundingRateRecordId=dec.nextFundingRateRecordId,
                nextCurveRecordId=dec.nextCurveRecordId,
                imfFactor=dec.imfFactor,
                unrealizedPnlImfFactor=dec.unrealizedPnlImfFactor,
                liquidatorFee=dec.liquidatorFee,
                ifLiquidationFee=dec.ifLiquidationFee,
                marginRatioInitial=dec.marginRatioInitial,
                marginRatioMaintenance=dec.marginRatioMaintenance,
                unrealizedPnlInitialAssetWeight=dec.unrealizedPnlInitialAssetWeight,
                unrealizedPnlMaintenanceAssetWeight=dec.unrealizedPnlMaintenanceAssetWeight,
                numberOfUsersWithBase=dec.numberOfUsersWithBase,
                numberOfUsers=dec.numberOfUsers,
                marketIndex=dec.marketIndex,
                status=types.marketStatus.from_decoded(dec.status),
                contractType=types.contractType.from_decoded(dec.contractType),
                contractTier=types.contractTier.from_decoded(dec.contractTier),
                pausedOperations=dec.pausedOperations,
                quoteSpotMarketIndex=dec.quoteSpotMarketIndex,
                feeAdjustment=dec.feeAdjustment,
                fuelBoostPosition=dec.fuelBoostPosition,
                fuelBoostTaker=dec.fuelBoostTaker,
                fuelBoostMaker=dec.fuelBoostMaker,
                poolId=dec.poolId,
                highLeverageMarginRatioInitial=dec.highLeverageMarginRatioInitial,
                highLeverageMarginRatioMaintenance=dec.highLeverageMarginRatioMaintenance,
                padding=dec.padding,
                )

    def to_json(self) -> PerpMarketJSON:
        return {
                "pubkey": str(self.pubkey),
                "amm": self.amm.to_json(),
                "pnlPool": self.pnlPool.to_json(),
                "name": self.name,
                "insuranceClaim": self.insuranceClaim.to_json(),
                "unrealizedPnlMaxImbalance": self.unrealizedPnlMaxImbalance,
                "expiryTs": self.expiryTs,
                "expiryPrice": self.expiryPrice,
                "nextFillRecordId": self.nextFillRecordId,
                "nextFundingRateRecordId": self.nextFundingRateRecordId,
                "nextCurveRecordId": self.nextCurveRecordId,
                "imfFactor": self.imfFactor,
                "unrealizedPnlImfFactor": self.unrealizedPnlImfFactor,
                "liquidatorFee": self.liquidatorFee,
                "ifLiquidationFee": self.ifLiquidationFee,
                "marginRatioInitial": self.marginRatioInitial,
                "marginRatioMaintenance": self.marginRatioMaintenance,
                "unrealizedPnlInitialAssetWeight": self.unrealizedPnlInitialAssetWeight,
                "unrealizedPnlMaintenanceAssetWeight": self.unrealizedPnlMaintenanceAssetWeight,
                "numberOfUsersWithBase": self.numberOfUsersWithBase,
                "numberOfUsers": self.numberOfUsers,
                "marketIndex": self.marketIndex,
                "status": self.status.to_json(),
                "contractType": self.contractType.to_json(),
                "contractTier": self.contractTier.to_json(),
                "pausedOperations": self.pausedOperations,
                "quoteSpotMarketIndex": self.quoteSpotMarketIndex,
                "feeAdjustment": self.feeAdjustment,
                "fuelBoostPosition": self.fuelBoostPosition,
                "fuelBoostTaker": self.fuelBoostTaker,
                "fuelBoostMaker": self.fuelBoostMaker,
                "poolId": self.poolId,
                "highLeverageMarginRatioInitial": self.highLeverageMarginRatioInitial,
                "highLeverageMarginRatioMaintenance": self.highLeverageMarginRatioMaintenance,
                "padding": self.padding,
                }

    @classmethod
    def from_json(cls, obj: PerpMarketJSON) -> "PerpMarket":
        return cls(
                pubkey=SolPubkey.from_string(obj["pubkey"]),
                amm=types.aMM.AMM.from_json(obj["amm"]),
                pnlPool=types.poolBalance.PoolBalance.from_json(obj["pnlPool"]),
                name=obj["name"],
                insuranceClaim=types.insuranceClaim.InsuranceClaim.from_json(obj["insuranceClaim"]),
                unrealizedPnlMaxImbalance=obj["unrealizedPnlMaxImbalance"],
                expiryTs=obj["expiryTs"],
                expiryPrice=obj["expiryPrice"],
                nextFillRecordId=obj["nextFillRecordId"],
                nextFundingRateRecordId=obj["nextFundingRateRecordId"],
                nextCurveRecordId=obj["nextCurveRecordId"],
                imfFactor=obj["imfFactor"],
                unrealizedPnlImfFactor=obj["unrealizedPnlImfFactor"],
                liquidatorFee=obj["liquidatorFee"],
                ifLiquidationFee=obj["ifLiquidationFee"],
                marginRatioInitial=obj["marginRatioInitial"],
                marginRatioMaintenance=obj["marginRatioMaintenance"],
                unrealizedPnlInitialAssetWeight=obj["unrealizedPnlInitialAssetWeight"],
                unrealizedPnlMaintenanceAssetWeight=obj["unrealizedPnlMaintenanceAssetWeight"],
                numberOfUsersWithBase=obj["numberOfUsersWithBase"],
                numberOfUsers=obj["numberOfUsers"],
                marketIndex=obj["marketIndex"],
                status=types.marketStatus.from_json(obj["status"]),
                contractType=types.contractType.from_json(obj["contractType"]),
                contractTier=types.contractTier.from_json(obj["contractTier"]),
                pausedOperations=obj["pausedOperations"],
                quoteSpotMarketIndex=obj["quoteSpotMarketIndex"],
                feeAdjustment=obj["feeAdjustment"],
                fuelBoostPosition=obj["fuelBoostPosition"],
                fuelBoostTaker=obj["fuelBoostTaker"],
                fuelBoostMaker=obj["fuelBoostMaker"],
                poolId=obj["poolId"],
                highLeverageMarginRatioInitial=obj["highLeverageMarginRatioInitial"],
                highLeverageMarginRatioMaintenance=obj["highLeverageMarginRatioMaintenance"],
                padding=obj["padding"],
                )




