'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey;
from anchorpy.coder.accounts import ACCOUNT_DISCRIMINATOR_SIZE;
from anchorpy.error import AccountInvalidDiscriminator;
from anchorpy.utils.rpc import get_multiple_accounts;
from dataclasses import dataclass;
from solana.rpc.async_api import AsyncClient;
from solana.rpc.commitment import Commitment;
from solana.rpc.types import MemcmpOpts;
from solders.pubkey import Pubkey;
from ..program_id import PROGRAM_ID;


class InsuranceFundStakeJSON(typing.TypedDict):
    authority: str
    ifShares: int
    lastWithdrawRequestShares: int
    ifBase: int
    lastValidTs: int
    lastWithdrawRequestValue: int
    lastWithdrawRequestTs: int
    costBasis: int
    marketIndex: int
    padding: list[int]

@dataclass
class InsuranceFundStake:
    discriminator: typing.ClassVar = b"\x6e\xca\x0e\x2a\x5f\x49\x5a\x5f";

    layout: typing.ClassVar = borsh.CStruct(
        "authority" /BorshPubkey,
        "ifShares" /borsh.U128,
        "lastWithdrawRequestShares" /borsh.U128,
        "ifBase" /borsh.U128,
        "lastValidTs" /borsh.I64,
        "lastWithdrawRequestValue" /borsh.U64,
        "lastWithdrawRequestTs" /borsh.I64,
        "costBasis" /borsh.I64,
        "marketIndex" /borsh.U16,
        "padding" /borsh.U8[14],
        )
    #fields
    authority: Pubkey
    ifShares: int
    lastWithdrawRequestShares: int
    ifBase: int
    lastValidTs: int
    lastWithdrawRequestValue: int
    lastWithdrawRequestTs: int
    costBasis: int
    marketIndex: int
    padding: list[int]
    

    @classmethod
    async def fetch(
        cls,
        conn: AsyncClient,
        address: Pubkey,
        commitment: typing.Optional[Commitment] = None,
        program_id: Pubkey = PROGRAM_ID,
    ) -> typing.Optional["InsuranceFundStake"]:
        resp = await conn.get_account_info(address, commitment=commitment)
        info = resp.value
        if info is None:
            return None
        if info.owner != program_id:
            raise ValueError("Account does not belong to this program")
        bytes_data = info.data
        return cls.decode(bytes_data)

    @classmethod
    async def fetch_multiple(
        cls,
        conn: AsyncClient,
        addresses: list[Pubkey],
        commitment: typing.Optional[Commitment] = None,
        program_id: Pubkey = PROGRAM_ID,
    ) -> typing.List[typing.Optional["InsuranceFundStake"]]:
        infos = await get_multiple_accounts(conn, addresses, commitment=commitment)
        res: typing.List[typing.Optional["InsuranceFundStake"]] = []
        for info in infos:
            if info is None:
                res.append(None)
                continue
            if info.account.owner != program_id:
                raise ValueError("Account does not belong to this program")
            res.append(cls.decode(info.account.data))
        return res

    @classmethod
    def decode(cls, data: bytes) -> "InsuranceFundStake":
        if data[:ACCOUNT_DISCRIMINATOR_SIZE] != cls.discriminator:
            raise AccountInvalidDiscriminator(
                "The discriminator for this account is invalid"
            )
        dec = InsuranceFundStake.layout.parse(data[ACCOUNT_DISCRIMINATOR_SIZE:])
        return cls(
                authority=dec.authority,
                ifShares=dec.ifShares,
                lastWithdrawRequestShares=dec.lastWithdrawRequestShares,
                ifBase=dec.ifBase,
                lastValidTs=dec.lastValidTs,
                lastWithdrawRequestValue=dec.lastWithdrawRequestValue,
                lastWithdrawRequestTs=dec.lastWithdrawRequestTs,
                costBasis=dec.costBasis,
                marketIndex=dec.marketIndex,
                padding=dec.padding,
                )

    def to_json(self) -> InsuranceFundStakeJSON:
        return {
                "authority": str(self.authority),
                "ifShares": self.ifShares,
                "lastWithdrawRequestShares": self.lastWithdrawRequestShares,
                "ifBase": self.ifBase,
                "lastValidTs": self.lastValidTs,
                "lastWithdrawRequestValue": self.lastWithdrawRequestValue,
                "lastWithdrawRequestTs": self.lastWithdrawRequestTs,
                "costBasis": self.costBasis,
                "marketIndex": self.marketIndex,
                "padding": self.padding,
                }

    @classmethod
    def from_json(cls, obj: InsuranceFundStakeJSON) -> "InsuranceFundStake":
        return cls(
                authority=Pubkey.from_string(obj["authority"]),
                ifShares=obj["ifShares"],
                lastWithdrawRequestShares=obj["lastWithdrawRequestShares"],
                ifBase=obj["ifBase"],
                lastValidTs=obj["lastValidTs"],
                lastWithdrawRequestValue=obj["lastWithdrawRequestValue"],
                lastWithdrawRequestTs=obj["lastWithdrawRequestTs"],
                costBasis=obj["costBasis"],
                marketIndex=obj["marketIndex"],
                padding=obj["padding"],
                )




