'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey;
from anchorpy.coder.accounts import ACCOUNT_DISCRIMINATOR_SIZE;
from anchorpy.error import AccountInvalidDiscriminator;
from anchorpy.utils.rpc import get_multiple_accounts;
from dataclasses import dataclass;
from solana.rpc.async_api import AsyncClient;
from solana.rpc.commitment import Commitment;
from solana.rpc.types import MemcmpOpts;
from solders.pubkey import Pubkey;
from .. import types;
from ..program_id import PROGRAM_ID;


class SerumV3FulfillmentConfigJSON(typing.TypedDict):
    pubkey: str
    serumProgramId: str
    serumMarket: str
    serumRequestQueue: str
    serumEventQueue: str
    serumBids: str
    serumAsks: str
    serumBaseVault: str
    serumQuoteVault: str
    serumOpenOrders: str
    serumSignerNonce: int
    marketIndex: int
    fulfillmentType: types.spotFulfillmentType.SpotFulfillmentTypeJSON
    status: types.spotFulfillmentConfigStatus.SpotFulfillmentConfigStatusJSON
    padding: list[int]

@dataclass
class SerumV3FulfillmentConfig:
    discriminator: typing.ClassVar = b"\x41\xa0\xc5\x70\xef\xa8\x67\xb9";

    layout: typing.ClassVar = borsh.CStruct(
        "pubkey" /BorshPubkey,
        "serumProgramId" /BorshPubkey,
        "serumMarket" /BorshPubkey,
        "serumRequestQueue" /BorshPubkey,
        "serumEventQueue" /BorshPubkey,
        "serumBids" /BorshPubkey,
        "serumAsks" /BorshPubkey,
        "serumBaseVault" /BorshPubkey,
        "serumQuoteVault" /BorshPubkey,
        "serumOpenOrders" /BorshPubkey,
        "serumSignerNonce" /borsh.U64,
        "marketIndex" /borsh.U16,
        "fulfillmentType" /types.spotFulfillmentType.layout,
        "status" /types.spotFulfillmentConfigStatus.layout,
        "padding" /borsh.U8[4],
        )
    #fields
    pubkey: Pubkey
    serumProgramId: Pubkey
    serumMarket: Pubkey
    serumRequestQueue: Pubkey
    serumEventQueue: Pubkey
    serumBids: Pubkey
    serumAsks: Pubkey
    serumBaseVault: Pubkey
    serumQuoteVault: Pubkey
    serumOpenOrders: Pubkey
    serumSignerNonce: int
    marketIndex: int
    fulfillmentType: types.spotFulfillmentType.SpotFulfillmentTypeKind
    status: types.spotFulfillmentConfigStatus.SpotFulfillmentConfigStatusKind
    padding: list[int]
    

    @classmethod
    async def fetch(
        cls,
        conn: AsyncClient,
        address: Pubkey,
        commitment: typing.Optional[Commitment] = None,
        program_id: Pubkey = PROGRAM_ID,
    ) -> typing.Optional["SerumV3FulfillmentConfig"]:
        resp = await conn.get_account_info(address, commitment=commitment)
        info = resp.value
        if info is None:
            return None
        if info.owner != program_id:
            raise ValueError("Account does not belong to this program")
        bytes_data = info.data
        return cls.decode(bytes_data)

    @classmethod
    async def fetch_multiple(
        cls,
        conn: AsyncClient,
        addresses: list[Pubkey],
        commitment: typing.Optional[Commitment] = None,
        program_id: Pubkey = PROGRAM_ID,
    ) -> typing.List[typing.Optional["SerumV3FulfillmentConfig"]]:
        infos = await get_multiple_accounts(conn, addresses, commitment=commitment)
        res: typing.List[typing.Optional["SerumV3FulfillmentConfig"]] = []
        for info in infos:
            if info is None:
                res.append(None)
                continue
            if info.account.owner != program_id:
                raise ValueError("Account does not belong to this program")
            res.append(cls.decode(info.account.data))
        return res

    @classmethod
    def decode(cls, data: bytes) -> "SerumV3FulfillmentConfig":
        if data[:ACCOUNT_DISCRIMINATOR_SIZE] != cls.discriminator:
            raise AccountInvalidDiscriminator(
                "The discriminator for this account is invalid"
            )
        dec = SerumV3FulfillmentConfig.layout.parse(data[ACCOUNT_DISCRIMINATOR_SIZE:])
        return cls(
                pubkey=dec.pubkey,
                serumProgramId=dec.serumProgramId,
                serumMarket=dec.serumMarket,
                serumRequestQueue=dec.serumRequestQueue,
                serumEventQueue=dec.serumEventQueue,
                serumBids=dec.serumBids,
                serumAsks=dec.serumAsks,
                serumBaseVault=dec.serumBaseVault,
                serumQuoteVault=dec.serumQuoteVault,
                serumOpenOrders=dec.serumOpenOrders,
                serumSignerNonce=dec.serumSignerNonce,
                marketIndex=dec.marketIndex,
                fulfillmentType=types.spotFulfillmentType.from_decoded(dec.fulfillmentType),
                status=types.spotFulfillmentConfigStatus.from_decoded(dec.status),
                padding=dec.padding,
                )

    def to_json(self) -> SerumV3FulfillmentConfigJSON:
        return {
                "pubkey": str(self.pubkey),
                "serumProgramId": str(self.serumProgramId),
                "serumMarket": str(self.serumMarket),
                "serumRequestQueue": str(self.serumRequestQueue),
                "serumEventQueue": str(self.serumEventQueue),
                "serumBids": str(self.serumBids),
                "serumAsks": str(self.serumAsks),
                "serumBaseVault": str(self.serumBaseVault),
                "serumQuoteVault": str(self.serumQuoteVault),
                "serumOpenOrders": str(self.serumOpenOrders),
                "serumSignerNonce": self.serumSignerNonce,
                "marketIndex": self.marketIndex,
                "fulfillmentType": self.fulfillmentType.to_json(),
                "status": self.status.to_json(),
                "padding": self.padding.to_json(),
                }

    @classmethod
    def from_json(cls, obj: SerumV3FulfillmentConfigJSON) -> "SerumV3FulfillmentConfig":
        return cls(
                pubkey=Pubkey.from_string(obj["pubkey"]),
                serumProgramId=Pubkey.from_string(obj["serumProgramId"]),
                serumMarket=Pubkey.from_string(obj["serumMarket"]),
                serumRequestQueue=Pubkey.from_string(obj["serumRequestQueue"]),
                serumEventQueue=Pubkey.from_string(obj["serumEventQueue"]),
                serumBids=Pubkey.from_string(obj["serumBids"]),
                serumAsks=Pubkey.from_string(obj["serumAsks"]),
                serumBaseVault=Pubkey.from_string(obj["serumBaseVault"]),
                serumQuoteVault=Pubkey.from_string(obj["serumQuoteVault"]),
                serumOpenOrders=Pubkey.from_string(obj["serumOpenOrders"]),
                serumSignerNonce=obj["serumSignerNonce"],
                marketIndex=obj["marketIndex"],
                fulfillmentType=types.spotFulfillmentType.from_json(obj["fulfillmentType"]),
                status=types.spotFulfillmentConfigStatus.from_json(obj["status"]),
                padding=obj["padding"],
                )




