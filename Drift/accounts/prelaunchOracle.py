'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey;
from anchorpy.coder.accounts import ACCOUNT_DISCRIMINATOR_SIZE;
from anchorpy.error import AccountInvalidDiscriminator;
from anchorpy.utils.rpc import get_multiple_accounts;
from dataclasses import dataclass;
from solana.rpc.async_api import AsyncClient;
from solana.rpc.commitment import Commitment;
from solana.rpc.types import MemcmpOpts;
from solders.pubkey import Pubkey;
from ..program_id import PROGRAM_ID;


class PrelaunchOracleJSON(typing.TypedDict):
    price: int
    maxPrice: int
    confidence: int
    lastUpdateSlot: int
    ammLastUpdateSlot: int
    perpMarketIndex: int
    padding: list[int]

@dataclass
class PrelaunchOracle:
    discriminator: typing.ClassVar = b"\x5c\x0e\x8b\xea\x48\xf4\x44\x1a";

    layout: typing.ClassVar = borsh.CStruct(
        "price" /borsh.I64,
        "maxPrice" /borsh.I64,
        "confidence" /borsh.U64,
        "lastUpdateSlot" /borsh.U64,
        "ammLastUpdateSlot" /borsh.U64,
        "perpMarketIndex" /borsh.U16,
        "padding" /borsh.U8[70],
        )
    #fields
    price: int
    maxPrice: int
    confidence: int
    lastUpdateSlot: int
    ammLastUpdateSlot: int
    perpMarketIndex: int
    padding: list[int]
    

    @classmethod
    async def fetch(
        cls,
        conn: AsyncClient,
        address: Pubkey,
        commitment: typing.Optional[Commitment] = None,
        program_id: Pubkey = PROGRAM_ID,
    ) -> typing.Optional["PrelaunchOracle"]:
        resp = await conn.get_account_info(address, commitment=commitment)
        info = resp.value
        if info is None:
            return None
        if info.owner != program_id:
            raise ValueError("Account does not belong to this program")
        bytes_data = info.data
        return cls.decode(bytes_data)

    @classmethod
    async def fetch_multiple(
        cls,
        conn: AsyncClient,
        addresses: list[Pubkey],
        commitment: typing.Optional[Commitment] = None,
        program_id: Pubkey = PROGRAM_ID,
    ) -> typing.List[typing.Optional["PrelaunchOracle"]]:
        infos = await get_multiple_accounts(conn, addresses, commitment=commitment)
        res: typing.List[typing.Optional["PrelaunchOracle"]] = []
        for info in infos:
            if info is None:
                res.append(None)
                continue
            if info.account.owner != program_id:
                raise ValueError("Account does not belong to this program")
            res.append(cls.decode(info.account.data))
        return res

    @classmethod
    def decode(cls, data: bytes) -> "PrelaunchOracle":
        if data[:ACCOUNT_DISCRIMINATOR_SIZE] != cls.discriminator:
            raise AccountInvalidDiscriminator(
                "The discriminator for this account is invalid"
            )
        dec = PrelaunchOracle.layout.parse(data[ACCOUNT_DISCRIMINATOR_SIZE:])
        return cls(
           price=dec.price,
           maxPrice=dec.maxPrice,
           confidence=dec.confidence,
           lastUpdateSlot=dec.lastUpdateSlot,
           ammLastUpdateSlot=dec.ammLastUpdateSlot,
           perpMarketIndex=dec.perpMarketIndex,
           padding=dec.padding,
        )

    def to_json(self) -> PrelaunchOracleJSON:
        return {
                "price": self.price,
                "maxPrice": self.maxPrice,
                "confidence": self.confidence,
                "lastUpdateSlot": self.lastUpdateSlot,
                "ammLastUpdateSlot": self.ammLastUpdateSlot,
                "perpMarketIndex": self.perpMarketIndex,
                "padding": self.padding,
                }

    @classmethod
    def from_json(cls, obj: PrelaunchOracleJSON) -> "PrelaunchOracle":
        return cls(
                price=obj["price"],
                maxPrice=obj["maxPrice"],
                confidence=obj["confidence"],
                lastUpdateSlot=obj["lastUpdateSlot"],
                ammLastUpdateSlot=obj["ammLastUpdateSlot"],
                perpMarketIndex=obj["perpMarketIndex"],
                padding=obj["padding"],
                )




