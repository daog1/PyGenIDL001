'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey;
from anchorpy.coder.accounts import ACCOUNT_DISCRIMINATOR_SIZE;
from anchorpy.error import AccountInvalidDiscriminator;
from anchorpy.utils.rpc import get_multiple_accounts;
from dataclasses import dataclass;
from solana.rpc.async_api import AsyncClient;
from solana.rpc.commitment import Commitment;
from solana.rpc.types import MemcmpOpts;
from solders.pubkey import Pubkey;
from .. import types;
from ..program_id import PROGRAM_ID;


class UserStatsJSON(typing.TypedDict):
    authority: str
    referrer: str
    fees: types.userFees.UserFeesJSON
    nextEpochTs: int
    makerVolume30d: int
    takerVolume30d: int
    fillerVolume30d: int
    lastMakerVolume30dTs: int
    lastTakerVolume30dTs: int
    lastFillerVolume30dTs: int
    ifStakedQuoteAssetAmount: int
    numberOfSubAccounts: int
    numberOfSubAccountsCreated: int
    referrerStatus: int
    disableUpdatePerpBidAskTwap: bool
    padding1: list[int]
    fuelInsurance: int
    fuelDeposits: int
    fuelBorrows: int
    fuelPositions: int
    fuelTaker: int
    fuelMaker: int
    ifStakedGovTokenAmount: int
    lastFuelIfBonusUpdateTs: int
    padding: list[int]

@dataclass
class UserStats:
    discriminator: typing.ClassVar = b"\xb0\xdf\x88\x1b\x7a\x4f\x20\xe3";

    layout: typing.ClassVar = borsh.CStruct(
        "authority" /BorshPubkey,
        "referrer" /BorshPubkey,
        "fees" /types.userFees.UserFees.layout,
        "nextEpochTs" /borsh.I64,
        "makerVolume30d" /borsh.U64,
        "takerVolume30d" /borsh.U64,
        "fillerVolume30d" /borsh.U64,
        "lastMakerVolume30dTs" /borsh.I64,
        "lastTakerVolume30dTs" /borsh.I64,
        "lastFillerVolume30dTs" /borsh.I64,
        "ifStakedQuoteAssetAmount" /borsh.U64,
        "numberOfSubAccounts" /borsh.U16,
        "numberOfSubAccountsCreated" /borsh.U16,
        "referrerStatus" /borsh.U8,
        "disableUpdatePerpBidAskTwap" /borsh.U8,
        "padding1" /borsh.U8[2],
        "fuelInsurance" /borsh.U32,
        "fuelDeposits" /borsh.U32,
        "fuelBorrows" /borsh.U32,
        "fuelPositions" /borsh.U32,
        "fuelTaker" /borsh.U32,
        "fuelMaker" /borsh.U32,
        "ifStakedGovTokenAmount" /borsh.U64,
        "lastFuelIfBonusUpdateTs" /borsh.U32,
        "padding" /borsh.U8[12],
        )
    #fields
    authority: Pubkey
    referrer: Pubkey
    fees: types.userFees.UserFees
    nextEpochTs: int
    makerVolume30d: int
    takerVolume30d: int
    fillerVolume30d: int
    lastMakerVolume30dTs: int
    lastTakerVolume30dTs: int
    lastFillerVolume30dTs: int
    ifStakedQuoteAssetAmount: int
    numberOfSubAccounts: int
    numberOfSubAccountsCreated: int
    referrerStatus: int
    disableUpdatePerpBidAskTwap: bool
    padding1: list[int]
    fuelInsurance: int
    fuelDeposits: int
    fuelBorrows: int
    fuelPositions: int
    fuelTaker: int
    fuelMaker: int
    ifStakedGovTokenAmount: int
    lastFuelIfBonusUpdateTs: int
    padding: list[int]
    

    @classmethod
    async def fetch(
        cls,
        conn: AsyncClient,
        address: Pubkey,
        commitment: typing.Optional[Commitment] = None,
        program_id: Pubkey = PROGRAM_ID,
    ) -> typing.Optional["UserStats"]:
        resp = await conn.get_account_info(address, commitment=commitment)
        info = resp.value
        if info is None:
            return None
        if info.owner != program_id:
            raise ValueError("Account does not belong to this program")
        bytes_data = info.data
        return cls.decode(bytes_data)

    @classmethod
    async def fetch_multiple(
        cls,
        conn: AsyncClient,
        addresses: list[Pubkey],
        commitment: typing.Optional[Commitment] = None,
        program_id: Pubkey = PROGRAM_ID,
    ) -> typing.List[typing.Optional["UserStats"]]:
        infos = await get_multiple_accounts(conn, addresses, commitment=commitment)
        res: typing.List[typing.Optional["UserStats"]] = []
        for info in infos:
            if info is None:
                res.append(None)
                continue
            if info.account.owner != program_id:
                raise ValueError("Account does not belong to this program")
            res.append(cls.decode(info.account.data))
        return res

    @classmethod
    def decode(cls, data: bytes) -> "UserStats":
        if data[:ACCOUNT_DISCRIMINATOR_SIZE] != cls.discriminator:
            raise AccountInvalidDiscriminator(
                "The discriminator for this account is invalid"
            )
        dec = UserStats.layout.parse(data[ACCOUNT_DISCRIMINATOR_SIZE:])
        return cls(
           authority=dec.authority,
           referrer=dec.referrer,
           fees=types.userFees.UserFees.from_decoded(dec.fees),
           nextEpochTs=dec.nextEpochTs,
           makerVolume30d=dec.makerVolume30d,
           takerVolume30d=dec.takerVolume30d,
           fillerVolume30d=dec.fillerVolume30d,
           lastMakerVolume30dTs=dec.lastMakerVolume30dTs,
           lastTakerVolume30dTs=dec.lastTakerVolume30dTs,
           lastFillerVolume30dTs=dec.lastFillerVolume30dTs,
           ifStakedQuoteAssetAmount=dec.ifStakedQuoteAssetAmount,
           numberOfSubAccounts=dec.numberOfSubAccounts,
           numberOfSubAccountsCreated=dec.numberOfSubAccountsCreated,
           referrerStatus=dec.referrerStatus,
           disableUpdatePerpBidAskTwap=dec.disableUpdatePerpBidAskTwap,
           padding1=dec.padding1,
           fuelInsurance=dec.fuelInsurance,
           fuelDeposits=dec.fuelDeposits,
           fuelBorrows=dec.fuelBorrows,
           fuelPositions=dec.fuelPositions,
           fuelTaker=dec.fuelTaker,
           fuelMaker=dec.fuelMaker,
           ifStakedGovTokenAmount=dec.ifStakedGovTokenAmount,
           lastFuelIfBonusUpdateTs=dec.lastFuelIfBonusUpdateTs,
           padding=dec.padding,
        )

    def to_json(self) -> UserStatsJSON:
        return {
                "authority": str(self.authority),
                "referrer": str(self.referrer),
                "fees": self.fees.to_json(),
                "nextEpochTs": self.nextEpochTs,
                "makerVolume30d": self.makerVolume30d,
                "takerVolume30d": self.takerVolume30d,
                "fillerVolume30d": self.fillerVolume30d,
                "lastMakerVolume30dTs": self.lastMakerVolume30dTs,
                "lastTakerVolume30dTs": self.lastTakerVolume30dTs,
                "lastFillerVolume30dTs": self.lastFillerVolume30dTs,
                "ifStakedQuoteAssetAmount": self.ifStakedQuoteAssetAmount,
                "numberOfSubAccounts": self.numberOfSubAccounts,
                "numberOfSubAccountsCreated": self.numberOfSubAccountsCreated,
                "referrerStatus": self.referrerStatus,
                "disableUpdatePerpBidAskTwap": self.disableUpdatePerpBidAskTwap,
                "padding1": self.padding1,
                "fuelInsurance": self.fuelInsurance,
                "fuelDeposits": self.fuelDeposits,
                "fuelBorrows": self.fuelBorrows,
                "fuelPositions": self.fuelPositions,
                "fuelTaker": self.fuelTaker,
                "fuelMaker": self.fuelMaker,
                "ifStakedGovTokenAmount": self.ifStakedGovTokenAmount,
                "lastFuelIfBonusUpdateTs": self.lastFuelIfBonusUpdateTs,
                "padding": self.padding,
                }

    @classmethod
    def from_json(cls, obj: UserStatsJSON) -> "UserStats":
        return cls(
                authority=Pubkey.from_string(obj["authority"]),
                referrer=Pubkey.from_string(obj["referrer"]),
                fees=types.userFees.UserFees.from_json(obj["fees"]),
                nextEpochTs=obj["nextEpochTs"],
                makerVolume30d=obj["makerVolume30d"],
                takerVolume30d=obj["takerVolume30d"],
                fillerVolume30d=obj["fillerVolume30d"],
                lastMakerVolume30dTs=obj["lastMakerVolume30dTs"],
                lastTakerVolume30dTs=obj["lastTakerVolume30dTs"],
                lastFillerVolume30dTs=obj["lastFillerVolume30dTs"],
                ifStakedQuoteAssetAmount=obj["ifStakedQuoteAssetAmount"],
                numberOfSubAccounts=obj["numberOfSubAccounts"],
                numberOfSubAccountsCreated=obj["numberOfSubAccountsCreated"],
                referrerStatus=obj["referrerStatus"],
                disableUpdatePerpBidAskTwap=obj["disableUpdatePerpBidAskTwap"],
                padding1=obj["padding1"],
                fuelInsurance=obj["fuelInsurance"],
                fuelDeposits=obj["fuelDeposits"],
                fuelBorrows=obj["fuelBorrows"],
                fuelPositions=obj["fuelPositions"],
                fuelTaker=obj["fuelTaker"],
                fuelMaker=obj["fuelMaker"],
                ifStakedGovTokenAmount=obj["ifStakedGovTokenAmount"],
                lastFuelIfBonusUpdateTs=obj["lastFuelIfBonusUpdateTs"],
                padding=obj["padding"],
                )




