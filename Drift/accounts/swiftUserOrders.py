'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey;
from anchorpy.coder.accounts import ACCOUNT_DISCRIMINATOR_SIZE;
from anchorpy.error import AccountInvalidDiscriminator;
from anchorpy.utils.rpc import get_multiple_accounts;
from dataclasses import dataclass;
from solana.rpc.async_api import AsyncClient;
from solana.rpc.commitment import Commitment;
from solana.rpc.types import MemcmpOpts;
from solders.pubkey import Pubkey;
from .. import types;
from ..program_id import PROGRAM_ID;


class SwiftUserOrdersJSON(typing.TypedDict):
    userPubkey: str
    padding: int
    swiftOrderData: list[types.swiftOrderId.SwiftOrderIdJSON]

@dataclass
class SwiftUserOrders:
    discriminator: typing.ClassVar = b"\x43\x79\x7f\x62\x15\x32\x39\xc1";

    layout: typing.ClassVar = borsh.CStruct(
        "userPubkey" /BorshPubkey,
        "padding" /borsh.U32,
        "swiftOrderData" /types.swiftOrderId.SwiftOrderId.layout[0],
        )
    #fields
    userPubkey: Pubkey
    padding: int
    swiftOrderData: list[types.swiftOrderId.SwiftOrderId]
    

    @classmethod
    async def fetch(
        cls,
        conn: AsyncClient,
        address: Pubkey,
        commitment: typing.Optional[Commitment] = None,
        program_id: Pubkey = PROGRAM_ID,
    ) -> typing.Optional["SwiftUserOrders"]:
        resp = await conn.get_account_info(address, commitment=commitment)
        info = resp.value
        if info is None:
            return None
        if info.owner != program_id:
            raise ValueError("Account does not belong to this program")
        bytes_data = info.data
        return cls.decode(bytes_data)

    @classmethod
    async def fetch_multiple(
        cls,
        conn: AsyncClient,
        addresses: list[Pubkey],
        commitment: typing.Optional[Commitment] = None,
        program_id: Pubkey = PROGRAM_ID,
    ) -> typing.List[typing.Optional["SwiftUserOrders"]]:
        infos = await get_multiple_accounts(conn, addresses, commitment=commitment)
        res: typing.List[typing.Optional["SwiftUserOrders"]] = []
        for info in infos:
            if info is None:
                res.append(None)
                continue
            if info.account.owner != program_id:
                raise ValueError("Account does not belong to this program")
            res.append(cls.decode(info.account.data))
        return res

    @classmethod
    def decode(cls, data: bytes) -> "SwiftUserOrders":
        if data[:ACCOUNT_DISCRIMINATOR_SIZE] != cls.discriminator:
            raise AccountInvalidDiscriminator(
                "The discriminator for this account is invalid"
            )
        dec = SwiftUserOrders.layout.parse(data[ACCOUNT_DISCRIMINATOR_SIZE:])
        return cls(
                userPubkey=dec.userPubkey,
                padding=dec.padding,
                swiftOrderData=dec.swiftOrderData,
                )

    def to_json(self) -> SwiftUserOrdersJSON:
        return {
                "userPubkey": str(self.userPubkey),
                "padding": self.padding,
                "swiftOrderData": list(map(lambda item:item.to_json(),self.swiftOrderData)),
                }

    @classmethod
    def from_json(cls, obj: SwiftUserOrdersJSON) -> "SwiftUserOrders":
        return cls(
                userPubkey=Pubkey.from_string(obj["userPubkey"]),
                padding=obj["padding"],
                swiftOrderData=list(map(lambda item:types.swiftOrderId.SwiftOrderId.from_json(item),obj["swiftOrderData"])),
                )




