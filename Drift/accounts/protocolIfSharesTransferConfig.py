'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey;
from anchorpy.coder.accounts import ACCOUNT_DISCRIMINATOR_SIZE;
from anchorpy.error import AccountInvalidDiscriminator;
from anchorpy.utils.rpc import get_multiple_accounts;
from dataclasses import dataclass;
from solana.rpc.async_api import AsyncClient;
from solana.rpc.commitment import Commitment;
from solana.rpc.types import MemcmpOpts;
from solders.pubkey import Pubkey as SolPubkey;
from ..program_id import PROGRAM_ID;


class ProtocolIfSharesTransferConfigJSON(typing.TypedDict):
    whitelistedSigners: list[str]
    maxTransferPerEpoch: int
    currentEpochTransfer: int
    nextEpochTs: int
    padding: list[int]

@dataclass
class ProtocolIfSharesTransferConfig:
    discriminator: typing.ClassVar = b"\xbc\x01\xd5\x62\x17\x94\x1e\x01";

    layout: typing.ClassVar = borsh.CStruct(
        "whitelistedSigners" /BorshPubkey[4],
        "maxTransferPerEpoch" /borsh.U128,
        "currentEpochTransfer" /borsh.U128,
        "nextEpochTs" /borsh.I64,
        "padding" /borsh.U128[8],
        )
    #fields
    whitelistedSigners: list[SolPubkey]
    maxTransferPerEpoch: int
    currentEpochTransfer: int
    nextEpochTs: int
    padding: list[int]
    

    @classmethod
    async def fetch(
        cls,
        conn: AsyncClient,
        address: SolPubkey,
        commitment: typing.Optional[Commitment] = None,
        program_id: SolPubkey = PROGRAM_ID,
    ) -> typing.Optional["ProtocolIfSharesTransferConfig"]:
        resp = await conn.get_account_info(address, commitment=commitment)
        info = resp.value
        if info is None:
            return None
        if info.owner != program_id:
            raise ValueError("Account does not belong to this program")
        bytes_data = info.data
        return cls.decode(bytes_data)

    @classmethod
    async def fetch_multiple(
        cls,
        conn: AsyncClient,
        addresses: list[SolPubkey],
        commitment: typing.Optional[Commitment] = None,
        program_id: SolPubkey = PROGRAM_ID,
    ) -> typing.List[typing.Optional["ProtocolIfSharesTransferConfig"]]:
        infos = await get_multiple_accounts(conn, addresses, commitment=commitment)
        res: typing.List[typing.Optional["ProtocolIfSharesTransferConfig"]] = []
        for info in infos:
            if info is None:
                res.append(None)
                continue
            if info.account.owner != program_id:
                raise ValueError("Account does not belong to this program")
            res.append(cls.decode(info.account.data))
        return res

    @classmethod
    def decode(cls, data: bytes) -> "ProtocolIfSharesTransferConfig":
        if data[:ACCOUNT_DISCRIMINATOR_SIZE] != cls.discriminator:
            raise AccountInvalidDiscriminator(
                "The discriminator for this account is invalid"
            )
        dec = ProtocolIfSharesTransferConfig.layout.parse(data[ACCOUNT_DISCRIMINATOR_SIZE:])
        return cls(
                whitelistedSigners=dec.whitelistedSigners,
                maxTransferPerEpoch=dec.maxTransferPerEpoch,
                currentEpochTransfer=dec.currentEpochTransfer,
                nextEpochTs=dec.nextEpochTs,
                padding=dec.padding,
                )

    def to_json(self) -> ProtocolIfSharesTransferConfigJSON:
        return {
                "whitelistedSigners": list(map(lambda item:str(item),self.whitelistedSigners)),
                "maxTransferPerEpoch": self.maxTransferPerEpoch,
                "currentEpochTransfer": self.currentEpochTransfer,
                "nextEpochTs": self.nextEpochTs,
                "padding": list(map(lambda item:item,self.padding)),
                }

    @classmethod
    def from_json(cls, obj: ProtocolIfSharesTransferConfigJSON) -> "ProtocolIfSharesTransferConfig":
        return cls(
                whitelistedSigners=list(map(lambda item:SolPubkey.from_string(item),obj["whitelistedSigners"])),
                maxTransferPerEpoch=obj["maxTransferPerEpoch"],
                currentEpochTransfer=obj["currentEpochTransfer"],
                nextEpochTs=obj["nextEpochTs"],
                padding=list(map(lambda item:item,obj["padding"])),
                )




