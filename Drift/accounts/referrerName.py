'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey;
from anchorpy.coder.accounts import ACCOUNT_DISCRIMINATOR_SIZE;
from anchorpy.error import AccountInvalidDiscriminator;
from anchorpy.utils.rpc import get_multiple_accounts;
from dataclasses import dataclass;
from solana.rpc.async_api import AsyncClient;
from solana.rpc.commitment import Commitment;
from solana.rpc.types import MemcmpOpts;
from solders.pubkey import Pubkey;
from ..program_id import PROGRAM_ID;


class ReferrerNameJSON(typing.TypedDict):
    authority: str
    user: str
    userStats: str
    name: str

@dataclass
class ReferrerName:
    discriminator: typing.ClassVar = b"\x69\x85\xaa\x6e\x34\x2a\x1c\xb6";

    layout: typing.ClassVar = borsh.CStruct(
        "authority" /BorshPubkey,
        "user" /BorshPubkey,
        "userStats" /BorshPubkey,
        "name" /borsh.visitFixedSizeType,
        )
    #fields
    authority: Pubkey
    user: Pubkey
    userStats: Pubkey
    name: borsh.String
    

    @classmethod
    async def fetch(
        cls,
        conn: AsyncClient,
        address: Pubkey,
        commitment: typing.Optional[Commitment] = None,
        program_id: Pubkey = PROGRAM_ID,
    ) -> typing.Optional["ReferrerName"]:
        resp = await conn.get_account_info(address, commitment=commitment)
        info = resp.value
        if info is None:
            return None
        if info.owner != program_id:
            raise ValueError("Account does not belong to this program")
        bytes_data = info.data
        return cls.decode(bytes_data)

    @classmethod
    async def fetch_multiple(
        cls,
        conn: AsyncClient,
        addresses: list[Pubkey],
        commitment: typing.Optional[Commitment] = None,
        program_id: Pubkey = PROGRAM_ID,
    ) -> typing.List[typing.Optional["ReferrerName"]]:
        infos = await get_multiple_accounts(conn, addresses, commitment=commitment)
        res: typing.List[typing.Optional["ReferrerName"]] = []
        for info in infos:
            if info is None:
                res.append(None)
                continue
            if info.account.owner != program_id:
                raise ValueError("Account does not belong to this program")
            res.append(cls.decode(info.account.data))
        return res

    @classmethod
    def decode(cls, data: bytes) -> "ReferrerName":
        if data[:ACCOUNT_DISCRIMINATOR_SIZE] != cls.discriminator:
            raise AccountInvalidDiscriminator(
                "The discriminator for this account is invalid"
            )
        dec = ReferrerName.layout.parse(data[ACCOUNT_DISCRIMINATOR_SIZE:])
        return cls(
           authority=dec.authority,
           user=dec.user,
           userStats=dec.userStats,
           name=dec.name,
        )

    def to_json(self) -> ReferrerNameJSON:
        return {
                "authority": str(self.authority),
                "user": str(self.user),
                "userStats": str(self.userStats),
                "name": self.name,
                }

    @classmethod
    def from_json(cls, obj: ReferrerNameJSON) -> "ReferrerName":
        return cls(
                authority=Pubkey.from_string(obj["authority"]),
                user=Pubkey.from_string(obj["user"]),
                userStats=Pubkey.from_string(obj["userStats"]),
                name=obj["name"],
                )




