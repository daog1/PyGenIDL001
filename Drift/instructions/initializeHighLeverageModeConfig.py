'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from construct import Container;
from dataclasses import dataclass;
from solders.instruction import AccountMeta, Instruction;
from solders.pubkey import Pubkey as SolPubkey;
from solders.sysvar import RENT;
from ..program_id import PROGRAM_ID;
class InitializeHighLeverageModeConfigArgs(typing.TypedDict):
    maxUsers:int


layout = borsh.CStruct(
    "maxUsers" /borsh.U32,
    )


class InitializeHighLeverageModeConfigAccounts(typing.TypedDict):
    admin:SolPubkey
    highLeverageModeConfig:SolPubkey
    state:SolPubkey
    rent:SolPubkey
    systemProgram:SolPubkey

def InitializeHighLeverageModeConfig(
    args: InitializeHighLeverageModeConfigArgs,
    accounts: InitializeHighLeverageModeConfigAccounts,
    program_id: SolPubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["admin"], is_signer=True, is_writable=True),
    AccountMeta(pubkey=accounts["highLeverageModeConfig"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["state"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["rent"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["systemProgram"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=RENT, is_signer=False, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\xd5\xa7\x5d\xf6\xd0\x82\x5a\xf8"
    encoded_args = layout.build({
        "maxUsers":args["maxUsers"],
       })

    data = identifier + encoded_args
    return Instruction(program_id,data,keys)





