'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from solders.instruction import AccountMeta, Instruction
from solders.pubkey import Pubkey as SolPubkey
from ..program_id import PROGRAM_ID
class InitializeUserArgs(typing.TypedDict):
    subAccountId:int
    name:list[int]


layout = borsh.CStruct(
    "subAccountId" /borsh.U16,
    "name" /borsh.U8[32],
    )


class InitializeUserAccounts(typing.TypedDict):
    user:SolPubkey
    userStats:SolPubkey
    state:SolPubkey
    authority:SolPubkey
    payer:SolPubkey
    rent:SolPubkey
    systemProgram:SolPubkey

def InitializeUser(
    args: InitializeUserArgs,
    accounts: InitializeUserAccounts,
    program_id: SolPubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["user"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["userStats"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["state"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["authority"], is_signer=True, is_writable=False),
    AccountMeta(pubkey=accounts["payer"], is_signer=True, is_writable=True),
    AccountMeta(pubkey=accounts["rent"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["systemProgram"], is_signer=False, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\x6f\x11\xb9\xfa\x3c\x7a\x26\xfe"
    encoded_args = layout.build({
        "subAccountId":args["subAccountId"],
        "name":args["name"],
       })
    data = identifier + encoded_args
    return Instruction(program_id,data,keys)










