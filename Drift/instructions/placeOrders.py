'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from construct import Construct
from solders.instruction import AccountMeta, Instruction
from solders.pubkey import Pubkey as SolPubkey
from .. import types
from ..program_id import PROGRAM_ID
class PlaceOrdersArgs(typing.TypedDict):
    params:list[types.orderParams.OrderParams]


layout = borsh.CStruct(
    "params" /borsh.Vec(typing.cast(Construct, types.orderParams.OrderParams.layout)),
    )


class PlaceOrdersAccounts(typing.TypedDict):
    state:SolPubkey
    user:SolPubkey
    authority:SolPubkey

def PlaceOrders(
    args: PlaceOrdersArgs,
    accounts: PlaceOrdersAccounts,
    program_id: SolPubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["state"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["user"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["authority"], is_signer=True, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\x3c\x3f\x32\x7b\x0c\xc5\x3c\xbe"
    encoded_args = layout.build({
        "params":list(map(lambda item:item.to_encodable(),args["params"])),
       })
    data = identifier + encoded_args
    return Instruction(program_id,data,keys)




