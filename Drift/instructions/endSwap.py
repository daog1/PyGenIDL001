'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from construct import Container;
from dataclasses import dataclass;
from solders.instruction import AccountMeta, Instruction;
from solders.pubkey import Pubkey;
from solders.sysvar import RENT;
from .. import types;
from ..program_id import PROGRAM_ID;
class EndSwapArgs(typing.TypedDict):
    inMarketIndex:int
    outMarketIndex:int
    limitPrice:typing.Optional[int]
    reduceOnly:typing.Optional[types.swapReduceOnly.SwapReduceOnlyKind]


layout = borsh.CStruct(
    "inMarketIndex" /borsh.U16,
    "outMarketIndex" /borsh.U16,
    "limitPrice" /borsh.Option(borsh.U64),
    "reduceOnly" /borsh.Option(types.swapReduceOnly.layout),
    )


class EndSwapAccounts(typing.TypedDict):
    state:Pubkey
    user:Pubkey
    userStats:Pubkey
    authority:Pubkey
    outSpotMarketVault:Pubkey
    inSpotMarketVault:Pubkey
    outTokenAccount:Pubkey
    inTokenAccount:Pubkey
    tokenProgram:Pubkey
    driftSigner:Pubkey
    instructions:Pubkey

def EndSwap(
    args: EndSwapArgs,
    accounts: EndSwapAccounts,
    program_id: Pubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["state"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["user"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["userStats"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["authority"], is_signer=True, is_writable=False),
    AccountMeta(pubkey=accounts["outSpotMarketVault"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["inSpotMarketVault"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["outTokenAccount"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["inTokenAccount"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["tokenProgram"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["driftSigner"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["instructions"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=RENT, is_signer=False, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\xb1\xb8\x1b\xc1\x22\x0d\xd2\x91"
    encoded_args = layout.build({
    "inMarketIndex":args["inMarketIndex"],
    "outMarketIndex":args["outMarketIndex"],
    "limitPrice":args["limitPrice"],
    "reduceOnly":args["reduceOnly"],
       })

    data = identifier + encoded_args
    return Instruction(program_id,data,keys)

