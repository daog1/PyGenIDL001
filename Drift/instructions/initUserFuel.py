'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from construct import Container;
from dataclasses import dataclass;
from solders.instruction import AccountMeta, Instruction;
from solders.pubkey import Pubkey as SolPubkey;
from solders.sysvar import RENT;
from ..program_id import PROGRAM_ID;
class InitUserFuelArgs(typing.TypedDict):
    fuelBoostDeposits:typing.Optional[int]
    fuelBoostBorrows:typing.Optional[int]
    fuelBoostTaker:typing.Optional[int]
    fuelBoostMaker:typing.Optional[int]
    fuelBoostInsurance:typing.Optional[int]


layout = borsh.CStruct(
    "fuelBoostDeposits" /borsh.Option(borsh.I32),
    "fuelBoostBorrows" /borsh.Option(borsh.U32),
    "fuelBoostTaker" /borsh.Option(borsh.U32),
    "fuelBoostMaker" /borsh.Option(borsh.U32),
    "fuelBoostInsurance" /borsh.Option(borsh.U32),
    )


class InitUserFuelAccounts(typing.TypedDict):
    admin:SolPubkey
    state:SolPubkey
    user:SolPubkey
    userStats:SolPubkey

def InitUserFuel(
    args: InitUserFuelArgs,
    accounts: InitUserFuelAccounts,
    program_id: SolPubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["admin"], is_signer=True, is_writable=False),
    AccountMeta(pubkey=accounts["state"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["user"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["userStats"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=RENT, is_signer=False, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\x84\xbf\xe4\x8d\xc9\x8a\x3c\x30"
    encoded_args = layout.build({
        "fuelBoostDeposits":args["fuelBoostDeposits"],
        "fuelBoostBorrows":args["fuelBoostBorrows"],
        "fuelBoostTaker":args["fuelBoostTaker"],
        "fuelBoostMaker":args["fuelBoostMaker"],
        "fuelBoostInsurance":args["fuelBoostInsurance"],
       })

    data = identifier + encoded_args
    return Instruction(program_id,data,keys)


