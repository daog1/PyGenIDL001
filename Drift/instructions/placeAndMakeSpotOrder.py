'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from construct import Container;
from dataclasses import dataclass;
from solders.instruction import AccountMeta, Instruction;
from solders.pubkey import Pubkey;
from solders.sysvar import RENT;
from .. import types;
from ..program_id import PROGRAM_ID;
class PlaceAndMakeSpotOrderArgs(typing.TypedDict):
    params:types.orderParams.OrderParams
    takerOrderId:int
    fulfillmentType:typing.Optional[types.spotFulfillmentType.SpotFulfillmentTypeKind]


layout = borsh.CStruct(
    "params" /types.orderParams.OrderParams.layout,
    "takerOrderId" /borsh.U32,
    "fulfillmentType" /borsh.Option(types.spotFulfillmentType.layout),
    )


class PlaceAndMakeSpotOrderAccounts(typing.TypedDict):
    state:Pubkey
    user:Pubkey
    userStats:Pubkey
    taker:Pubkey
    takerStats:Pubkey
    authority:Pubkey

def PlaceAndMakeSpotOrder(
    args: PlaceAndMakeSpotOrderArgs,
    accounts: PlaceAndMakeSpotOrderAccounts,
    program_id: Pubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["state"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["user"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["userStats"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["taker"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["takerStats"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["authority"], is_signer=True, is_writable=False),
    AccountMeta(pubkey=RENT, is_signer=False, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\x95\x9e\x55\x42\xef\x09\xf3\x62"
    encoded_args = layout.build({
        "params":args["params"].to_encodable(),
        "takerOrderId":args["takerOrderId"],
        "fulfillmentType":(None if args["fulfillmentType"] is None else args["fulfillmentType"].to_encodable()),
       })

    data = identifier + encoded_args
    return Instruction(program_id,data,keys)



