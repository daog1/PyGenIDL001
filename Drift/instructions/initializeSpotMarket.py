'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from construct import Container;
from dataclasses import dataclass;
from solders.instruction import AccountMeta, Instruction;
from solders.pubkey import Pubkey;
from solders.sysvar import RENT;
from .. import types;
from ..program_id import PROGRAM_ID;
class InitializeSpotMarketArgs(typing.TypedDict):
    optimalUtilization:int
    optimalBorrowRate:int
    maxBorrowRate:int
    oracleSource:types.oracleSource.OracleSource
    initialAssetWeight:int
    maintenanceAssetWeight:int
    initialLiabilityWeight:int
    maintenanceLiabilityWeight:int
    imfFactor:int
    liquidatorFee:int
    ifLiquidationFee:int
    activeStatus:bool
    assetTier:types.assetTier.AssetTier
    scaleInitialAssetWeightStart:int
    withdrawGuardThreshold:int
    orderTickSize:int
    orderStepSize:int
    ifTotalFactor:int
    name:list[int]


layout = borsh.CStruct(
    "optimalUtilization" /borsh.U32,
    "optimalBorrowRate" /borsh.U32,
    "maxBorrowRate" /borsh.U32,
    "oracleSource" /types.oracleSource.OracleSource.layout,
    "initialAssetWeight" /borsh.U32,
    "maintenanceAssetWeight" /borsh.U32,
    "initialLiabilityWeight" /borsh.U32,
    "maintenanceLiabilityWeight" /borsh.U32,
    "imfFactor" /borsh.U32,
    "liquidatorFee" /borsh.U32,
    "ifLiquidationFee" /borsh.U32,
    "activeStatus" /borsh.U8,
    "assetTier" /types.assetTier.AssetTier.layout,
    "scaleInitialAssetWeightStart" /borsh.U64,
    "withdrawGuardThreshold" /borsh.U64,
    "orderTickSize" /borsh.U64,
    "orderStepSize" /borsh.U64,
    "ifTotalFactor" /borsh.U32,
    "name" /borsh.U8[32],
    )


class InitializeSpotMarketAccounts(typing.TypedDict):
    spotMarket:Pubkey
    spotMarketMint:Pubkey
    spotMarketVault:Pubkey
    insuranceFundVault:Pubkey
    driftSigner:Pubkey
    state:Pubkey
    oracle:Pubkey
    admin:Pubkey
    rent:Pubkey
    systemProgram:Pubkey
    tokenProgram:Pubkey

def InitializeSpotMarket(
    args: InitializeSpotMarketArgs,
    accounts: InitializeSpotMarketAccounts,
    program_id: Pubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["spotMarket"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["spotMarketMint"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["spotMarketVault"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["insuranceFundVault"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["driftSigner"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["state"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["oracle"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["admin"], is_signer=True, is_writable=True),
    AccountMeta(pubkey=accounts["rent"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["systemProgram"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["tokenProgram"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=RENT, is_signer=False, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\xea\xc4\x80\x2c\x5e\x0f\x30\xc9"
    encoded_args = layout.build({
    "optimalUtilization":args["optimalUtilization"],
    "optimalBorrowRate":args["optimalBorrowRate"],
    "maxBorrowRate":args["maxBorrowRate"],
    "oracleSource":args["oracleSource"],
    "initialAssetWeight":args["initialAssetWeight"],
    "maintenanceAssetWeight":args["maintenanceAssetWeight"],
    "initialLiabilityWeight":args["initialLiabilityWeight"],
    "maintenanceLiabilityWeight":args["maintenanceLiabilityWeight"],
    "imfFactor":args["imfFactor"],
    "liquidatorFee":args["liquidatorFee"],
    "ifLiquidationFee":args["ifLiquidationFee"],
    "activeStatus":args["activeStatus"],
    "assetTier":args["assetTier"],
    "scaleInitialAssetWeightStart":args["scaleInitialAssetWeightStart"],
    "withdrawGuardThreshold":args["withdrawGuardThreshold"],
    "orderTickSize":args["orderTickSize"],
    "orderStepSize":args["orderStepSize"],
    "ifTotalFactor":args["ifTotalFactor"],
    "name":args["name"],
       })

    data = identifier + encoded_args
    return Instruction(program_id,data,keys)

