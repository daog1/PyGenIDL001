'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from construct import Container;
from dataclasses import dataclass;
from solders.instruction import AccountMeta, Instruction;
from solders.pubkey import Pubkey;
from solders.sysvar import RENT;
from ..program_id import PROGRAM_ID;
class LiquidateSpotWithSwapBeginArgs(typing.TypedDict):
    assetMarketIndex:int
    liabilityMarketIndex:int
    swapAmount:int


layout = borsh.CStruct(
    "assetMarketIndex" /borsh.U16,
    "liabilityMarketIndex" /borsh.U16,
    "swapAmount" /borsh.U64,
    )


class LiquidateSpotWithSwapBeginAccounts(typing.TypedDict):
    state:Pubkey
    authority:Pubkey
    liquidator:Pubkey
    liquidatorStats:Pubkey
    user:Pubkey
    userStats:Pubkey
    liabilitySpotMarketVault:Pubkey
    assetSpotMarketVault:Pubkey
    liabilityTokenAccount:Pubkey
    assetTokenAccount:Pubkey
    tokenProgram:Pubkey
    driftSigner:Pubkey
    instructions:Pubkey

def LiquidateSpotWithSwapBegin(
    args: LiquidateSpotWithSwapBeginArgs,
    accounts: LiquidateSpotWithSwapBeginAccounts,
    program_id: Pubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["state"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["authority"], is_signer=True, is_writable=False),
    AccountMeta(pubkey=accounts["liquidator"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["liquidatorStats"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["user"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["userStats"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["liabilitySpotMarketVault"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["assetSpotMarketVault"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["liabilityTokenAccount"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["assetTokenAccount"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["tokenProgram"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["driftSigner"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["instructions"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=RENT, is_signer=False, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\x0c\x2b\xb0\x53\x9c\xfb\x75\x0d"
    encoded_args = layout.build({
        "assetMarketIndex":args["assetMarketIndex"],
        "liabilityMarketIndex":args["liabilityMarketIndex"],
        "swapAmount":args["swapAmount"],
       })

    data = identifier + encoded_args
    return Instruction(program_id,data,keys)





