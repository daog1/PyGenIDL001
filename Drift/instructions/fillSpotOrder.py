'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from construct import Container;
from dataclasses import dataclass;
from solders.instruction import AccountMeta, Instruction;
from solders.pubkey import Pubkey as SolPubkey;
from solders.sysvar import RENT;
from .. import types;
from ..program_id import PROGRAM_ID;
class FillSpotOrderArgs(typing.TypedDict):
    orderId:typing.Optional[int]
    fulfillmentType:typing.Optional[types.spotFulfillmentType.SpotFulfillmentTypeKind]
    makerOrderId:typing.Optional[int]


layout = borsh.CStruct(
    "orderId" /borsh.Option(borsh.U32),
    "fulfillmentType" /borsh.Option(types.spotFulfillmentType.layout),
    "makerOrderId" /borsh.Option(borsh.U32),
    )


class FillSpotOrderAccounts(typing.TypedDict):
    state:SolPubkey
    authority:SolPubkey
    filler:SolPubkey
    fillerStats:SolPubkey
    user:SolPubkey
    userStats:SolPubkey

def FillSpotOrder(
    args: FillSpotOrderArgs,
    accounts: FillSpotOrderAccounts,
    program_id: SolPubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["state"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["authority"], is_signer=True, is_writable=False),
    AccountMeta(pubkey=accounts["filler"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["fillerStats"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["user"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["userStats"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=RENT, is_signer=False, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\xd4\xce\x82\xad\x15\x22\xc7\x28"
    encoded_args = layout.build({
        "orderId":args["orderId"],
        "fulfillmentType":(None if args["fulfillmentType"] is None else args["fulfillmentType"].to_encodable()),
        "makerOrderId":args["makerOrderId"],
       })

    data = identifier + encoded_args
    return Instruction(program_id,data,keys)



