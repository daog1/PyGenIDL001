'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from construct import Container;
from dataclasses import dataclass;
from solders.instruction import AccountMeta, Instruction;
from solders.pubkey import Pubkey;
from solders.sysvar import RENT;
from .. import types;
from ..program_id import PROGRAM_ID;
class InitializePerpMarketArgs(typing.TypedDict):
    marketIndex:int
    ammBaseAssetReserve:int
    ammQuoteAssetReserve:int
    ammPeriodicity:int
    ammPegMultiplier:int
    oracleSource:types.oracleSource.OracleSourceKind
    contractTier:types.contractTier.ContractTierKind
    marginRatioInitial:int
    marginRatioMaintenance:int
    liquidatorFee:int
    ifLiquidationFee:int
    imfFactor:int
    activeStatus:bool
    baseSpread:int
    maxSpread:int
    maxOpenInterest:int
    maxRevenueWithdrawPerPeriod:int
    quoteMaxInsurance:int
    orderStepSize:int
    orderTickSize:int
    minOrderSize:int
    concentrationCoefScale:int
    curveUpdateIntensity:int
    ammJitIntensity:int
    name:list[int]


layout = borsh.CStruct(
    "marketIndex" /borsh.U16,
    "ammBaseAssetReserve" /borsh.U128,
    "ammQuoteAssetReserve" /borsh.U128,
    "ammPeriodicity" /borsh.I64,
    "ammPegMultiplier" /borsh.U128,
    "oracleSource" /types.oracleSource.layout,
    "contractTier" /types.contractTier.layout,
    "marginRatioInitial" /borsh.U32,
    "marginRatioMaintenance" /borsh.U32,
    "liquidatorFee" /borsh.U32,
    "ifLiquidationFee" /borsh.U32,
    "imfFactor" /borsh.U32,
    "activeStatus" /borsh.Bool,
    "baseSpread" /borsh.U32,
    "maxSpread" /borsh.U32,
    "maxOpenInterest" /borsh.U128,
    "maxRevenueWithdrawPerPeriod" /borsh.U64,
    "quoteMaxInsurance" /borsh.U64,
    "orderStepSize" /borsh.U64,
    "orderTickSize" /borsh.U64,
    "minOrderSize" /borsh.U64,
    "concentrationCoefScale" /borsh.U128,
    "curveUpdateIntensity" /borsh.U8,
    "ammJitIntensity" /borsh.U8,
    "name" /borsh.U8[32],
    )


class InitializePerpMarketAccounts(typing.TypedDict):
    admin:Pubkey
    state:Pubkey
    perpMarket:Pubkey
    oracle:Pubkey
    rent:Pubkey
    systemProgram:Pubkey

def InitializePerpMarket(
    args: InitializePerpMarketArgs,
    accounts: InitializePerpMarketAccounts,
    program_id: Pubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["admin"], is_signer=True, is_writable=True),
    AccountMeta(pubkey=accounts["state"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["perpMarket"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["oracle"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["rent"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["systemProgram"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=RENT, is_signer=False, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\x84\x09\xe5\x76\x75\x76\x75\x3e"
    encoded_args = layout.build({
        "marketIndex":args["marketIndex"],
        "ammBaseAssetReserve":args["ammBaseAssetReserve"],
        "ammQuoteAssetReserve":args["ammQuoteAssetReserve"],
        "ammPeriodicity":args["ammPeriodicity"],
        "ammPegMultiplier":args["ammPegMultiplier"],
        "oracleSource":args["oracleSource"].to_encodable(),
        "contractTier":args["contractTier"].to_encodable(),
        "marginRatioInitial":args["marginRatioInitial"],
        "marginRatioMaintenance":args["marginRatioMaintenance"],
        "liquidatorFee":args["liquidatorFee"],
        "ifLiquidationFee":args["ifLiquidationFee"],
        "imfFactor":args["imfFactor"],
        "activeStatus":args["activeStatus"],
        "baseSpread":args["baseSpread"],
        "maxSpread":args["maxSpread"],
        "maxOpenInterest":args["maxOpenInterest"],
        "maxRevenueWithdrawPerPeriod":args["maxRevenueWithdrawPerPeriod"],
        "quoteMaxInsurance":args["quoteMaxInsurance"],
        "orderStepSize":args["orderStepSize"],
        "orderTickSize":args["orderTickSize"],
        "minOrderSize":args["minOrderSize"],
        "concentrationCoefScale":args["concentrationCoefScale"],
        "curveUpdateIntensity":args["curveUpdateIntensity"],
        "ammJitIntensity":args["ammJitIntensity"],
        "name":args["name"],
       })

    data = identifier + encoded_args
    return Instruction(program_id,data,keys)





