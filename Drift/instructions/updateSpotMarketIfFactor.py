'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from construct import Container;
from dataclasses import dataclass;
from solders.instruction import AccountMeta, Instruction;
from solders.pubkey import Pubkey as SolPubkey;
from ..program_id import PROGRAM_ID;
class UpdateSpotMarketIfFactorArgs(typing.TypedDict):
    spotMarketIndex:int
    userIfFactor:int
    totalIfFactor:int


layout = borsh.CStruct(
    "spotMarketIndex" /borsh.U16,
    "userIfFactor" /borsh.U32,
    "totalIfFactor" /borsh.U32,
    )


class UpdateSpotMarketIfFactorAccounts(typing.TypedDict):
    admin:SolPubkey
    state:SolPubkey
    spotMarket:SolPubkey

def UpdateSpotMarketIfFactor(
    args: UpdateSpotMarketIfFactorArgs,
    accounts: UpdateSpotMarketIfFactorAccounts,
    program_id: SolPubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["admin"], is_signer=True, is_writable=False),
    AccountMeta(pubkey=accounts["state"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["spotMarket"], is_signer=False, is_writable=True),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\x93\x1e\xe0\x22\x12\xe6\x69\x04"
    encoded_args = layout.build({
        "spotMarketIndex":args["spotMarketIndex"],
        "userIfFactor":args["userIfFactor"],
        "totalIfFactor":args["totalIfFactor"],
       })
    data = identifier + encoded_args
    return Instruction(program_id,data,keys)



