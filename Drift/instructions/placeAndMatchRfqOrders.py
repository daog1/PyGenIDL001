'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from construct import Construct, Container;
from dataclasses import dataclass;
from solders.instruction import AccountMeta, Instruction;
from solders.pubkey import Pubkey as SolPubkey;
from solders.sysvar import RENT;
from .. import types;
from ..program_id import PROGRAM_ID;
class PlaceAndMatchRfqOrdersArgs(typing.TypedDict):
    rfqMatches:list[types.rFQMatch.RFQMatch]


layout = borsh.CStruct(
    "rfqMatches" /borsh.Vec(typing.cast(Construct, types.rFQMatch.RFQMatch.layout)),
    )


class PlaceAndMatchRfqOrdersAccounts(typing.TypedDict):
    state:SolPubkey
    user:SolPubkey
    userStats:SolPubkey
    authority:SolPubkey
    ixSysvar:SolPubkey

def PlaceAndMatchRfqOrders(
    args: PlaceAndMatchRfqOrdersArgs,
    accounts: PlaceAndMatchRfqOrdersAccounts,
    program_id: SolPubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["state"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["user"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["userStats"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["authority"], is_signer=True, is_writable=False),
    AccountMeta(pubkey=accounts["ixSysvar"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=RENT, is_signer=False, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\x6f\x03\x33\xf3\xb2\xae\xdb\x64"
    encoded_args = layout.build({
        "rfqMatches":list(map(lambda item:item.to_encodable(),args["rfqMatches"])),
       })

    data = identifier + encoded_args
    return Instruction(program_id,data,keys)



