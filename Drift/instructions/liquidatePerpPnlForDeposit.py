'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from solders.instruction import AccountMeta, Instruction
from solders.pubkey import Pubkey as SolPubkey
from ..program_id import PROGRAM_ID
class LiquidatePerpPnlForDepositArgs(typing.TypedDict):
    perpMarketIndex:int
    spotMarketIndex:int
    liquidatorMaxPnlTransfer:int
    limitPrice:typing.Optional[int]


layout = borsh.CStruct(
    "perpMarketIndex" /borsh.U16,
    "spotMarketIndex" /borsh.U16,
    "liquidatorMaxPnlTransfer" /borsh.U128,
    "limitPrice" /borsh.Option(borsh.U64),
    )


class LiquidatePerpPnlForDepositAccounts(typing.TypedDict):
    state:SolPubkey
    authority:SolPubkey
    liquidator:SolPubkey
    liquidatorStats:SolPubkey
    user:SolPubkey
    userStats:SolPubkey

def LiquidatePerpPnlForDeposit(
    args: LiquidatePerpPnlForDepositArgs,
    accounts: LiquidatePerpPnlForDepositAccounts,
    program_id: SolPubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["state"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["authority"], is_signer=True, is_writable=False),
    AccountMeta(pubkey=accounts["liquidator"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["liquidatorStats"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["user"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["userStats"], is_signer=False, is_writable=True),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\xed\x4b\xc6\xeb\xe9\xba\x4b\x23"
    encoded_args = layout.build({
        "perpMarketIndex":args["perpMarketIndex"],
        "spotMarketIndex":args["spotMarketIndex"],
        "liquidatorMaxPnlTransfer":args["liquidatorMaxPnlTransfer"],
        "limitPrice":args["limitPrice"],
       })
    data = identifier + encoded_args
    return Instruction(program_id,data,keys)




