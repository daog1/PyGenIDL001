'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from construct import Container;
from dataclasses import dataclass;
from solders.instruction import AccountMeta, Instruction;
from solders.pubkey import Pubkey;
from solders.sysvar import RENT;
from ..program_id import PROGRAM_ID;
class LiquidateBorrowForPerpPnlArgs(typing.TypedDict):
    perpMarketIndex:int
    spotMarketIndex:int
    liquidatorMaxLiabilityTransfer:int
    limitPrice:typing.Optional[int]


layout = borsh.CStruct(
    "perpMarketIndex" /borsh.U16,
    "spotMarketIndex" /borsh.U16,
    "liquidatorMaxLiabilityTransfer" /borsh.U128,
    "limitPrice" /borsh.Option(borsh.U64),
    )


class LiquidateBorrowForPerpPnlAccounts(typing.TypedDict):
    state:Pubkey
    authority:Pubkey
    liquidator:Pubkey
    liquidatorStats:Pubkey
    user:Pubkey
    userStats:Pubkey

def LiquidateBorrowForPerpPnl(
    args: LiquidateBorrowForPerpPnlArgs,
    accounts: LiquidateBorrowForPerpPnlAccounts,
    program_id: Pubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["state"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["authority"], is_signer=True, is_writable=False),
    AccountMeta(pubkey=accounts["liquidator"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["liquidatorStats"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["user"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["userStats"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=RENT, is_signer=False, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\xa9\x11\x20\x5a\xcf\x94\xd1\x1b"
    encoded_args = layout.build({
    "perpMarketIndex":args["perpMarketIndex"],
    "spotMarketIndex":args["spotMarketIndex"],
    "liquidatorMaxLiabilityTransfer":args["liquidatorMaxLiabilityTransfer"],
    "limitPrice":args["limitPrice"],
       })

    data = identifier + encoded_args
    return Instruction(program_id,data,keys)

