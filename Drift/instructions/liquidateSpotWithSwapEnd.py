'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from construct import Container;
from dataclasses import dataclass;
from solders.instruction import AccountMeta, Instruction;
from solders.pubkey import Pubkey as SolPubkey;
from ..program_id import PROGRAM_ID;
class LiquidateSpotWithSwapEndArgs(typing.TypedDict):
    assetMarketIndex:int
    liabilityMarketIndex:int


layout = borsh.CStruct(
    "assetMarketIndex" /borsh.U16,
    "liabilityMarketIndex" /borsh.U16,
    )


class LiquidateSpotWithSwapEndAccounts(typing.TypedDict):
    state:SolPubkey
    authority:SolPubkey
    liquidator:SolPubkey
    liquidatorStats:SolPubkey
    user:SolPubkey
    userStats:SolPubkey
    liabilitySpotMarketVault:SolPubkey
    assetSpotMarketVault:SolPubkey
    liabilityTokenAccount:SolPubkey
    assetTokenAccount:SolPubkey
    tokenProgram:SolPubkey
    driftSigner:SolPubkey
    instructions:SolPubkey

def LiquidateSpotWithSwapEnd(
    args: LiquidateSpotWithSwapEndArgs,
    accounts: LiquidateSpotWithSwapEndAccounts,
    program_id: SolPubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["state"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["authority"], is_signer=True, is_writable=False),
    AccountMeta(pubkey=accounts["liquidator"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["liquidatorStats"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["user"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["userStats"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["liabilitySpotMarketVault"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["assetSpotMarketVault"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["liabilityTokenAccount"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["assetTokenAccount"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["tokenProgram"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["driftSigner"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["instructions"], is_signer=False, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\x8e\x58\xa3\xa0\xdf\x4b\x37\xe1"
    encoded_args = layout.build({
        "assetMarketIndex":args["assetMarketIndex"],
        "liabilityMarketIndex":args["liabilityMarketIndex"],
       })
    data = identifier + encoded_args
    return Instruction(program_id,data,keys)






