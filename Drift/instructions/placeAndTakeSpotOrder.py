'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from construct import Container;
from dataclasses import dataclass;
from solders.instruction import AccountMeta, Instruction;
from solders.pubkey import Pubkey;
from solders.sysvar import RENT;
from .. import types;
from ..program_id import PROGRAM_ID;
class PlaceAndTakeSpotOrderArgs(typing.TypedDict):
    params:types.orderParams.OrderParams
    fulfillmentType:typing.Optional[types.spotFulfillmentType.SpotFulfillmentTypeJSON]
    makerOrderId:typing.Optional[int]


layout = borsh.CStruct(
    "params" /types.orderParams.OrderParams.layout,
    "fulfillmentType" /borsh.Option(types.spotFulfillmentType.layout),
    "makerOrderId" /borsh.Option(borsh.U32),
    )


class PlaceAndTakeSpotOrderAccounts(typing.TypedDict):
    state:Pubkey
    user:Pubkey
    userStats:Pubkey
    authority:Pubkey

def PlaceAndTakeSpotOrder(
    args: PlaceAndTakeSpotOrderArgs,
    accounts: PlaceAndTakeSpotOrderAccounts,
    program_id: Pubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["state"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["user"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["userStats"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["authority"], is_signer=True, is_writable=False),
    AccountMeta(pubkey=RENT, is_signer=False, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\xbf\x03\x8a\x47\x72\xc6\xca\x64"
    encoded_args = layout.build({
    "params":args["params"],
    "fulfillmentType":args["fulfillmentType"],
    "makerOrderId":args["makerOrderId"],
       })

    data = identifier + encoded_args
    return Instruction(program_id,data,keys)

