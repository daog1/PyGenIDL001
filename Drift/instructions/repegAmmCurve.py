'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from solders.instruction import AccountMeta, Instruction
from solders.pubkey import Pubkey as SolPubkey
from ..program_id import PROGRAM_ID
class RepegAmmCurveArgs(typing.TypedDict):
    newPegCandidate:int


layout = borsh.CStruct(
    "newPegCandidate" /borsh.U128,
    )


class RepegAmmCurveAccounts(typing.TypedDict):
    state:SolPubkey
    perpMarket:SolPubkey
    oracle:SolPubkey
    admin:SolPubkey

def RepegAmmCurve(
    args: RepegAmmCurveArgs,
    accounts: RepegAmmCurveAccounts,
    program_id: SolPubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["state"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["perpMarket"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["oracle"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["admin"], is_signer=True, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\x03\x24\x66\x59\xb4\x80\x78\xd5"
    encoded_args = layout.build({
        "newPegCandidate":args["newPegCandidate"],
       })
    data = identifier + encoded_args
    return Instruction(program_id,data,keys)



