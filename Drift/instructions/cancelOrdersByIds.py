'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from construct import Container;
from dataclasses import dataclass;
from solders.instruction import AccountMeta, Instruction;
from solders.pubkey import Pubkey;
from solders.sysvar import RENT;
from ..program_id import PROGRAM_ID;
class CancelOrdersByIdsArgs(typing.TypedDict):
    orderIds:list[int]


layout = borsh.CStruct(
    "orderIds" /borsh.U32[0],
    )


class CancelOrdersByIdsAccounts(typing.TypedDict):
    state:Pubkey
    user:Pubkey
    authority:Pubkey

def CancelOrdersByIds(
    args: CancelOrdersByIdsArgs,
    accounts: CancelOrdersByIdsAccounts,
    program_id: Pubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["state"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["user"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["authority"], is_signer=True, is_writable=False),
    AccountMeta(pubkey=RENT, is_signer=False, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\x86\x13\x90\xa5\x5e\xf0\xd2\x5e"
    encoded_args = layout.build({
    "orderIds":args["orderIds"],
       })

    data = identifier + encoded_args
    return Instruction(program_id,data,keys)

