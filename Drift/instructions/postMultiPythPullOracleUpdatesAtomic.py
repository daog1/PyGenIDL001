'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from construct import Container;
from dataclasses import dataclass;
from solders.instruction import AccountMeta, Instruction;
from solders.pubkey import Pubkey;
from solders.sysvar import RENT;
from ..program_id import PROGRAM_ID;
class PostMultiPythPullOracleUpdatesAtomicArgs(typing.TypedDict):
    params:str


layout = borsh.CStruct(
    "params" /borsh.String,
    )


class PostMultiPythPullOracleUpdatesAtomicAccounts(typing.TypedDict):
    keeper:Pubkey
    pythSolanaReceiver:Pubkey
    guardianSet:Pubkey

def PostMultiPythPullOracleUpdatesAtomic(
    args: PostMultiPythPullOracleUpdatesAtomicArgs,
    accounts: PostMultiPythPullOracleUpdatesAtomicAccounts,
    program_id: Pubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["keeper"], is_signer=True, is_writable=True),
    AccountMeta(pubkey=accounts["pythSolanaReceiver"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["guardianSet"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=RENT, is_signer=False, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\xf3\x4f\xcc\xe4\xe3\xd0\x64\xf4"
    encoded_args = layout.build({
    "params":args["params"],
       })

    data = identifier + encoded_args
    return Instruction(program_id,data,keys)

