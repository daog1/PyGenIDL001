'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from construct import Container;
from dataclasses import dataclass;
from solders.instruction import AccountMeta, Instruction;
from solders.pubkey import Pubkey as SolPubkey;
from ..program_id import PROGRAM_ID;
class UpdateHighLeverageModeConfigArgs(typing.TypedDict):
    maxUsers:int
    reduceOnly:bool


layout = borsh.CStruct(
    "maxUsers" /borsh.U32,
    "reduceOnly" /borsh.Bool,
    )


class UpdateHighLeverageModeConfigAccounts(typing.TypedDict):
    admin:SolPubkey
    highLeverageModeConfig:SolPubkey
    state:SolPubkey

def UpdateHighLeverageModeConfig(
    args: UpdateHighLeverageModeConfigArgs,
    accounts: UpdateHighLeverageModeConfigAccounts,
    program_id: SolPubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["admin"], is_signer=True, is_writable=True),
    AccountMeta(pubkey=accounts["highLeverageModeConfig"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["state"], is_signer=False, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\x40\x7a\xd4\x5d\x8d\xd9\xca\x37"
    encoded_args = layout.build({
        "maxUsers":args["maxUsers"],
        "reduceOnly":args["reduceOnly"],
       })
    data = identifier + encoded_args
    return Instruction(program_id,data,keys)



