'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from construct import Container;
from dataclasses import dataclass;
from solders.instruction import AccountMeta, Instruction;
from solders.pubkey import Pubkey as SolPubkey;
from solders.sysvar import RENT;
from ..program_id import PROGRAM_ID;
class UpdatePerpMarketNumberOfUsersArgs(typing.TypedDict):
    numberOfUsers:typing.Optional[int]
    numberOfUsersWithBase:typing.Optional[int]


layout = borsh.CStruct(
    "numberOfUsers" /borsh.Option(borsh.U32),
    "numberOfUsersWithBase" /borsh.Option(borsh.U32),
    )


class UpdatePerpMarketNumberOfUsersAccounts(typing.TypedDict):
    admin:SolPubkey
    state:SolPubkey
    perpMarket:SolPubkey

def UpdatePerpMarketNumberOfUsers(
    args: UpdatePerpMarketNumberOfUsersArgs,
    accounts: UpdatePerpMarketNumberOfUsersAccounts,
    program_id: SolPubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["admin"], is_signer=True, is_writable=False),
    AccountMeta(pubkey=accounts["state"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["perpMarket"], is_signer=False, is_writable=True),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\x23\x3e\x90\xb1\xb4\x3e\xd7\xc4"
    encoded_args = layout.build({
        "numberOfUsers":args["numberOfUsers"],
        "numberOfUsersWithBase":args["numberOfUsersWithBase"],
       })

    data = identifier + encoded_args
    return Instruction(program_id,data,keys)


