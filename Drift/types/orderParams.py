'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from construct import Container
from dataclasses import dataclass
from . import marketType, orderTriggerCondition, orderType, positionDirection, postOnlyParam

class OrderParamsJSON(typing.TypedDict):
    orderType: orderType.OrderTypeJSON
    marketType: marketType.MarketTypeJSON
    direction: positionDirection.PositionDirectionJSON
    userOrderId: int
    baseAssetAmount: int
    price: int
    marketIndex: int
    reduceOnly: bool
    postOnly: postOnlyParam.PostOnlyParamJSON
    immediateOrCancel: bool
    maxTs: typing.Optional[int]
    triggerPrice: typing.Optional[int]
    triggerCondition: orderTriggerCondition.OrderTriggerConditionJSON
    oraclePriceOffset: typing.Optional[int]
    auctionDuration: typing.Optional[int]
    auctionStartPrice: typing.Optional[int]
    auctionEndPrice: typing.Optional[int]

@dataclass
class OrderParams:
    layout: typing.ClassVar = borsh.CStruct(
        "orderType" /orderType.layout,
        "marketType" /marketType.layout,
        "direction" /positionDirection.layout,
        "userOrderId" /borsh.U8,
        "baseAssetAmount" /borsh.U64,
        "price" /borsh.U64,
        "marketIndex" /borsh.U16,
        "reduceOnly" /borsh.Bool,
        "postOnly" /postOnlyParam.layout,
        "immediateOrCancel" /borsh.Bool,
        "maxTs" /borsh.Option(borsh.I64),
        "triggerPrice" /borsh.Option(borsh.U64),
        "triggerCondition" /orderTriggerCondition.layout,
        "oraclePriceOffset" /borsh.Option(borsh.I32),
        "auctionDuration" /borsh.Option(borsh.U8),
        "auctionStartPrice" /borsh.Option(borsh.I64),
        "auctionEndPrice" /borsh.Option(borsh.I64),
        )
    #fields
    orderType: orderType.OrderTypeKind
    marketType: marketType.MarketTypeKind
    direction: positionDirection.PositionDirectionKind
    userOrderId: int
    baseAssetAmount: int
    price: int
    marketIndex: int
    reduceOnly: bool
    postOnly: postOnlyParam.PostOnlyParamKind
    immediateOrCancel: bool
    maxTs: typing.Optional[int]
    triggerPrice: typing.Optional[int]
    triggerCondition: orderTriggerCondition.OrderTriggerConditionKind
    oraclePriceOffset: typing.Optional[int]
    auctionDuration: typing.Optional[int]
    auctionStartPrice: typing.Optional[int]
    auctionEndPrice: typing.Optional[int]
    
    @classmethod
    def from_decoded(cls, obj: Container) -> "OrderParams":
        return cls(
        orderType=orderType.from_decoded(obj["orderType"]),
        marketType=marketType.from_decoded(obj["marketType"]),
        direction=positionDirection.from_decoded(obj["direction"]),
        userOrderId=obj["userOrderId"],
        baseAssetAmount=obj["baseAssetAmount"],
        price=obj["price"],
        marketIndex=obj["marketIndex"],
        reduceOnly=obj["reduceOnly"],
        postOnly=postOnlyParam.from_decoded(obj["postOnly"]),
        immediateOrCancel=obj["immediateOrCancel"],
        maxTs=(None if obj["maxTs"] is None else obj["maxTs"]),
        triggerPrice=(None if obj["triggerPrice"] is None else obj["triggerPrice"]),
        triggerCondition=orderTriggerCondition.from_decoded(obj["triggerCondition"]),
        oraclePriceOffset=(None if obj["oraclePriceOffset"] is None else obj["oraclePriceOffset"]),
        auctionDuration=(None if obj["auctionDuration"] is None else obj["auctionDuration"]),
        auctionStartPrice=(None if obj["auctionStartPrice"] is None else obj["auctionStartPrice"]),
        auctionEndPrice=(None if obj["auctionEndPrice"] is None else obj["auctionEndPrice"]),
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
                "orderType": self.orderType.to_encodable(),
                "marketType": self.marketType.to_encodable(),
                "direction": self.direction.to_encodable(),
                "userOrderId": self.userOrderId,
                "baseAssetAmount": self.baseAssetAmount,
                "price": self.price,
                "marketIndex": self.marketIndex,
                "reduceOnly": self.reduceOnly,
                "postOnly": self.postOnly.to_encodable(),
                "immediateOrCancel": self.immediateOrCancel,
                "maxTs": self.maxTs,
                "triggerPrice": self.triggerPrice,
                "triggerCondition": self.triggerCondition.to_encodable(),
                "oraclePriceOffset": self.oraclePriceOffset,
                "auctionDuration": self.auctionDuration,
                "auctionStartPrice": self.auctionStartPrice,
                "auctionEndPrice": self.auctionEndPrice,
                }

    def to_json(self) -> OrderParamsJSON:
        return {
                "orderType": self.orderType.to_json(),
                "marketType": self.marketType.to_json(),
                "direction": self.direction.to_json(),
                "userOrderId": self.userOrderId,
                "baseAssetAmount": self.baseAssetAmount,
                "price": self.price,
                "marketIndex": self.marketIndex,
                "reduceOnly": self.reduceOnly,
                "postOnly": self.postOnly.to_json(),
                "immediateOrCancel": self.immediateOrCancel,
                "maxTs": (None if self.maxTs is None else self.maxTs),
                "triggerPrice": (None if self.triggerPrice is None else self.triggerPrice),
                "triggerCondition": self.triggerCondition.to_json(),
                "oraclePriceOffset": (None if self.oraclePriceOffset is None else self.oraclePriceOffset),
                "auctionDuration": (None if self.auctionDuration is None else self.auctionDuration),
                "auctionStartPrice": (None if self.auctionStartPrice is None else self.auctionStartPrice),
                "auctionEndPrice": (None if self.auctionEndPrice is None else self.auctionEndPrice),
                }

    @classmethod
    def from_json(cls, obj: OrderParamsJSON) -> "OrderParams":
        return cls(
                orderType=orderType.from_json(obj["orderType"]),
                marketType=marketType.from_json(obj["marketType"]),
                direction=positionDirection.from_json(obj["direction"]),
                userOrderId=obj["userOrderId"],
                baseAssetAmount=obj["baseAssetAmount"],
                price=obj["price"],
                marketIndex=obj["marketIndex"],
                reduceOnly=obj["reduceOnly"],
                postOnly=postOnlyParam.from_json(obj["postOnly"]),
                immediateOrCancel=obj["immediateOrCancel"],
                maxTs=(None if obj["maxTs"] is None else obj["maxTs"]),
                triggerPrice=(None if obj["triggerPrice"] is None else obj["triggerPrice"]),
                triggerCondition=orderTriggerCondition.from_json(obj["triggerCondition"]),
                oraclePriceOffset=(None if obj["oraclePriceOffset"] is None else obj["oraclePriceOffset"]),
                auctionDuration=(None if obj["auctionDuration"] is None else obj["auctionDuration"]),
                auctionStartPrice=(None if obj["auctionStartPrice"] is None else obj["auctionStartPrice"]),
                auctionEndPrice=(None if obj["auctionEndPrice"] is None else obj["auctionEndPrice"]),
        )






