'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey;
from solders.sysvar import RENT;

class OrderParamsJSON(typing.TypedDict):
    orderType: types.orderType.OrderTypeJSON
    marketType: types.marketType.MarketTypeJSON
    direction: types.positionDirection.PositionDirectionJSON
    userOrderId: int
    baseAssetAmount: int
    price: int
    marketIndex: int
    reduceOnly: bool
    postOnly: types.postOnlyParam.PostOnlyParamJSON
    immediateOrCancel: bool
    maxTs: typing.Optional[int]
    triggerPrice: typing.Optional[int]
    triggerCondition: types.orderTriggerCondition.OrderTriggerConditionJSON
    oraclePriceOffset: typing.Optional[int]
    auctionDuration: typing.Optional[int]
    auctionStartPrice: typing.Optional[int]
    auctionEndPrice: typing.Optional[int]

@dataclass
class OrderParams:
    layout: typing.ClassVar = borsh.CStruct(
        "orderType" /types.orderType.layout,
        "marketType" /types.marketType.layout,
        "direction" /types.positionDirection.layout,
        "userOrderId" /borsh.U8,
        "baseAssetAmount" /borsh.U64,
        "price" /borsh.U64,
        "marketIndex" /borsh.U16,
        "reduceOnly" /borsh.U8,
        "postOnly" /types.postOnlyParam.layout,
        "immediateOrCancel" /borsh.U8,
        "maxTs" /borsh.Option(borsh.I64),
        "triggerPrice" /borsh.Option(borsh.U64),
        "triggerCondition" /types.orderTriggerCondition.layout,
        "oraclePriceOffset" /borsh.Option(borsh.I32),
        "auctionDuration" /borsh.Option(borsh.U8),
        "auctionStartPrice" /borsh.Option(borsh.I64),
        "auctionEndPrice" /borsh.Option(borsh.I64),
        )
    #fields
    orderType: types.orderType.OrderTypeKind
    marketType: types.marketType.MarketTypeKind
    direction: types.positionDirection.PositionDirectionKind
    userOrderId: int
    baseAssetAmount: int
    price: int
    marketIndex: int
    reduceOnly: bool
    postOnly: types.postOnlyParam.PostOnlyParamKind
    immediateOrCancel: bool
    maxTs: typing.Optional[int]
    triggerPrice: typing.Optional[int]
    triggerCondition: types.orderTriggerCondition.OrderTriggerConditionKind
    oraclePriceOffset: typing.Optional[int]
    auctionDuration: typing.Optional[int]
    auctionStartPrice: typing.Optional[int]
    auctionEndPrice: typing.Optional[int]
    
    @classmethod
    def from_decoded(cls, obj: Container) -> "OrderParams":
        return cls(
                   orderType=obj.orderType,
                   marketType=obj.marketType,
                   direction=obj.direction,
                   userOrderId=obj.userOrderId,
                   baseAssetAmount=obj.baseAssetAmount,
                   price=obj.price,
                   marketIndex=obj.marketIndex,
                   reduceOnly=obj.reduceOnly,
                   postOnly=obj.postOnly,
                   immediateOrCancel=obj.immediateOrCancel,
                   maxTs=obj.maxTs,
                   triggerPrice=obj.triggerPrice,
                   triggerCondition=obj.triggerCondition,
                   oraclePriceOffset=obj.oraclePriceOffset,
                   auctionDuration=obj.auctionDuration,
                   auctionStartPrice=obj.auctionStartPrice,
                   auctionEndPrice=obj.auctionEndPrice,
                )

    #def to_encodable(self) -> dict[str, typing.Any]:
    #    return {"row": self.row, "column": self.column}

    def to_json(self) -> OrderParamsJSON:
        return {
                "orderType": self.orderType.to_json(),
                "marketType": self.marketType.to_json(),
                "direction": self.direction.to_json(),
                "userOrderId": self.userOrderId,
                "baseAssetAmount": self.baseAssetAmount,
                "price": self.price,
                "marketIndex": self.marketIndex,
                "reduceOnly": self.reduceOnly,
                "postOnly": self.postOnly.to_json(),
                "immediateOrCancel": self.immediateOrCancel,
                "maxTs": (None if self.maxTs is None else self.maxTs),
                "triggerPrice": (None if self.triggerPrice is None else self.triggerPrice),
                "triggerCondition": self.triggerCondition.to_json(),
                "oraclePriceOffset": (None if self.oraclePriceOffset is None else self.oraclePriceOffset),
                "auctionDuration": (None if self.auctionDuration is None else self.auctionDuration),
                "auctionStartPrice": (None if self.auctionStartPrice is None else self.auctionStartPrice),
                "auctionEndPrice": (None if self.auctionEndPrice is None else self.auctionEndPrice),
        }

    @classmethod
    def from_json(cls, obj: OrderParamsJSON) -> "OrderParams":
        return cls(
                orderType=types.orderType.from_json(obj["orderType"]),
                marketType=types.marketType.from_json(obj["marketType"]),
                direction=types.positionDirection.from_json(obj["direction"]),
                userOrderId=obj["userOrderId"],
                baseAssetAmount=obj["baseAssetAmount"],
                price=obj["price"],
                marketIndex=obj["marketIndex"],
                reduceOnly=obj["reduceOnly"],
                postOnly=types.postOnlyParam.from_json(obj["postOnly"]),
                immediateOrCancel=obj["immediateOrCancel"],
                maxTs=(None if obj["maxTs"] is None else obj["maxTs"]),
                triggerPrice=(None if obj["triggerPrice"] is None else obj["triggerPrice"]),
                triggerCondition=types.orderTriggerCondition.from_json(obj["triggerCondition"]),
                oraclePriceOffset=(None if obj["oraclePriceOffset"] is None else obj["oraclePriceOffset"]),
                auctionDuration=(None if obj["auctionDuration"] is None else obj["auctionDuration"]),
                auctionStartPrice=(None if obj["auctionStartPrice"] is None else obj["auctionStartPrice"]),
                auctionEndPrice=(None if obj["auctionEndPrice"] is None else obj["auctionEndPrice"]),
        )






