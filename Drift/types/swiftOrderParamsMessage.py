'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey;
from solders.sysvar import RENT;

class SwiftOrderParamsMessageJSON(typing.TypedDict):
    swiftOrderParams: types.orderParams.OrderParamsJSON
    subAccountId: int
    slot: int
    uuid: str
    takeProfitOrderParams: typing.Optional[types.swiftTriggerOrderParams.SwiftTriggerOrderParamsJSON]
    stopLossOrderParams: typing.Optional[types.swiftTriggerOrderParams.SwiftTriggerOrderParamsJSON]

@dataclass
class SwiftOrderParamsMessage:
    layout: typing.ClassVar = borsh.CStruct(
        "swiftOrderParams" /types.orderParams.OrderParams.layout,
        "subAccountId" /borsh.U16,
        "slot" /borsh.U64,
        "uuid" /borsh.visitFixedSizeType,
        "takeProfitOrderParams" /borsh.Option(types.swiftTriggerOrderParams.SwiftTriggerOrderParams.layout),
        "stopLossOrderParams" /borsh.Option(types.swiftTriggerOrderParams.SwiftTriggerOrderParams.layout),
        )
    #fields
    swiftOrderParams: types.orderParams.OrderParams
    subAccountId: int
    slot: int
    uuid: borsh.String
    takeProfitOrderParams: typing.Optional[types.swiftTriggerOrderParams.SwiftTriggerOrderParamsJSON]
    stopLossOrderParams: typing.Optional[types.swiftTriggerOrderParams.SwiftTriggerOrderParamsJSON]
    
    @classmethod
    def from_decoded(cls, obj: Container) -> "SwiftOrderParamsMessage":
        return cls(
                   swiftOrderParams=obj.swiftOrderParams,
                   subAccountId=obj.subAccountId,
                   slot=obj.slot,
                   uuid=obj.uuid,
                   takeProfitOrderParams=obj.takeProfitOrderParams,
                   stopLossOrderParams=obj.stopLossOrderParams,
                )

    #def to_encodable(self) -> dict[str, typing.Any]:
    #    return {"row": self.row, "column": self.column}

    def to_json(self) -> SwiftOrderParamsMessageJSON:
        return {
                "swiftOrderParams": self.swiftOrderParams.to_json(),
                "subAccountId": self.subAccountId,
                "slot": self.slot,
                "uuid": self.uuid,
                "takeProfitOrderParams": (None if self.takeProfitOrderParams is None else self.takeProfitOrderParams.to_json()),
                "stopLossOrderParams": (None if self.stopLossOrderParams is None else self.stopLossOrderParams.to_json()),
        }

    @classmethod
    def from_json(cls, obj: SwiftOrderParamsMessageJSON) -> "SwiftOrderParamsMessage":
        return cls(
                swiftOrderParams=types.orderParams.OrderParams.from_json(obj["swiftOrderParams"]),
                subAccountId=obj["subAccountId"],
                slot=obj["slot"],
                uuid=obj["uuid"],
                takeProfitOrderParams=(None if obj["takeProfitOrderParams"] is None else types.swiftTriggerOrderParams.SwiftTriggerOrderParams.from_json(obj["takeProfitOrderParams"])),
                stopLossOrderParams=(None if obj["stopLossOrderParams"] is None else types.swiftTriggerOrderParams.SwiftTriggerOrderParams.from_json(obj["stopLossOrderParams"])),
        )






