'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey;
from solders.sysvar import RENT;
from . import rFQMakerOrderParams;

class RFQMatchJSON(typing.TypedDict):
    baseAssetAmount: int
    makerOrderParams: rFQMakerOrderParams.RFQMakerOrderParamsJSON
    makerSignature: list[int]

@dataclass
class RFQMatch:
    layout: typing.ClassVar = borsh.CStruct(
        "baseAssetAmount" /borsh.U64,
        "makerOrderParams" /rFQMakerOrderParams.RFQMakerOrderParams.layout,
        "makerSignature" /borsh.U8[64],
        )
    #fields
    baseAssetAmount: int
    makerOrderParams: rFQMakerOrderParams.RFQMakerOrderParams
    makerSignature: list[int]
    
    @classmethod
    def from_decoded(cls, obj: Container) -> "RFQMatch":
        return cls(
       baseAssetAmount=obj["baseAssetAmount"],makerOrderParams=rFQMakerOrderParams.RFQMakerOrderParams.from_decoded(obj["makerOrderParams"]),makerSignature=obj["makerSignature"]
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
                "baseAssetAmount": self.baseAssetAmount,
                "makerOrderParams": self.makerOrderParams.to_encodable(),
                "makerSignature": self.makerSignature,
                }

    def to_json(self) -> RFQMatchJSON:
        return {
                "baseAssetAmount": self.baseAssetAmount,
                "makerOrderParams": self.makerOrderParams.to_json(),
                "makerSignature": self.makerSignature,
                }

    @classmethod
    def from_json(cls, obj: RFQMatchJSON) -> "RFQMatch":
        return cls(
                baseAssetAmount=obj["baseAssetAmount"],
                makerOrderParams=rFQMakerOrderParams.RFQMakerOrderParams.from_json(obj["makerOrderParams"]),
                makerSignature=obj["makerSignature"],
        )






