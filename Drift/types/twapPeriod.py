'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey, EnumForCodegen;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey as SolPubkey;
from solders.sysvar import RENT;


class FundingPeriodJSON(typing.TypedDict):
    kind: typing.Literal["FundingPeriod"]


@dataclass
class FundingPeriod:
    discriminator: typing.ClassVar = 0
    def to_json(self) -> FundingPeriodJSON:
        return FundingPeriodJSON(
            kind="FundingPeriod",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "FundingPeriod": {},
        }




class FiveMinJSON(typing.TypedDict):
    kind: typing.Literal["FiveMin"]


@dataclass
class FiveMin:
    discriminator: typing.ClassVar = 1
    def to_json(self) -> FiveMinJSON:
        return FiveMinJSON(
            kind="FiveMin",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "FiveMin": {},
        }





TwapPeriodKind = typing.Union[
    FundingPeriod,
    FiveMin,
]
TwapPeriodJSON = typing.Union[
    FundingPeriodJSON,
    FiveMinJSON,
]

def from_decoded(obj: dict) -> TwapPeriodKind:
    if not isinstance(obj, dict):
        raise ValueError("Invalid enum object")
    if "FundingPeriod" in obj:
      return FundingPeriod()
    if "FiveMin" in obj:
      return FiveMin()
    raise ValueError("Invalid enum object")

def from_json(obj: TwapPeriodJSON) -> TwapPeriodKind:
    if obj["kind"] == "FundingPeriod":
        return FundingPeriod()

    if obj["kind"] == "FiveMin":
        return FiveMin()

    kind = obj["kind"]
    raise ValueError(f"Unrecognized enum kind: {kind}")

layout = EnumForCodegen(
"FundingPeriod" / borsh.CStruct(),
"FiveMin" / borsh.CStruct(),
)
