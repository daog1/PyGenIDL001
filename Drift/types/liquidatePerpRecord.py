'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey as SolPubkey;
from solders.sysvar import RENT;

class LiquidatePerpRecordJSON(typing.TypedDict):
    marketIndex: int
    oraclePrice: int
    baseAssetAmount: int
    quoteAssetAmount: int
    lpShares: int
    fillRecordId: int
    userOrderId: int
    liquidatorOrderId: int
    liquidatorFee: int
    ifFee: int

@dataclass
class LiquidatePerpRecord:
    layout: typing.ClassVar = borsh.CStruct(
        "marketIndex" /borsh.U16,
        "oraclePrice" /borsh.I64,
        "baseAssetAmount" /borsh.I64,
        "quoteAssetAmount" /borsh.I64,
        "lpShares" /borsh.U64,
        "fillRecordId" /borsh.U64,
        "userOrderId" /borsh.U32,
        "liquidatorOrderId" /borsh.U32,
        "liquidatorFee" /borsh.U64,
        "ifFee" /borsh.U64,
        )
    #fields
    marketIndex: int
    oraclePrice: int
    baseAssetAmount: int
    quoteAssetAmount: int
    lpShares: int
    fillRecordId: int
    userOrderId: int
    liquidatorOrderId: int
    liquidatorFee: int
    ifFee: int
    
    @classmethod
    def from_decoded(cls, obj: Container) -> "LiquidatePerpRecord":
        return cls(
        marketIndex=obj["marketIndex"],
        oraclePrice=obj["oraclePrice"],
        baseAssetAmount=obj["baseAssetAmount"],
        quoteAssetAmount=obj["quoteAssetAmount"],
        lpShares=obj["lpShares"],
        fillRecordId=obj["fillRecordId"],
        userOrderId=obj["userOrderId"],
        liquidatorOrderId=obj["liquidatorOrderId"],
        liquidatorFee=obj["liquidatorFee"],
        ifFee=obj["ifFee"],
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
                "marketIndex": self.marketIndex,
                "oraclePrice": self.oraclePrice,
                "baseAssetAmount": self.baseAssetAmount,
                "quoteAssetAmount": self.quoteAssetAmount,
                "lpShares": self.lpShares,
                "fillRecordId": self.fillRecordId,
                "userOrderId": self.userOrderId,
                "liquidatorOrderId": self.liquidatorOrderId,
                "liquidatorFee": self.liquidatorFee,
                "ifFee": self.ifFee,
                }

    def to_json(self) -> LiquidatePerpRecordJSON:
        return {
                "marketIndex": self.marketIndex,
                "oraclePrice": self.oraclePrice,
                "baseAssetAmount": self.baseAssetAmount,
                "quoteAssetAmount": self.quoteAssetAmount,
                "lpShares": self.lpShares,
                "fillRecordId": self.fillRecordId,
                "userOrderId": self.userOrderId,
                "liquidatorOrderId": self.liquidatorOrderId,
                "liquidatorFee": self.liquidatorFee,
                "ifFee": self.ifFee,
                }

    @classmethod
    def from_json(cls, obj: LiquidatePerpRecordJSON) -> "LiquidatePerpRecord":
        return cls(
                marketIndex=obj["marketIndex"],
                oraclePrice=obj["oraclePrice"],
                baseAssetAmount=obj["baseAssetAmount"],
                quoteAssetAmount=obj["quoteAssetAmount"],
                lpShares=obj["lpShares"],
                fillRecordId=obj["fillRecordId"],
                userOrderId=obj["userOrderId"],
                liquidatorOrderId=obj["liquidatorOrderId"],
                liquidatorFee=obj["liquidatorFee"],
                ifFee=obj["ifFee"],
        )






