'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from anchorpy.borsh_extension import EnumForCodegen
from dataclasses import dataclass


class IsReferrerJSON(typing.TypedDict):
    kind: typing.Literal["IsReferrer"]


@dataclass
class IsReferrer:
    discriminator: typing.ClassVar = 0
    def to_json(self) -> IsReferrerJSON:
        return IsReferrerJSON(
            kind="IsReferrer",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "IsReferrer": {},
        }




class IsReferredJSON(typing.TypedDict):
    kind: typing.Literal["IsReferred"]


@dataclass
class IsReferred:
    discriminator: typing.ClassVar = 1
    def to_json(self) -> IsReferredJSON:
        return IsReferredJSON(
            kind="IsReferred",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "IsReferred": {},
        }





ReferrerStatusKind = typing.Union[
    IsReferrer,
    IsReferred,
]
ReferrerStatusJSON = typing.Union[
    IsReferrerJSON,
    IsReferredJSON,
]

def from_decoded(obj: dict) -> ReferrerStatusKind:
    if not isinstance(obj, dict):
        raise ValueError("Invalid enum object")
    if "IsReferrer" in obj:
      return IsReferrer()
    if "IsReferred" in obj:
      return IsReferred()
    raise ValueError("Invalid enum object")

def from_json(obj: ReferrerStatusJSON) -> ReferrerStatusKind:
    if obj["kind"] == "IsReferrer":
        return IsReferrer()

    if obj["kind"] == "IsReferred":
        return IsReferred()

    kind = obj["kind"]
    raise ValueError(f"Unrecognized enum kind: {kind}")


layout = EnumForCodegen(
"IsReferrer" / borsh.CStruct(),
"IsReferred" / borsh.CStruct(),
)
