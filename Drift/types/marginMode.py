'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey, EnumForCodegen;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey;
from solders.sysvar import RENT;

class DefaultJSON(typing.TypedDict):
    kind: typing.Literal["Default"]


@dataclass
class Default:
    discriminator: typing.ClassVar = 0
    @classmethod
    def to_json(cls) -> DefaultJSON:
        return DefaultJSON(
            kind="Default",
        )

    @classmethod
    def to_encodable(cls) -> dict:
        return {
            "Default": {},
        }



class HighLeverageJSON(typing.TypedDict):
    kind: typing.Literal["HighLeverage"]


@dataclass
class HighLeverage:
    discriminator: typing.ClassVar = 1
    @classmethod
    def to_json(cls) -> HighLeverageJSON:
        return HighLeverageJSON(
            kind="HighLeverage",
        )

    @classmethod
    def to_encodable(cls) -> dict:
        return {
            "HighLeverage": {},
        }





MarginModeKind = typing.Union[
Default,
HighLeverage,
]
MarginModeJSON = typing.Union[
DefaultJSON,
HighLeverageJSON,
]

def from_decoded(obj: dict) -> MarginModeKind:
    if not isinstance(obj, dict):
        raise ValueError("Invalid enum object")
    if "Default" in obj:
      return Default()
    if "HighLeverage" in obj:
      return HighLeverage()
    raise ValueError("Invalid enum object")

def from_json(obj: MarginModeJSON) -> MarginModeKind:
    if obj["kind"] == "Default":
        return Default()
    if obj["kind"] == "HighLeverage":
        return HighLeverage()
    kind = obj["kind"]
    raise ValueError(f"Unrecognized enum kind: {kind}")

layout = EnumForCodegen(
"Default" / borsh.CStruct(),
"HighLeverage" / borsh.CStruct(),
)
