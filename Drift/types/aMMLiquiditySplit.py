'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey, EnumForCodegen;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey as SolPubkey;


class ProtocolOwnedJSON(typing.TypedDict):
    kind: typing.Literal["ProtocolOwned"]


@dataclass
class ProtocolOwned:
    discriminator: typing.ClassVar = 0
    def to_json(self) -> ProtocolOwnedJSON:
        return ProtocolOwnedJSON(
            kind="ProtocolOwned",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "ProtocolOwned": {},
        }




class LPOwnedJSON(typing.TypedDict):
    kind: typing.Literal["LPOwned"]


@dataclass
class LPOwned:
    discriminator: typing.ClassVar = 1
    def to_json(self) -> LPOwnedJSON:
        return LPOwnedJSON(
            kind="LPOwned",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "LPOwned": {},
        }




class SharedJSON(typing.TypedDict):
    kind: typing.Literal["Shared"]


@dataclass
class Shared:
    discriminator: typing.ClassVar = 2
    def to_json(self) -> SharedJSON:
        return SharedJSON(
            kind="Shared",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "Shared": {},
        }





AMMLiquiditySplitKind = typing.Union[
    ProtocolOwned,
    LPOwned,
    Shared,
]
AMMLiquiditySplitJSON = typing.Union[
    ProtocolOwnedJSON,
    LPOwnedJSON,
    SharedJSON,
]

def from_decoded(obj: dict) -> AMMLiquiditySplitKind:
    if not isinstance(obj, dict):
        raise ValueError("Invalid enum object")
    if "ProtocolOwned" in obj:
      return ProtocolOwned()
    if "LPOwned" in obj:
      return LPOwned()
    if "Shared" in obj:
      return Shared()
    raise ValueError("Invalid enum object")

def from_json(obj: AMMLiquiditySplitJSON) -> AMMLiquiditySplitKind:
    if obj["kind"] == "ProtocolOwned":
        return ProtocolOwned()

    if obj["kind"] == "LPOwned":
        return LPOwned()

    if obj["kind"] == "Shared":
        return Shared()

    kind = obj["kind"]
    raise ValueError(f"Unrecognized enum kind: {kind}")

layout = EnumForCodegen(
"ProtocolOwned" / borsh.CStruct(),
"LPOwned" / borsh.CStruct(),
"Shared" / borsh.CStruct(),
)
