'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey;
from solders.sysvar import RENT;

class HistoricalOracleDataJSON(typing.TypedDict):
    lastOraclePrice: int
    lastOracleConf: int
    lastOracleDelay: int
    lastOraclePriceTwap: int
    lastOraclePriceTwap5min: int
    lastOraclePriceTwapTs: int

@dataclass
class HistoricalOracleData:
    layout: typing.ClassVar = borsh.CStruct(
        "lastOraclePrice" /borsh.I64,
        "lastOracleConf" /borsh.U64,
        "lastOracleDelay" /borsh.I64,
        "lastOraclePriceTwap" /borsh.I64,
        "lastOraclePriceTwap5min" /borsh.I64,
        "lastOraclePriceTwapTs" /borsh.I64,
        )
    #fields
    lastOraclePrice: int
    lastOracleConf: int
    lastOracleDelay: int
    lastOraclePriceTwap: int
    lastOraclePriceTwap5min: int
    lastOraclePriceTwapTs: int
    
    @classmethod
    def from_decoded(cls, obj: Container) -> "HistoricalOracleData":
        return cls(
       lastOraclePrice=obj["lastOraclePrice"],lastOracleConf=obj["lastOracleConf"],lastOracleDelay=obj["lastOracleDelay"],lastOraclePriceTwap=obj["lastOraclePriceTwap"],lastOraclePriceTwap5min=obj["lastOraclePriceTwap5min"],lastOraclePriceTwapTs=obj["lastOraclePriceTwapTs"]
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
                "lastOraclePrice": self.lastOraclePrice,
                "lastOracleConf": self.lastOracleConf,
                "lastOracleDelay": self.lastOracleDelay,
                "lastOraclePriceTwap": self.lastOraclePriceTwap,
                "lastOraclePriceTwap5min": self.lastOraclePriceTwap5min,
                "lastOraclePriceTwapTs": self.lastOraclePriceTwapTs,
                }

    def to_json(self) -> HistoricalOracleDataJSON:
        return {
                "lastOraclePrice": self.lastOraclePrice,
                "lastOracleConf": self.lastOracleConf,
                "lastOracleDelay": self.lastOracleDelay,
                "lastOraclePriceTwap": self.lastOraclePriceTwap,
                "lastOraclePriceTwap5min": self.lastOraclePriceTwap5min,
                "lastOraclePriceTwapTs": self.lastOraclePriceTwapTs,
                }

    @classmethod
    def from_json(cls, obj: HistoricalOracleDataJSON) -> "HistoricalOracleData":
        return cls(
                lastOraclePrice=obj["lastOraclePrice"],
                lastOracleConf=obj["lastOracleConf"],
                lastOracleDelay=obj["lastOracleDelay"],
                lastOraclePriceTwap=obj["lastOraclePriceTwap"],
                lastOraclePriceTwap5min=obj["lastOraclePriceTwap5min"],
                lastOraclePriceTwapTs=obj["lastOraclePriceTwapTs"],
        )






