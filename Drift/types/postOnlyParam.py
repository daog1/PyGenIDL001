'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey, EnumForCodegen;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey;
from solders.sysvar import RENT;

class NoneJSON(typing.TypedDict):
    kind: typing.Literal["None"]


@dataclass
class None:
    discriminator: typing.ClassVar = 0
    @classmethod
    def to_json(cls) -> NoneJSON:
        return NoneJSON(
            kind="None",
        )

    @classmethod
    def to_encodable(cls) -> dict:
        return {
            "None": {},
        }



class MustPostOnlyJSON(typing.TypedDict):
    kind: typing.Literal["MustPostOnly"]


@dataclass
class MustPostOnly:
    discriminator: typing.ClassVar = 1
    @classmethod
    def to_json(cls) -> MustPostOnlyJSON:
        return MustPostOnlyJSON(
            kind="MustPostOnly",
        )

    @classmethod
    def to_encodable(cls) -> dict:
        return {
            "MustPostOnly": {},
        }



class TryPostOnlyJSON(typing.TypedDict):
    kind: typing.Literal["TryPostOnly"]


@dataclass
class TryPostOnly:
    discriminator: typing.ClassVar = 2
    @classmethod
    def to_json(cls) -> TryPostOnlyJSON:
        return TryPostOnlyJSON(
            kind="TryPostOnly",
        )

    @classmethod
    def to_encodable(cls) -> dict:
        return {
            "TryPostOnly": {},
        }



class SlideJSON(typing.TypedDict):
    kind: typing.Literal["Slide"]


@dataclass
class Slide:
    discriminator: typing.ClassVar = 3
    @classmethod
    def to_json(cls) -> SlideJSON:
        return SlideJSON(
            kind="Slide",
        )

    @classmethod
    def to_encodable(cls) -> dict:
        return {
            "Slide": {},
        }





PostOnlyParamKind = typing.Union[
None,
MustPostOnly,
TryPostOnly,
Slide,
]
PostOnlyParamJSON = typing.Union[
NoneJSON,
MustPostOnlyJSON,
TryPostOnlyJSON,
SlideJSON,
]

def from_decoded(obj: dict) -> PostOnlyParamKind:
    if not isinstance(obj, dict):
        raise ValueError("Invalid enum object")
    if "None" in obj:
      return None()
    if "MustPostOnly" in obj:
      return MustPostOnly()
    if "TryPostOnly" in obj:
      return TryPostOnly()
    if "Slide" in obj:
      return Slide()
    raise ValueError("Invalid enum object")

def from_json(obj: PostOnlyParamJSON) -> PostOnlyParamKind:
    if obj["kind"] == "None":
        return None()
    if obj["kind"] == "MustPostOnly":
        return MustPostOnly()
    if obj["kind"] == "TryPostOnly":
        return TryPostOnly()
    if obj["kind"] == "Slide":
        return Slide()
    kind = obj["kind"]
    raise ValueError(f"Unrecognized enum kind: {kind}")

layout = EnumForCodegen(
"None" / borsh.CStruct(),
"MustPostOnly" / borsh.CStruct(),
"TryPostOnly" / borsh.CStruct(),
"Slide" / borsh.CStruct(),
)
