'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey as SolPubkey;
from solders.sysvar import RENT;
from . import orderTriggerCondition, positionDirection, postOnlyParam;

class ModifyOrderParamsJSON(typing.TypedDict):
    direction: typing.Optional[positionDirection.PositionDirectionJSON]
    baseAssetAmount: typing.Optional[int]
    price: typing.Optional[int]
    reduceOnly: typing.Optional[bool]
    postOnly: typing.Optional[postOnlyParam.PostOnlyParamJSON]
    immediateOrCancel: typing.Optional[bool]
    maxTs: typing.Optional[int]
    triggerPrice: typing.Optional[int]
    triggerCondition: typing.Optional[orderTriggerCondition.OrderTriggerConditionJSON]
    oraclePriceOffset: typing.Optional[int]
    auctionDuration: typing.Optional[int]
    auctionStartPrice: typing.Optional[int]
    auctionEndPrice: typing.Optional[int]
    policy: typing.Optional[int]

@dataclass
class ModifyOrderParams:
    layout: typing.ClassVar = borsh.CStruct(
        "direction" /borsh.Option(positionDirection.layout),
        "baseAssetAmount" /borsh.Option(borsh.U64),
        "price" /borsh.Option(borsh.U64),
        "reduceOnly" /borsh.Option(borsh.Bool),
        "postOnly" /borsh.Option(postOnlyParam.layout),
        "immediateOrCancel" /borsh.Option(borsh.Bool),
        "maxTs" /borsh.Option(borsh.I64),
        "triggerPrice" /borsh.Option(borsh.U64),
        "triggerCondition" /borsh.Option(orderTriggerCondition.layout),
        "oraclePriceOffset" /borsh.Option(borsh.I32),
        "auctionDuration" /borsh.Option(borsh.U8),
        "auctionStartPrice" /borsh.Option(borsh.I64),
        "auctionEndPrice" /borsh.Option(borsh.I64),
        "policy" /borsh.Option(borsh.U8),
        )
    #fields
    direction: typing.Optional[positionDirection.PositionDirectionKind]
    baseAssetAmount: typing.Optional[int]
    price: typing.Optional[int]
    reduceOnly: typing.Optional[bool]
    postOnly: typing.Optional[postOnlyParam.PostOnlyParamKind]
    immediateOrCancel: typing.Optional[bool]
    maxTs: typing.Optional[int]
    triggerPrice: typing.Optional[int]
    triggerCondition: typing.Optional[orderTriggerCondition.OrderTriggerConditionKind]
    oraclePriceOffset: typing.Optional[int]
    auctionDuration: typing.Optional[int]
    auctionStartPrice: typing.Optional[int]
    auctionEndPrice: typing.Optional[int]
    policy: typing.Optional[int]
    
    @classmethod
    def from_decoded(cls, obj: Container) -> "ModifyOrderParams":
        return cls(
        direction=(None if obj["direction"] is None else positionDirection.from_decoded(obj["direction"])),
        baseAssetAmount=(None if obj["baseAssetAmount"] is None else obj["baseAssetAmount"]),
        price=(None if obj["price"] is None else obj["price"]),
        reduceOnly=(None if obj["reduceOnly"] is None else obj["reduceOnly"]),
        postOnly=(None if obj["postOnly"] is None else postOnlyParam.from_decoded(obj["postOnly"])),
        immediateOrCancel=(None if obj["immediateOrCancel"] is None else obj["immediateOrCancel"]),
        maxTs=(None if obj["maxTs"] is None else obj["maxTs"]),
        triggerPrice=(None if obj["triggerPrice"] is None else obj["triggerPrice"]),
        triggerCondition=(None if obj["triggerCondition"] is None else orderTriggerCondition.from_decoded(obj["triggerCondition"])),
        oraclePriceOffset=(None if obj["oraclePriceOffset"] is None else obj["oraclePriceOffset"]),
        auctionDuration=(None if obj["auctionDuration"] is None else obj["auctionDuration"]),
        auctionStartPrice=(None if obj["auctionStartPrice"] is None else obj["auctionStartPrice"]),
        auctionEndPrice=(None if obj["auctionEndPrice"] is None else obj["auctionEndPrice"]),
        policy=(None if obj["policy"] is None else obj["policy"]),
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
                "direction": self.direction,
                "baseAssetAmount": self.baseAssetAmount,
                "price": self.price,
                "reduceOnly": self.reduceOnly,
                "postOnly": self.postOnly,
                "immediateOrCancel": self.immediateOrCancel,
                "maxTs": self.maxTs,
                "triggerPrice": self.triggerPrice,
                "triggerCondition": self.triggerCondition,
                "oraclePriceOffset": self.oraclePriceOffset,
                "auctionDuration": self.auctionDuration,
                "auctionStartPrice": self.auctionStartPrice,
                "auctionEndPrice": self.auctionEndPrice,
                "policy": self.policy,
                }

    def to_json(self) -> ModifyOrderParamsJSON:
        return {
                "direction": (None if self.direction is None else self.direction.to_json()),
                "baseAssetAmount": (None if self.baseAssetAmount is None else self.baseAssetAmount),
                "price": (None if self.price is None else self.price),
                "reduceOnly": (None if self.reduceOnly is None else self.reduceOnly),
                "postOnly": (None if self.postOnly is None else self.postOnly.to_json()),
                "immediateOrCancel": (None if self.immediateOrCancel is None else self.immediateOrCancel),
                "maxTs": (None if self.maxTs is None else self.maxTs),
                "triggerPrice": (None if self.triggerPrice is None else self.triggerPrice),
                "triggerCondition": (None if self.triggerCondition is None else self.triggerCondition.to_json()),
                "oraclePriceOffset": (None if self.oraclePriceOffset is None else self.oraclePriceOffset),
                "auctionDuration": (None if self.auctionDuration is None else self.auctionDuration),
                "auctionStartPrice": (None if self.auctionStartPrice is None else self.auctionStartPrice),
                "auctionEndPrice": (None if self.auctionEndPrice is None else self.auctionEndPrice),
                "policy": (None if self.policy is None else self.policy),
                }

    @classmethod
    def from_json(cls, obj: ModifyOrderParamsJSON) -> "ModifyOrderParams":
        return cls(
                direction=(None if obj["direction"] is None else positionDirection.from_json(obj["direction"])),
                baseAssetAmount=(None if obj["baseAssetAmount"] is None else obj["baseAssetAmount"]),
                price=(None if obj["price"] is None else obj["price"]),
                reduceOnly=(None if obj["reduceOnly"] is None else obj["reduceOnly"]),
                postOnly=(None if obj["postOnly"] is None else postOnlyParam.from_json(obj["postOnly"])),
                immediateOrCancel=(None if obj["immediateOrCancel"] is None else obj["immediateOrCancel"]),
                maxTs=(None if obj["maxTs"] is None else obj["maxTs"]),
                triggerPrice=(None if obj["triggerPrice"] is None else obj["triggerPrice"]),
                triggerCondition=(None if obj["triggerCondition"] is None else orderTriggerCondition.from_json(obj["triggerCondition"])),
                oraclePriceOffset=(None if obj["oraclePriceOffset"] is None else obj["oraclePriceOffset"]),
                auctionDuration=(None if obj["auctionDuration"] is None else obj["auctionDuration"]),
                auctionStartPrice=(None if obj["auctionStartPrice"] is None else obj["auctionStartPrice"]),
                auctionEndPrice=(None if obj["auctionEndPrice"] is None else obj["auctionEndPrice"]),
                policy=(None if obj["policy"] is None else obj["policy"]),
        )






