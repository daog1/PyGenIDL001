'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey;
from solders.sysvar import RENT;

class RFQMakerOrderParamsJSON(typing.TypedDict):
    uuid: str
    authority: str
    subAccountId: int
    marketIndex: int
    marketType: types.marketType.MarketTypeJSON
    baseAssetAmount: int
    price: int
    direction: types.positionDirection.PositionDirectionJSON
    maxTs: int

@dataclass
class RFQMakerOrderParams:
    layout: typing.ClassVar = borsh.CStruct(
        "uuid" /borsh.visitFixedSizeType,
        "authority" /BorshPubkey,
        "subAccountId" /borsh.U16,
        "marketIndex" /borsh.U16,
        "marketType" /types.marketType.MarketType.layout,
        "baseAssetAmount" /borsh.U64,
        "price" /borsh.U64,
        "direction" /types.positionDirection.PositionDirection.layout,
        "maxTs" /borsh.I64,
        )
    #fields
    uuid: borsh.String
    authority: Pubkey
    subAccountId: int
    marketIndex: int
    marketType: types.marketType.MarketType
    baseAssetAmount: int
    price: int
    direction: types.positionDirection.PositionDirection
    maxTs: int
    
    @classmethod
    def from_decoded(cls, obj: Container) -> "RFQMakerOrderParams":
        return cls(
                   uuid=obj.uuid,
                   authority=obj.authority,
                   subAccountId=obj.subAccountId,
                   marketIndex=obj.marketIndex,
                   marketType=obj.marketType,
                   baseAssetAmount=obj.baseAssetAmount,
                   price=obj.price,
                   direction=obj.direction,
                   maxTs=obj.maxTs,
                )

    #def to_encodable(self) -> dict[str, typing.Any]:
    #    return {"row": self.row, "column": self.column}

    def to_json(self) -> RFQMakerOrderParamsJSON:
        return {
                "uuid": self.uuid,
                "authority": str(self.authority),
                "subAccountId": self.subAccountId,
                "marketIndex": self.marketIndex,
                "marketType": self.marketType.to_json(),
                "baseAssetAmount": self.baseAssetAmount,
                "price": self.price,
                "direction": self.direction.to_json(),
                "maxTs": self.maxTs,
        }

    @classmethod
    def from_json(cls, obj: RFQMakerOrderParamsJSON) -> "RFQMakerOrderParams":
        return cls(
                uuid=obj["uuid"],
                authority=Pubkey.from_string(obj["authority"]),
                subAccountId=obj["subAccountId"],
                marketIndex=obj["marketIndex"],
                marketType=types.marketType.MarketType.from_json(obj["marketType"]),
                baseAssetAmount=obj["baseAssetAmount"],
                price=obj["price"],
                direction=types.positionDirection.PositionDirection.from_json(obj["direction"]),
                maxTs=obj["maxTs"],
        )






