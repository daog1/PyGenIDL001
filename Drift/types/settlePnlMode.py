'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey, EnumForCodegen;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey;
from solders.sysvar import RENT;

class MustSettleJSON(typing.TypedDict):
    kind: typing.Literal["MustSettle"]


@dataclass
class MustSettle:
    discriminator: typing.ClassVar = 0
    @classmethod
    def to_json(cls) -> MustSettleJSON:
        return MustSettleJSON(
            kind="MustSettle",
        )

    @classmethod
    def to_encodable(cls) -> dict:
        return {
            "MustSettle": {},
        }



class TrySettleJSON(typing.TypedDict):
    kind: typing.Literal["TrySettle"]


@dataclass
class TrySettle:
    discriminator: typing.ClassVar = 1
    @classmethod
    def to_json(cls) -> TrySettleJSON:
        return TrySettleJSON(
            kind="TrySettle",
        )

    @classmethod
    def to_encodable(cls) -> dict:
        return {
            "TrySettle": {},
        }





SettlePnlModeKind = typing.Union[
MustSettle,
TrySettle,
]
SettlePnlModeJSON = typing.Union[
MustSettleJSON,
TrySettleJSON,
]

def from_decoded(obj: dict) -> SettlePnlModeKind:
    if not isinstance(obj, dict):
        raise ValueError("Invalid enum object")
    if "MustSettle" in obj:
      return MustSettle()
    if "TrySettle" in obj:
      return TrySettle()
    raise ValueError("Invalid enum object")

def from_json(obj: SettlePnlModeJSON) -> SettlePnlModeKind:
    if obj["kind"] == "MustSettle":
        return MustSettle()
    if obj["kind"] == "TrySettle":
        return TrySettle()
    kind = obj["kind"]
    raise ValueError(f"Unrecognized enum kind: {kind}")

layout = EnumForCodegen(
"MustSettle" / borsh.CStruct(),
"TrySettle" / borsh.CStruct(),
)
