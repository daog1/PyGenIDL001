'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey, EnumForCodegen;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey as SolPubkey;


class InitJSON(typing.TypedDict):
    kind: typing.Literal["Init"]


@dataclass
class Init:
    discriminator: typing.ClassVar = 0
    def to_json(self) -> InitJSON:
        return InitJSON(
            kind="Init",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "Init": {},
        }




class OpenJSON(typing.TypedDict):
    kind: typing.Literal["Open"]


@dataclass
class Open:
    discriminator: typing.ClassVar = 1
    def to_json(self) -> OpenJSON:
        return OpenJSON(
            kind="Open",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "Open": {},
        }




class FilledJSON(typing.TypedDict):
    kind: typing.Literal["Filled"]


@dataclass
class Filled:
    discriminator: typing.ClassVar = 2
    def to_json(self) -> FilledJSON:
        return FilledJSON(
            kind="Filled",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "Filled": {},
        }




class CanceledJSON(typing.TypedDict):
    kind: typing.Literal["Canceled"]


@dataclass
class Canceled:
    discriminator: typing.ClassVar = 3
    def to_json(self) -> CanceledJSON:
        return CanceledJSON(
            kind="Canceled",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "Canceled": {},
        }





OrderStatusKind = typing.Union[
    Init,
    Open,
    Filled,
    Canceled,
]
OrderStatusJSON = typing.Union[
    InitJSON,
    OpenJSON,
    FilledJSON,
    CanceledJSON,
]

def from_decoded(obj: dict) -> OrderStatusKind:
    if not isinstance(obj, dict):
        raise ValueError("Invalid enum object")
    if "Init" in obj:
      return Init()
    if "Open" in obj:
      return Open()
    if "Filled" in obj:
      return Filled()
    if "Canceled" in obj:
      return Canceled()
    raise ValueError("Invalid enum object")

def from_json(obj: OrderStatusJSON) -> OrderStatusKind:
    if obj["kind"] == "Init":
        return Init()

    if obj["kind"] == "Open":
        return Open()

    if obj["kind"] == "Filled":
        return Filled()

    if obj["kind"] == "Canceled":
        return Canceled()

    kind = obj["kind"]
    raise ValueError(f"Unrecognized enum kind: {kind}")

layout = EnumForCodegen(
"Init" / borsh.CStruct(),
"Open" / borsh.CStruct(),
"Filled" / borsh.CStruct(),
"Canceled" / borsh.CStruct(),
)
