'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey, EnumForCodegen;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey;
from solders.sysvar import RENT;


class InitializedJSON(typing.TypedDict):
    kind: typing.Literal["Initialized"]


@dataclass
class Initialized:
    discriminator: typing.ClassVar = 0
    def to_json(self) -> InitializedJSON:
        return InitializedJSON(
            kind="Initialized",
        )

    def to_encodable(self) -> dict:
        return {
            "Initialized": {},
        }




class ActiveJSON(typing.TypedDict):
    kind: typing.Literal["Active"]


@dataclass
class Active:
    discriminator: typing.ClassVar = 1
    def to_json(self) -> ActiveJSON:
        return ActiveJSON(
            kind="Active",
        )

    def to_encodable(self) -> dict:
        return {
            "Active": {},
        }




class FundingPausedJSON(typing.TypedDict):
    kind: typing.Literal["FundingPaused"]


@dataclass
class FundingPaused:
    discriminator: typing.ClassVar = 2
    def to_json(self) -> FundingPausedJSON:
        return FundingPausedJSON(
            kind="FundingPaused",
        )

    def to_encodable(self) -> dict:
        return {
            "FundingPaused": {},
        }




class AmmPausedJSON(typing.TypedDict):
    kind: typing.Literal["AmmPaused"]


@dataclass
class AmmPaused:
    discriminator: typing.ClassVar = 3
    def to_json(self) -> AmmPausedJSON:
        return AmmPausedJSON(
            kind="AmmPaused",
        )

    def to_encodable(self) -> dict:
        return {
            "AmmPaused": {},
        }




class FillPausedJSON(typing.TypedDict):
    kind: typing.Literal["FillPaused"]


@dataclass
class FillPaused:
    discriminator: typing.ClassVar = 4
    def to_json(self) -> FillPausedJSON:
        return FillPausedJSON(
            kind="FillPaused",
        )

    def to_encodable(self) -> dict:
        return {
            "FillPaused": {},
        }




class WithdrawPausedJSON(typing.TypedDict):
    kind: typing.Literal["WithdrawPaused"]


@dataclass
class WithdrawPaused:
    discriminator: typing.ClassVar = 5
    def to_json(self) -> WithdrawPausedJSON:
        return WithdrawPausedJSON(
            kind="WithdrawPaused",
        )

    def to_encodable(self) -> dict:
        return {
            "WithdrawPaused": {},
        }




class ReduceOnlyJSON(typing.TypedDict):
    kind: typing.Literal["ReduceOnly"]


@dataclass
class ReduceOnly:
    discriminator: typing.ClassVar = 6
    def to_json(self) -> ReduceOnlyJSON:
        return ReduceOnlyJSON(
            kind="ReduceOnly",
        )

    def to_encodable(self) -> dict:
        return {
            "ReduceOnly": {},
        }




class SettlementJSON(typing.TypedDict):
    kind: typing.Literal["Settlement"]


@dataclass
class Settlement:
    discriminator: typing.ClassVar = 7
    def to_json(self) -> SettlementJSON:
        return SettlementJSON(
            kind="Settlement",
        )

    def to_encodable(self) -> dict:
        return {
            "Settlement": {},
        }




class DelistedJSON(typing.TypedDict):
    kind: typing.Literal["Delisted"]


@dataclass
class Delisted:
    discriminator: typing.ClassVar = 8
    def to_json(self) -> DelistedJSON:
        return DelistedJSON(
            kind="Delisted",
        )

    def to_encodable(self) -> dict:
        return {
            "Delisted": {},
        }





MarketStatusKind = typing.Union[
Initialized,
Active,
FundingPaused,
AmmPaused,
FillPaused,
WithdrawPaused,
ReduceOnly,
Settlement,
Delisted,
]
MarketStatusJSON = typing.Union[
InitializedJSON,
ActiveJSON,
FundingPausedJSON,
AmmPausedJSON,
FillPausedJSON,
WithdrawPausedJSON,
ReduceOnlyJSON,
SettlementJSON,
DelistedJSON,
]

def from_decoded(obj: dict) -> MarketStatusKind:
    if not isinstance(obj, dict):
        raise ValueError("Invalid enum object")
    if "Initialized" in obj:
      return Initialized()
    if "Active" in obj:
      return Active()
    if "FundingPaused" in obj:
      return FundingPaused()
    if "AmmPaused" in obj:
      return AmmPaused()
    if "FillPaused" in obj:
      return FillPaused()
    if "WithdrawPaused" in obj:
      return WithdrawPaused()
    if "ReduceOnly" in obj:
      return ReduceOnly()
    if "Settlement" in obj:
      return Settlement()
    if "Delisted" in obj:
      return Delisted()
    raise ValueError("Invalid enum object")

def from_json(obj: MarketStatusJSON) -> MarketStatusKind:
    if obj["kind"] == "Initialized":
        return Initialized()

    if obj["kind"] == "Active":
        return Active()

    if obj["kind"] == "FundingPaused":
        return FundingPaused()

    if obj["kind"] == "AmmPaused":
        return AmmPaused()

    if obj["kind"] == "FillPaused":
        return FillPaused()

    if obj["kind"] == "WithdrawPaused":
        return WithdrawPaused()

    if obj["kind"] == "ReduceOnly":
        return ReduceOnly()

    if obj["kind"] == "Settlement":
        return Settlement()

    if obj["kind"] == "Delisted":
        return Delisted()

    kind = obj["kind"]
    raise ValueError(f"Unrecognized enum kind: {kind}")

layout = EnumForCodegen(
"Initialized" / borsh.CStruct(),
"Active" / borsh.CStruct(),
"FundingPaused" / borsh.CStruct(),
"AmmPaused" / borsh.CStruct(),
"FillPaused" / borsh.CStruct(),
"WithdrawPaused" / borsh.CStruct(),
"ReduceOnly" / borsh.CStruct(),
"Settlement" / borsh.CStruct(),
"Delisted" / borsh.CStruct(),
)
