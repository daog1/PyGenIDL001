'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey;
from solders.sysvar import RENT;

class LiquidatePerpPnlForDepositRecordJSON(typing.TypedDict):
    perpMarketIndex: int
    marketOraclePrice: int
    pnlTransfer: int
    assetMarketIndex: int
    assetPrice: int
    assetTransfer: int

@dataclass
class LiquidatePerpPnlForDepositRecord:
    layout: typing.ClassVar = borsh.CStruct(
        "perpMarketIndex" /borsh.U16,
        "marketOraclePrice" /borsh.I64,
        "pnlTransfer" /borsh.U128,
        "assetMarketIndex" /borsh.U16,
        "assetPrice" /borsh.I64,
        "assetTransfer" /borsh.U128,
        )
    #fields
    perpMarketIndex: int
    marketOraclePrice: int
    pnlTransfer: int
    assetMarketIndex: int
    assetPrice: int
    assetTransfer: int
    
    @classmethod
    def from_decoded(cls, obj: Container) -> "LiquidatePerpPnlForDepositRecord":
        return cls(
        perpMarketIndex=obj["perpMarketIndex"],
        marketOraclePrice=obj["marketOraclePrice"],
        pnlTransfer=obj["pnlTransfer"],
        assetMarketIndex=obj["assetMarketIndex"],
        assetPrice=obj["assetPrice"],
        assetTransfer=obj["assetTransfer"],
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
                "perpMarketIndex": self.perpMarketIndex,
                "marketOraclePrice": self.marketOraclePrice,
                "pnlTransfer": self.pnlTransfer,
                "assetMarketIndex": self.assetMarketIndex,
                "assetPrice": self.assetPrice,
                "assetTransfer": self.assetTransfer,
                }

    def to_json(self) -> LiquidatePerpPnlForDepositRecordJSON:
        return {
                "perpMarketIndex": self.perpMarketIndex,
                "marketOraclePrice": self.marketOraclePrice,
                "pnlTransfer": self.pnlTransfer,
                "assetMarketIndex": self.assetMarketIndex,
                "assetPrice": self.assetPrice,
                "assetTransfer": self.assetTransfer,
                }

    @classmethod
    def from_json(cls, obj: LiquidatePerpPnlForDepositRecordJSON) -> "LiquidatePerpPnlForDepositRecord":
        return cls(
                perpMarketIndex=obj["perpMarketIndex"],
                marketOraclePrice=obj["marketOraclePrice"],
                pnlTransfer=obj["pnlTransfer"],
                assetMarketIndex=obj["assetMarketIndex"],
                assetPrice=obj["assetPrice"],
                assetTransfer=obj["assetTransfer"],
        )






