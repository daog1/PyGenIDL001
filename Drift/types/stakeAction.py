'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey, EnumForCodegen;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey;
from solders.sysvar import RENT;

class StakeJSON(typing.TypedDict):
    kind: typing.Literal["Stake"]


@dataclass
class Stake:
    discriminator: typing.ClassVar = 0
    @classmethod
    def to_json(cls) -> StakeJSON:
        return StakeJSON(
            kind="Stake",
        )

    @classmethod
    def to_encodable(cls) -> dict:
        return {
            "Stake": {},
        }



class UnstakeRequestJSON(typing.TypedDict):
    kind: typing.Literal["UnstakeRequest"]


@dataclass
class UnstakeRequest:
    discriminator: typing.ClassVar = 1
    @classmethod
    def to_json(cls) -> UnstakeRequestJSON:
        return UnstakeRequestJSON(
            kind="UnstakeRequest",
        )

    @classmethod
    def to_encodable(cls) -> dict:
        return {
            "UnstakeRequest": {},
        }



class UnstakeCancelRequestJSON(typing.TypedDict):
    kind: typing.Literal["UnstakeCancelRequest"]


@dataclass
class UnstakeCancelRequest:
    discriminator: typing.ClassVar = 2
    @classmethod
    def to_json(cls) -> UnstakeCancelRequestJSON:
        return UnstakeCancelRequestJSON(
            kind="UnstakeCancelRequest",
        )

    @classmethod
    def to_encodable(cls) -> dict:
        return {
            "UnstakeCancelRequest": {},
        }



class UnstakeJSON(typing.TypedDict):
    kind: typing.Literal["Unstake"]


@dataclass
class Unstake:
    discriminator: typing.ClassVar = 3
    @classmethod
    def to_json(cls) -> UnstakeJSON:
        return UnstakeJSON(
            kind="Unstake",
        )

    @classmethod
    def to_encodable(cls) -> dict:
        return {
            "Unstake": {},
        }



class UnstakeTransferJSON(typing.TypedDict):
    kind: typing.Literal["UnstakeTransfer"]


@dataclass
class UnstakeTransfer:
    discriminator: typing.ClassVar = 4
    @classmethod
    def to_json(cls) -> UnstakeTransferJSON:
        return UnstakeTransferJSON(
            kind="UnstakeTransfer",
        )

    @classmethod
    def to_encodable(cls) -> dict:
        return {
            "UnstakeTransfer": {},
        }



class StakeTransferJSON(typing.TypedDict):
    kind: typing.Literal["StakeTransfer"]


@dataclass
class StakeTransfer:
    discriminator: typing.ClassVar = 5
    @classmethod
    def to_json(cls) -> StakeTransferJSON:
        return StakeTransferJSON(
            kind="StakeTransfer",
        )

    @classmethod
    def to_encodable(cls) -> dict:
        return {
            "StakeTransfer": {},
        }





StakeActionKind = typing.Union[
Stake,
UnstakeRequest,
UnstakeCancelRequest,
Unstake,
UnstakeTransfer,
StakeTransfer,
]
StakeActionJSON = typing.Union[
StakeJSON,
UnstakeRequestJSON,
UnstakeCancelRequestJSON,
UnstakeJSON,
UnstakeTransferJSON,
StakeTransferJSON,
]

def from_decoded(obj: dict) -> StakeActionKind:
    if not isinstance(obj, dict):
        raise ValueError("Invalid enum object")
    if "Stake" in obj:
      return Stake()
    if "UnstakeRequest" in obj:
      return UnstakeRequest()
    if "UnstakeCancelRequest" in obj:
      return UnstakeCancelRequest()
    if "Unstake" in obj:
      return Unstake()
    if "UnstakeTransfer" in obj:
      return UnstakeTransfer()
    if "StakeTransfer" in obj:
      return StakeTransfer()
    raise ValueError("Invalid enum object")

def from_json(obj: StakeActionJSON) -> StakeActionKind:
    if obj["kind"] == "Stake":
        return Stake()
    if obj["kind"] == "UnstakeRequest":
        return UnstakeRequest()
    if obj["kind"] == "UnstakeCancelRequest":
        return UnstakeCancelRequest()
    if obj["kind"] == "Unstake":
        return Unstake()
    if obj["kind"] == "UnstakeTransfer":
        return UnstakeTransfer()
    if obj["kind"] == "StakeTransfer":
        return StakeTransfer()
    kind = obj["kind"]
    raise ValueError(f"Unrecognized enum kind: {kind}")

layout = EnumForCodegen(
"Stake" / borsh.CStruct(),
"UnstakeRequest" / borsh.CStruct(),
"UnstakeCancelRequest" / borsh.CStruct(),
"Unstake" / borsh.CStruct(),
"UnstakeTransfer" / borsh.CStruct(),
"StakeTransfer" / borsh.CStruct(),
)
