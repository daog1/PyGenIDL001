'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey, EnumForCodegen;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey;
from solders.sysvar import RENT;

class NoneJSON(typing.TypedDict):
    kind: typing.Literal["None"]


@dataclass
class None:
    discriminator: typing.ClassVar = 0
    @classmethod
    def to_json(cls) -> NoneJSON:
        return NoneJSON(
            kind="None",
        )

    @classmethod
    def to_encodable(cls) -> dict:
        return {
            "None": {},
        }



class ExpiredPositionJSON(typing.TypedDict):
    kind: typing.Literal["ExpiredPosition"]


@dataclass
class ExpiredPosition:
    discriminator: typing.ClassVar = 1
    @classmethod
    def to_json(cls) -> ExpiredPositionJSON:
        return ExpiredPositionJSON(
            kind="ExpiredPosition",
        )

    @classmethod
    def to_encodable(cls) -> dict:
        return {
            "ExpiredPosition": {},
        }





SettlePnlExplanationKind = typing.Union[
None,
ExpiredPosition,
]
SettlePnlExplanationJSON = typing.Union[
NoneJSON,
ExpiredPositionJSON,
]

def from_decoded(obj: dict) -> SettlePnlExplanationKind:
    if not isinstance(obj, dict):
        raise ValueError("Invalid enum object")
    if "None" in obj:
      return None()
    if "ExpiredPosition" in obj:
      return ExpiredPosition()
    raise ValueError("Invalid enum object")

def from_json(obj: SettlePnlExplanationJSON) -> SettlePnlExplanationKind:
    if obj["kind"] == "None":
        return None()
    if obj["kind"] == "ExpiredPosition":
        return ExpiredPosition()
    kind = obj["kind"]
    raise ValueError(f"Unrecognized enum kind: {kind}")

layout = EnumForCodegen(
"None" / borsh.CStruct(),
"ExpiredPosition" / borsh.CStruct(),
)
