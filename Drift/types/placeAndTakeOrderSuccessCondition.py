'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey, EnumForCodegen;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey as SolPubkey;


class PartialFillJSON(typing.TypedDict):
    kind: typing.Literal["PartialFill"]


@dataclass
class PartialFill:
    discriminator: typing.ClassVar = 0
    def to_json(self) -> PartialFillJSON:
        return PartialFillJSON(
            kind="PartialFill",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "PartialFill": {},
        }




class FullFillJSON(typing.TypedDict):
    kind: typing.Literal["FullFill"]


@dataclass
class FullFill:
    discriminator: typing.ClassVar = 1
    def to_json(self) -> FullFillJSON:
        return FullFillJSON(
            kind="FullFill",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "FullFill": {},
        }





PlaceAndTakeOrderSuccessConditionKind = typing.Union[
    PartialFill,
    FullFill,
]
PlaceAndTakeOrderSuccessConditionJSON = typing.Union[
    PartialFillJSON,
    FullFillJSON,
]

def from_decoded(obj: dict) -> PlaceAndTakeOrderSuccessConditionKind:
    if not isinstance(obj, dict):
        raise ValueError("Invalid enum object")
    if "PartialFill" in obj:
      return PartialFill()
    if "FullFill" in obj:
      return FullFill()
    raise ValueError("Invalid enum object")

def from_json(obj: PlaceAndTakeOrderSuccessConditionJSON) -> PlaceAndTakeOrderSuccessConditionKind:
    if obj["kind"] == "PartialFill":
        return PartialFill()

    if obj["kind"] == "FullFill":
        return FullFill()

    kind = obj["kind"]
    raise ValueError(f"Unrecognized enum kind: {kind}")

layout = EnumForCodegen(
"PartialFill" / borsh.CStruct(),
"FullFill" / borsh.CStruct(),
)
