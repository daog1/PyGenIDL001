'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey as SolPubkey;

class LiquidateSpotRecordJSON(typing.TypedDict):
    assetMarketIndex: int
    assetPrice: int
    assetTransfer: int
    liabilityMarketIndex: int
    liabilityPrice: int
    liabilityTransfer: int
    ifFee: int

@dataclass
class LiquidateSpotRecord:
    layout: typing.ClassVar = borsh.CStruct(
        "assetMarketIndex" /borsh.U16,
        "assetPrice" /borsh.I64,
        "assetTransfer" /borsh.U128,
        "liabilityMarketIndex" /borsh.U16,
        "liabilityPrice" /borsh.I64,
        "liabilityTransfer" /borsh.U128,
        "ifFee" /borsh.U64,
        )
    #fields
    assetMarketIndex: int
    assetPrice: int
    assetTransfer: int
    liabilityMarketIndex: int
    liabilityPrice: int
    liabilityTransfer: int
    ifFee: int
    
    @classmethod
    def from_decoded(cls, obj: Container) -> "LiquidateSpotRecord":
        return cls(
        assetMarketIndex=obj["assetMarketIndex"],
        assetPrice=obj["assetPrice"],
        assetTransfer=obj["assetTransfer"],
        liabilityMarketIndex=obj["liabilityMarketIndex"],
        liabilityPrice=obj["liabilityPrice"],
        liabilityTransfer=obj["liabilityTransfer"],
        ifFee=obj["ifFee"],
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
                "assetMarketIndex": self.assetMarketIndex,
                "assetPrice": self.assetPrice,
                "assetTransfer": self.assetTransfer,
                "liabilityMarketIndex": self.liabilityMarketIndex,
                "liabilityPrice": self.liabilityPrice,
                "liabilityTransfer": self.liabilityTransfer,
                "ifFee": self.ifFee,
                }

    def to_json(self) -> LiquidateSpotRecordJSON:
        return {
                "assetMarketIndex": self.assetMarketIndex,
                "assetPrice": self.assetPrice,
                "assetTransfer": self.assetTransfer,
                "liabilityMarketIndex": self.liabilityMarketIndex,
                "liabilityPrice": self.liabilityPrice,
                "liabilityTransfer": self.liabilityTransfer,
                "ifFee": self.ifFee,
                }

    @classmethod
    def from_json(cls, obj: LiquidateSpotRecordJSON) -> "LiquidateSpotRecord":
        return cls(
                assetMarketIndex=obj["assetMarketIndex"],
                assetPrice=obj["assetPrice"],
                assetTransfer=obj["assetTransfer"],
                liabilityMarketIndex=obj["liabilityMarketIndex"],
                liabilityPrice=obj["liabilityPrice"],
                liabilityTransfer=obj["liabilityTransfer"],
                ifFee=obj["ifFee"],
        )






