'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey as SolPubkey;

class PerpPositionJSON(typing.TypedDict):
    lastCumulativeFundingRate: int
    baseAssetAmount: int
    quoteAssetAmount: int
    quoteBreakEvenAmount: int
    quoteEntryAmount: int
    openBids: int
    openAsks: int
    settledPnl: int
    lpShares: int
    lastBaseAssetAmountPerLp: int
    lastQuoteAssetAmountPerLp: int
    remainderBaseAssetAmount: int
    marketIndex: int
    openOrders: int
    perLpBase: int

@dataclass
class PerpPosition:
    layout: typing.ClassVar = borsh.CStruct(
        "lastCumulativeFundingRate" /borsh.I64,
        "baseAssetAmount" /borsh.I64,
        "quoteAssetAmount" /borsh.I64,
        "quoteBreakEvenAmount" /borsh.I64,
        "quoteEntryAmount" /borsh.I64,
        "openBids" /borsh.I64,
        "openAsks" /borsh.I64,
        "settledPnl" /borsh.I64,
        "lpShares" /borsh.U64,
        "lastBaseAssetAmountPerLp" /borsh.I64,
        "lastQuoteAssetAmountPerLp" /borsh.I64,
        "remainderBaseAssetAmount" /borsh.I32,
        "marketIndex" /borsh.U16,
        "openOrders" /borsh.U8,
        "perLpBase" /borsh.I8,
        )
    #fields
    lastCumulativeFundingRate: int
    baseAssetAmount: int
    quoteAssetAmount: int
    quoteBreakEvenAmount: int
    quoteEntryAmount: int
    openBids: int
    openAsks: int
    settledPnl: int
    lpShares: int
    lastBaseAssetAmountPerLp: int
    lastQuoteAssetAmountPerLp: int
    remainderBaseAssetAmount: int
    marketIndex: int
    openOrders: int
    perLpBase: int
    
    @classmethod
    def from_decoded(cls, obj: Container) -> "PerpPosition":
        return cls(
        lastCumulativeFundingRate=obj["lastCumulativeFundingRate"],
        baseAssetAmount=obj["baseAssetAmount"],
        quoteAssetAmount=obj["quoteAssetAmount"],
        quoteBreakEvenAmount=obj["quoteBreakEvenAmount"],
        quoteEntryAmount=obj["quoteEntryAmount"],
        openBids=obj["openBids"],
        openAsks=obj["openAsks"],
        settledPnl=obj["settledPnl"],
        lpShares=obj["lpShares"],
        lastBaseAssetAmountPerLp=obj["lastBaseAssetAmountPerLp"],
        lastQuoteAssetAmountPerLp=obj["lastQuoteAssetAmountPerLp"],
        remainderBaseAssetAmount=obj["remainderBaseAssetAmount"],
        marketIndex=obj["marketIndex"],
        openOrders=obj["openOrders"],
        perLpBase=obj["perLpBase"],
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
                "lastCumulativeFundingRate": self.lastCumulativeFundingRate,
                "baseAssetAmount": self.baseAssetAmount,
                "quoteAssetAmount": self.quoteAssetAmount,
                "quoteBreakEvenAmount": self.quoteBreakEvenAmount,
                "quoteEntryAmount": self.quoteEntryAmount,
                "openBids": self.openBids,
                "openAsks": self.openAsks,
                "settledPnl": self.settledPnl,
                "lpShares": self.lpShares,
                "lastBaseAssetAmountPerLp": self.lastBaseAssetAmountPerLp,
                "lastQuoteAssetAmountPerLp": self.lastQuoteAssetAmountPerLp,
                "remainderBaseAssetAmount": self.remainderBaseAssetAmount,
                "marketIndex": self.marketIndex,
                "openOrders": self.openOrders,
                "perLpBase": self.perLpBase,
                }

    def to_json(self) -> PerpPositionJSON:
        return {
                "lastCumulativeFundingRate": self.lastCumulativeFundingRate,
                "baseAssetAmount": self.baseAssetAmount,
                "quoteAssetAmount": self.quoteAssetAmount,
                "quoteBreakEvenAmount": self.quoteBreakEvenAmount,
                "quoteEntryAmount": self.quoteEntryAmount,
                "openBids": self.openBids,
                "openAsks": self.openAsks,
                "settledPnl": self.settledPnl,
                "lpShares": self.lpShares,
                "lastBaseAssetAmountPerLp": self.lastBaseAssetAmountPerLp,
                "lastQuoteAssetAmountPerLp": self.lastQuoteAssetAmountPerLp,
                "remainderBaseAssetAmount": self.remainderBaseAssetAmount,
                "marketIndex": self.marketIndex,
                "openOrders": self.openOrders,
                "perLpBase": self.perLpBase,
                }

    @classmethod
    def from_json(cls, obj: PerpPositionJSON) -> "PerpPosition":
        return cls(
                lastCumulativeFundingRate=obj["lastCumulativeFundingRate"],
                baseAssetAmount=obj["baseAssetAmount"],
                quoteAssetAmount=obj["quoteAssetAmount"],
                quoteBreakEvenAmount=obj["quoteBreakEvenAmount"],
                quoteEntryAmount=obj["quoteEntryAmount"],
                openBids=obj["openBids"],
                openAsks=obj["openAsks"],
                settledPnl=obj["settledPnl"],
                lpShares=obj["lpShares"],
                lastBaseAssetAmountPerLp=obj["lastBaseAssetAmountPerLp"],
                lastQuoteAssetAmountPerLp=obj["lastQuoteAssetAmountPerLp"],
                remainderBaseAssetAmount=obj["remainderBaseAssetAmount"],
                marketIndex=obj["marketIndex"],
                openOrders=obj["openOrders"],
                perLpBase=obj["perLpBase"],
        )






