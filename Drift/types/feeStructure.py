'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey as SolPubkey;
from . import feeTier, orderFillerRewardStructure;

class FeeStructureJSON(typing.TypedDict):
    feeTiers: list[feeTier.FeeTierJSON]
    fillerRewardStructure: orderFillerRewardStructure.OrderFillerRewardStructureJSON
    referrerRewardEpochUpperBound: int
    flatFillerFee: int

@dataclass
class FeeStructure:
    layout: typing.ClassVar = borsh.CStruct(
        "feeTiers" /feeTier.FeeTier.layout[10],
        "fillerRewardStructure" /orderFillerRewardStructure.OrderFillerRewardStructure.layout,
        "referrerRewardEpochUpperBound" /borsh.U64,
        "flatFillerFee" /borsh.U64,
        )
    #fields
    feeTiers: list[feeTier.FeeTier]
    fillerRewardStructure: orderFillerRewardStructure.OrderFillerRewardStructure
    referrerRewardEpochUpperBound: int
    flatFillerFee: int
    
    @classmethod
    def from_decoded(cls, obj: Container) -> "FeeStructure":
        return cls(
        feeTiers=list(map(lambda item:feeTier.FeeTier.from_json(item),obj["feeTiers"])),
        fillerRewardStructure=orderFillerRewardStructure.OrderFillerRewardStructure.from_decoded(obj["fillerRewardStructure"]),
        referrerRewardEpochUpperBound=obj["referrerRewardEpochUpperBound"],
        flatFillerFee=obj["flatFillerFee"],
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
                "feeTiers": self.feeTiers,
                "fillerRewardStructure": self.fillerRewardStructure.to_encodable(),
                "referrerRewardEpochUpperBound": self.referrerRewardEpochUpperBound,
                "flatFillerFee": self.flatFillerFee,
                }

    def to_json(self) -> FeeStructureJSON:
        return {
                "feeTiers": list(map(lambda item:item.to_json(),self.feeTiers)),
                "fillerRewardStructure": self.fillerRewardStructure.to_json(),
                "referrerRewardEpochUpperBound": self.referrerRewardEpochUpperBound,
                "flatFillerFee": self.flatFillerFee,
                }

    @classmethod
    def from_json(cls, obj: FeeStructureJSON) -> "FeeStructure":
        return cls(
                feeTiers=list(map(lambda item:feeTier.FeeTier.from_json(item),obj["feeTiers"])),
                fillerRewardStructure=orderFillerRewardStructure.OrderFillerRewardStructure.from_json(obj["fillerRewardStructure"]),
                referrerRewardEpochUpperBound=obj["referrerRewardEpochUpperBound"],
                flatFillerFee=obj["flatFillerFee"],
        )






