'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey, EnumForCodegen;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey as SolPubkey;


class LiquidatePerpJSON(typing.TypedDict):
    kind: typing.Literal["LiquidatePerp"]


@dataclass
class LiquidatePerp:
    discriminator: typing.ClassVar = 0
    def to_json(self) -> LiquidatePerpJSON:
        return LiquidatePerpJSON(
            kind="LiquidatePerp",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "LiquidatePerp": {},
        }




class LiquidateSpotJSON(typing.TypedDict):
    kind: typing.Literal["LiquidateSpot"]


@dataclass
class LiquidateSpot:
    discriminator: typing.ClassVar = 1
    def to_json(self) -> LiquidateSpotJSON:
        return LiquidateSpotJSON(
            kind="LiquidateSpot",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "LiquidateSpot": {},
        }




class LiquidateBorrowForPerpPnlJSON(typing.TypedDict):
    kind: typing.Literal["LiquidateBorrowForPerpPnl"]


@dataclass
class LiquidateBorrowForPerpPnl:
    discriminator: typing.ClassVar = 2
    def to_json(self) -> LiquidateBorrowForPerpPnlJSON:
        return LiquidateBorrowForPerpPnlJSON(
            kind="LiquidateBorrowForPerpPnl",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "LiquidateBorrowForPerpPnl": {},
        }




class LiquidatePerpPnlForDepositJSON(typing.TypedDict):
    kind: typing.Literal["LiquidatePerpPnlForDeposit"]


@dataclass
class LiquidatePerpPnlForDeposit:
    discriminator: typing.ClassVar = 3
    def to_json(self) -> LiquidatePerpPnlForDepositJSON:
        return LiquidatePerpPnlForDepositJSON(
            kind="LiquidatePerpPnlForDeposit",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "LiquidatePerpPnlForDeposit": {},
        }




class PerpBankruptcyJSON(typing.TypedDict):
    kind: typing.Literal["PerpBankruptcy"]


@dataclass
class PerpBankruptcy:
    discriminator: typing.ClassVar = 4
    def to_json(self) -> PerpBankruptcyJSON:
        return PerpBankruptcyJSON(
            kind="PerpBankruptcy",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "PerpBankruptcy": {},
        }




class SpotBankruptcyJSON(typing.TypedDict):
    kind: typing.Literal["SpotBankruptcy"]


@dataclass
class SpotBankruptcy:
    discriminator: typing.ClassVar = 5
    def to_json(self) -> SpotBankruptcyJSON:
        return SpotBankruptcyJSON(
            kind="SpotBankruptcy",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "SpotBankruptcy": {},
        }





LiquidationTypeKind = typing.Union[
    LiquidatePerp,
    LiquidateSpot,
    LiquidateBorrowForPerpPnl,
    LiquidatePerpPnlForDeposit,
    PerpBankruptcy,
    SpotBankruptcy,
]
LiquidationTypeJSON = typing.Union[
    LiquidatePerpJSON,
    LiquidateSpotJSON,
    LiquidateBorrowForPerpPnlJSON,
    LiquidatePerpPnlForDepositJSON,
    PerpBankruptcyJSON,
    SpotBankruptcyJSON,
]

def from_decoded(obj: dict) -> LiquidationTypeKind:
    if not isinstance(obj, dict):
        raise ValueError("Invalid enum object")
    if "LiquidatePerp" in obj:
      return LiquidatePerp()
    if "LiquidateSpot" in obj:
      return LiquidateSpot()
    if "LiquidateBorrowForPerpPnl" in obj:
      return LiquidateBorrowForPerpPnl()
    if "LiquidatePerpPnlForDeposit" in obj:
      return LiquidatePerpPnlForDeposit()
    if "PerpBankruptcy" in obj:
      return PerpBankruptcy()
    if "SpotBankruptcy" in obj:
      return SpotBankruptcy()
    raise ValueError("Invalid enum object")

def from_json(obj: LiquidationTypeJSON) -> LiquidationTypeKind:
    if obj["kind"] == "LiquidatePerp":
        return LiquidatePerp()

    if obj["kind"] == "LiquidateSpot":
        return LiquidateSpot()

    if obj["kind"] == "LiquidateBorrowForPerpPnl":
        return LiquidateBorrowForPerpPnl()

    if obj["kind"] == "LiquidatePerpPnlForDeposit":
        return LiquidatePerpPnlForDeposit()

    if obj["kind"] == "PerpBankruptcy":
        return PerpBankruptcy()

    if obj["kind"] == "SpotBankruptcy":
        return SpotBankruptcy()

    kind = obj["kind"]
    raise ValueError(f"Unrecognized enum kind: {kind}")

layout = EnumForCodegen(
"LiquidatePerp" / borsh.CStruct(),
"LiquidateSpot" / borsh.CStruct(),
"LiquidateBorrowForPerpPnl" / borsh.CStruct(),
"LiquidatePerpPnlForDeposit" / borsh.CStruct(),
"PerpBankruptcy" / borsh.CStruct(),
"SpotBankruptcy" / borsh.CStruct(),
)
