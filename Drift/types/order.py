'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from construct import Container
from dataclasses import dataclass
from . import marketType, orderStatus, orderTriggerCondition, orderType, positionDirection

class OrderJSON(typing.TypedDict):
    slot: int
    price: int
    baseAssetAmount: int
    baseAssetAmountFilled: int
    quoteAssetAmountFilled: int
    triggerPrice: int
    auctionStartPrice: int
    auctionEndPrice: int
    maxTs: int
    oraclePriceOffset: int
    orderId: int
    marketIndex: int
    status: orderStatus.OrderStatusJSON
    orderType: orderType.OrderTypeJSON
    marketType: marketType.MarketTypeJSON
    userOrderId: int
    existingPositionDirection: positionDirection.PositionDirectionJSON
    direction: positionDirection.PositionDirectionJSON
    reduceOnly: bool
    postOnly: bool
    immediateOrCancel: bool
    triggerCondition: orderTriggerCondition.OrderTriggerConditionJSON
    auctionDuration: int
    padding: list[int]

@dataclass
class Order:
    layout: typing.ClassVar = borsh.CStruct(
        "slot" /borsh.U64,
        "price" /borsh.U64,
        "baseAssetAmount" /borsh.U64,
        "baseAssetAmountFilled" /borsh.U64,
        "quoteAssetAmountFilled" /borsh.U64,
        "triggerPrice" /borsh.U64,
        "auctionStartPrice" /borsh.I64,
        "auctionEndPrice" /borsh.I64,
        "maxTs" /borsh.I64,
        "oraclePriceOffset" /borsh.I32,
        "orderId" /borsh.U32,
        "marketIndex" /borsh.U16,
        "status" /orderStatus.layout,
        "orderType" /orderType.layout,
        "marketType" /marketType.layout,
        "userOrderId" /borsh.U8,
        "existingPositionDirection" /positionDirection.layout,
        "direction" /positionDirection.layout,
        "reduceOnly" /borsh.Bool,
        "postOnly" /borsh.Bool,
        "immediateOrCancel" /borsh.Bool,
        "triggerCondition" /orderTriggerCondition.layout,
        "auctionDuration" /borsh.U8,
        "padding" /borsh.U8[3],
        )
    #fields
    slot: int
    price: int
    baseAssetAmount: int
    baseAssetAmountFilled: int
    quoteAssetAmountFilled: int
    triggerPrice: int
    auctionStartPrice: int
    auctionEndPrice: int
    maxTs: int
    oraclePriceOffset: int
    orderId: int
    marketIndex: int
    status: orderStatus.OrderStatusKind
    orderType: orderType.OrderTypeKind
    marketType: marketType.MarketTypeKind
    userOrderId: int
    existingPositionDirection: positionDirection.PositionDirectionKind
    direction: positionDirection.PositionDirectionKind
    reduceOnly: bool
    postOnly: bool
    immediateOrCancel: bool
    triggerCondition: orderTriggerCondition.OrderTriggerConditionKind
    auctionDuration: int
    padding: list[int]
    
    @classmethod
    def from_decoded(cls, obj: Container) -> "Order":
        return cls(
        slot=obj["slot"],
        price=obj["price"],
        baseAssetAmount=obj["baseAssetAmount"],
        baseAssetAmountFilled=obj["baseAssetAmountFilled"],
        quoteAssetAmountFilled=obj["quoteAssetAmountFilled"],
        triggerPrice=obj["triggerPrice"],
        auctionStartPrice=obj["auctionStartPrice"],
        auctionEndPrice=obj["auctionEndPrice"],
        maxTs=obj["maxTs"],
        oraclePriceOffset=obj["oraclePriceOffset"],
        orderId=obj["orderId"],
        marketIndex=obj["marketIndex"],
        status=orderStatus.from_decoded(obj["status"]),
        orderType=orderType.from_decoded(obj["orderType"]),
        marketType=marketType.from_decoded(obj["marketType"]),
        userOrderId=obj["userOrderId"],
        existingPositionDirection=positionDirection.from_decoded(obj["existingPositionDirection"]),
        direction=positionDirection.from_decoded(obj["direction"]),
        reduceOnly=obj["reduceOnly"],
        postOnly=obj["postOnly"],
        immediateOrCancel=obj["immediateOrCancel"],
        triggerCondition=orderTriggerCondition.from_decoded(obj["triggerCondition"]),
        auctionDuration=obj["auctionDuration"],
        padding=obj["padding"],
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
                "slot": self.slot,
                "price": self.price,
                "baseAssetAmount": self.baseAssetAmount,
                "baseAssetAmountFilled": self.baseAssetAmountFilled,
                "quoteAssetAmountFilled": self.quoteAssetAmountFilled,
                "triggerPrice": self.triggerPrice,
                "auctionStartPrice": self.auctionStartPrice,
                "auctionEndPrice": self.auctionEndPrice,
                "maxTs": self.maxTs,
                "oraclePriceOffset": self.oraclePriceOffset,
                "orderId": self.orderId,
                "marketIndex": self.marketIndex,
                "status": self.status.to_encodable(),
                "orderType": self.orderType.to_encodable(),
                "marketType": self.marketType.to_encodable(),
                "userOrderId": self.userOrderId,
                "existingPositionDirection": self.existingPositionDirection.to_encodable(),
                "direction": self.direction.to_encodable(),
                "reduceOnly": self.reduceOnly,
                "postOnly": self.postOnly,
                "immediateOrCancel": self.immediateOrCancel,
                "triggerCondition": self.triggerCondition.to_encodable(),
                "auctionDuration": self.auctionDuration,
                "padding": self.padding,
                }

    def to_json(self) -> OrderJSON:
        return {
                "slot": self.slot,
                "price": self.price,
                "baseAssetAmount": self.baseAssetAmount,
                "baseAssetAmountFilled": self.baseAssetAmountFilled,
                "quoteAssetAmountFilled": self.quoteAssetAmountFilled,
                "triggerPrice": self.triggerPrice,
                "auctionStartPrice": self.auctionStartPrice,
                "auctionEndPrice": self.auctionEndPrice,
                "maxTs": self.maxTs,
                "oraclePriceOffset": self.oraclePriceOffset,
                "orderId": self.orderId,
                "marketIndex": self.marketIndex,
                "status": self.status.to_json(),
                "orderType": self.orderType.to_json(),
                "marketType": self.marketType.to_json(),
                "userOrderId": self.userOrderId,
                "existingPositionDirection": self.existingPositionDirection.to_json(),
                "direction": self.direction.to_json(),
                "reduceOnly": self.reduceOnly,
                "postOnly": self.postOnly,
                "immediateOrCancel": self.immediateOrCancel,
                "triggerCondition": self.triggerCondition.to_json(),
                "auctionDuration": self.auctionDuration,
                "padding": self.padding,
                }

    @classmethod
    def from_json(cls, obj: OrderJSON) -> "Order":
        return cls(
                slot=obj["slot"],
                price=obj["price"],
                baseAssetAmount=obj["baseAssetAmount"],
                baseAssetAmountFilled=obj["baseAssetAmountFilled"],
                quoteAssetAmountFilled=obj["quoteAssetAmountFilled"],
                triggerPrice=obj["triggerPrice"],
                auctionStartPrice=obj["auctionStartPrice"],
                auctionEndPrice=obj["auctionEndPrice"],
                maxTs=obj["maxTs"],
                oraclePriceOffset=obj["oraclePriceOffset"],
                orderId=obj["orderId"],
                marketIndex=obj["marketIndex"],
                status=orderStatus.from_json(obj["status"]),
                orderType=orderType.from_json(obj["orderType"]),
                marketType=marketType.from_json(obj["marketType"]),
                userOrderId=obj["userOrderId"],
                existingPositionDirection=positionDirection.from_json(obj["existingPositionDirection"]),
                direction=positionDirection.from_json(obj["direction"]),
                reduceOnly=obj["reduceOnly"],
                postOnly=obj["postOnly"],
                immediateOrCancel=obj["immediateOrCancel"],
                triggerCondition=orderTriggerCondition.from_json(obj["triggerCondition"]),
                auctionDuration=obj["auctionDuration"],
                padding=obj["padding"],
        )






