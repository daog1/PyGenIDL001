'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey, EnumForCodegen;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey;
from solders.sysvar import RENT;

class UpdateCumulativeInterestJSON(typing.TypedDict):
    kind: typing.Literal["UpdateCumulativeInterest"]


@dataclass
class UpdateCumulativeInterest:
    discriminator: typing.ClassVar = 0
    @classmethod
    def to_json(cls) -> UpdateCumulativeInterestJSON:
        return UpdateCumulativeInterestJSON(
            kind="UpdateCumulativeInterest",
        )

    @classmethod
    def to_encodable(cls) -> dict:
        return {
            "UpdateCumulativeInterest": {},
        }



class FillJSON(typing.TypedDict):
    kind: typing.Literal["Fill"]


@dataclass
class Fill:
    discriminator: typing.ClassVar = 1
    @classmethod
    def to_json(cls) -> FillJSON:
        return FillJSON(
            kind="Fill",
        )

    @classmethod
    def to_encodable(cls) -> dict:
        return {
            "Fill": {},
        }



class DepositJSON(typing.TypedDict):
    kind: typing.Literal["Deposit"]


@dataclass
class Deposit:
    discriminator: typing.ClassVar = 2
    @classmethod
    def to_json(cls) -> DepositJSON:
        return DepositJSON(
            kind="Deposit",
        )

    @classmethod
    def to_encodable(cls) -> dict:
        return {
            "Deposit": {},
        }



class WithdrawJSON(typing.TypedDict):
    kind: typing.Literal["Withdraw"]


@dataclass
class Withdraw:
    discriminator: typing.ClassVar = 3
    @classmethod
    def to_json(cls) -> WithdrawJSON:
        return WithdrawJSON(
            kind="Withdraw",
        )

    @classmethod
    def to_encodable(cls) -> dict:
        return {
            "Withdraw": {},
        }



class LiquidationJSON(typing.TypedDict):
    kind: typing.Literal["Liquidation"]


@dataclass
class Liquidation:
    discriminator: typing.ClassVar = 4
    @classmethod
    def to_json(cls) -> LiquidationJSON:
        return LiquidationJSON(
            kind="Liquidation",
        )

    @classmethod
    def to_encodable(cls) -> dict:
        return {
            "Liquidation": {},
        }





SpotOperationKind = typing.Union[
UpdateCumulativeInterest,
Fill,
Deposit,
Withdraw,
Liquidation,
]
SpotOperationJSON = typing.Union[
UpdateCumulativeInterestJSON,
FillJSON,
DepositJSON,
WithdrawJSON,
LiquidationJSON,
]

def from_decoded(obj: dict) -> SpotOperationKind:
    if not isinstance(obj, dict):
        raise ValueError("Invalid enum object")
    if "UpdateCumulativeInterest" in obj:
      return UpdateCumulativeInterest()
    if "Fill" in obj:
      return Fill()
    if "Deposit" in obj:
      return Deposit()
    if "Withdraw" in obj:
      return Withdraw()
    if "Liquidation" in obj:
      return Liquidation()
    raise ValueError("Invalid enum object")

def from_json(obj: SpotOperationJSON) -> SpotOperationKind:
    if obj["kind"] == "UpdateCumulativeInterest":
        return UpdateCumulativeInterest()
    if obj["kind"] == "Fill":
        return Fill()
    if obj["kind"] == "Deposit":
        return Deposit()
    if obj["kind"] == "Withdraw":
        return Withdraw()
    if obj["kind"] == "Liquidation":
        return Liquidation()
    kind = obj["kind"]
    raise ValueError(f"Unrecognized enum kind: {kind}")

layout = EnumForCodegen(
"UpdateCumulativeInterest" / borsh.CStruct(),
"Fill" / borsh.CStruct(),
"Deposit" / borsh.CStruct(),
"Withdraw" / borsh.CStruct(),
"Liquidation" / borsh.CStruct(),
)
