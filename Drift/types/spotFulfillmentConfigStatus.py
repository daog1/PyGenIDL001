'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey, EnumForCodegen;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey;
from solders.sysvar import RENT;

class EnabledJSON(typing.TypedDict):
    kind: typing.Literal["Enabled"]


@dataclass
class Enabled:
    discriminator: typing.ClassVar = 0
    @classmethod
    def to_json(cls) -> EnabledJSON:
        return EnabledJSON(
            kind="Enabled",
        )

    @classmethod
    def to_encodable(cls) -> dict:
        return {
            "Enabled": {},
        }



class DisabledJSON(typing.TypedDict):
    kind: typing.Literal["Disabled"]


@dataclass
class Disabled:
    discriminator: typing.ClassVar = 1
    @classmethod
    def to_json(cls) -> DisabledJSON:
        return DisabledJSON(
            kind="Disabled",
        )

    @classmethod
    def to_encodable(cls) -> dict:
        return {
            "Disabled": {},
        }





SpotFulfillmentConfigStatusKind = typing.Union[
Enabled,
Disabled,
]
SpotFulfillmentConfigStatusJSON = typing.Union[
EnabledJSON,
DisabledJSON,
]

def from_decoded(obj: dict) -> SpotFulfillmentConfigStatusKind:
    if not isinstance(obj, dict):
        raise ValueError("Invalid enum object")
    if "Enabled" in obj:
      return Enabled()
    if "Disabled" in obj:
      return Disabled()
    raise ValueError("Invalid enum object")

def from_json(obj: SpotFulfillmentConfigStatusJSON) -> SpotFulfillmentConfigStatusKind:
    if obj["kind"] == "Enabled":
        return Enabled()
    if obj["kind"] == "Disabled":
        return Disabled()
    kind = obj["kind"]
    raise ValueError(f"Unrecognized enum kind: {kind}")

layout = EnumForCodegen(
"Enabled" / borsh.CStruct(),
"Disabled" / borsh.CStruct(),
)
