'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey, EnumForCodegen;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey;
from solders.sysvar import RENT;

class MarketJSON(typing.TypedDict):
    kind: typing.Literal["Market"]


@dataclass
class Market:
    discriminator: typing.ClassVar = 0
    @classmethod
    def to_json(cls) -> MarketJSON:
        return MarketJSON(
            kind="Market",
        )

    @classmethod
    def to_encodable(cls) -> dict:
        return {
            "Market": {},
        }



class LimitJSON(typing.TypedDict):
    kind: typing.Literal["Limit"]


@dataclass
class Limit:
    discriminator: typing.ClassVar = 1
    @classmethod
    def to_json(cls) -> LimitJSON:
        return LimitJSON(
            kind="Limit",
        )

    @classmethod
    def to_encodable(cls) -> dict:
        return {
            "Limit": {},
        }



class TriggerMarketJSON(typing.TypedDict):
    kind: typing.Literal["TriggerMarket"]


@dataclass
class TriggerMarket:
    discriminator: typing.ClassVar = 2
    @classmethod
    def to_json(cls) -> TriggerMarketJSON:
        return TriggerMarketJSON(
            kind="TriggerMarket",
        )

    @classmethod
    def to_encodable(cls) -> dict:
        return {
            "TriggerMarket": {},
        }



class TriggerLimitJSON(typing.TypedDict):
    kind: typing.Literal["TriggerLimit"]


@dataclass
class TriggerLimit:
    discriminator: typing.ClassVar = 3
    @classmethod
    def to_json(cls) -> TriggerLimitJSON:
        return TriggerLimitJSON(
            kind="TriggerLimit",
        )

    @classmethod
    def to_encodable(cls) -> dict:
        return {
            "TriggerLimit": {},
        }



class OracleJSON(typing.TypedDict):
    kind: typing.Literal["Oracle"]


@dataclass
class Oracle:
    discriminator: typing.ClassVar = 4
    @classmethod
    def to_json(cls) -> OracleJSON:
        return OracleJSON(
            kind="Oracle",
        )

    @classmethod
    def to_encodable(cls) -> dict:
        return {
            "Oracle": {},
        }





OrderTypeKind = typing.Union[
Market,
Limit,
TriggerMarket,
TriggerLimit,
Oracle,
]
OrderTypeJSON = typing.Union[
MarketJSON,
LimitJSON,
TriggerMarketJSON,
TriggerLimitJSON,
OracleJSON,
]

def from_decoded(obj: dict) -> OrderTypeKind:
    if not isinstance(obj, dict):
        raise ValueError("Invalid enum object")
    if "Market" in obj:
      return Market()
    if "Limit" in obj:
      return Limit()
    if "TriggerMarket" in obj:
      return TriggerMarket()
    if "TriggerLimit" in obj:
      return TriggerLimit()
    if "Oracle" in obj:
      return Oracle()
    raise ValueError("Invalid enum object")

def from_json(obj: OrderTypeJSON) -> OrderTypeKind:
    if obj["kind"] == "Market":
        return Market()
    if obj["kind"] == "Limit":
        return Limit()
    if obj["kind"] == "TriggerMarket":
        return TriggerMarket()
    if obj["kind"] == "TriggerLimit":
        return TriggerLimit()
    if obj["kind"] == "Oracle":
        return Oracle()
    kind = obj["kind"]
    raise ValueError(f"Unrecognized enum kind: {kind}")

layout = EnumForCodegen(
"Market" / borsh.CStruct(),
"Limit" / borsh.CStruct(),
"TriggerMarket" / borsh.CStruct(),
"TriggerLimit" / borsh.CStruct(),
"Oracle" / borsh.CStruct(),
)
