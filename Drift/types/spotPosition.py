'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey;
from solders.sysvar import RENT;

class SpotPositionJSON(typing.TypedDict):
    scaledBalance: int
    openBids: int
    openAsks: int
    cumulativeDeposits: int
    marketIndex: int
    balanceType: types.spotBalanceType.SpotBalanceTypeJSON
    openOrders: int
    padding: list[int]

@dataclass
class SpotPosition:
    layout: typing.ClassVar = borsh.CStruct(
        "scaledBalance" /borsh.U64,
        "openBids" /borsh.I64,
        "openAsks" /borsh.I64,
        "cumulativeDeposits" /borsh.I64,
        "marketIndex" /borsh.U16,
        "balanceType" /types.spotBalanceType.SpotBalanceType.layout,
        "openOrders" /borsh.U8,
        "padding" /borsh.U8[4],
        )
    #fields
    scaledBalance: int
    openBids: int
    openAsks: int
    cumulativeDeposits: int
    marketIndex: int
    balanceType: types.spotBalanceType.SpotBalanceType
    openOrders: int
    padding: list[int]
    
    @classmethod
    def from_decoded(cls, obj: Container) -> "SpotPosition":
        return cls(
                   scaledBalance=obj.scaledBalance,
                   openBids=obj.openBids,
                   openAsks=obj.openAsks,
                   cumulativeDeposits=obj.cumulativeDeposits,
                   marketIndex=obj.marketIndex,
                   balanceType=obj.balanceType,
                   openOrders=obj.openOrders,
                   padding=obj.padding,
                )

    #def to_encodable(self) -> dict[str, typing.Any]:
    #    return {"row": self.row, "column": self.column}

    def to_json(self) -> SpotPositionJSON:
        return {
                "scaledBalance": self.scaledBalance,
                "openBids": self.openBids,
                "openAsks": self.openAsks,
                "cumulativeDeposits": self.cumulativeDeposits,
                "marketIndex": self.marketIndex,
                "balanceType": self.balanceType.to_json(),
                "openOrders": self.openOrders,
                "padding": self.padding,
        }

    @classmethod
    def from_json(cls, obj: SpotPositionJSON) -> "SpotPosition":
        return cls(
                scaledBalance=obj["scaledBalance"],
                openBids=obj["openBids"],
                openAsks=obj["openAsks"],
                cumulativeDeposits=obj["cumulativeDeposits"],
                marketIndex=obj["marketIndex"],
                balanceType=types.spotBalanceType.SpotBalanceType.from_json(obj["balanceType"]),
                openOrders=obj["openOrders"],
                padding=obj["padding"],
        )






