'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey, EnumForCodegen;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey;
from solders.sysvar import RENT;

class UserOrderIdJSON(typing.TypedDict):
    kind: typing.Literal["UserOrderId"]


@dataclass
class UserOrderId:
    discriminator: typing.ClassVar = 0
    @classmethod
    def to_json(cls) -> UserOrderIdJSON:
        return UserOrderIdJSON(
            kind="UserOrderId",
        )

    @classmethod
    def to_encodable(cls) -> dict:
        return {
            "UserOrderId": {},
        }



class OrderIdJSON(typing.TypedDict):
    kind: typing.Literal["OrderId"]


@dataclass
class OrderId:
    discriminator: typing.ClassVar = 1
    @classmethod
    def to_json(cls) -> OrderIdJSON:
        return OrderIdJSON(
            kind="OrderId",
        )

    @classmethod
    def to_encodable(cls) -> dict:
        return {
            "OrderId": {},
        }





ModifyOrderIdKind = typing.Union[
UserOrderId,
OrderId,
]
ModifyOrderIdJSON = typing.Union[
UserOrderIdJSON,
OrderIdJSON,
]

def from_decoded(obj: dict) -> ModifyOrderIdKind:
    if not isinstance(obj, dict):
        raise ValueError("Invalid enum object")
    if "UserOrderId" in obj:
      return UserOrderId()
    if "OrderId" in obj:
      return OrderId()
    raise ValueError("Invalid enum object")

def from_json(obj: ModifyOrderIdJSON) -> ModifyOrderIdKind:
    if obj["kind"] == "UserOrderId":
        return UserOrderId()
    if obj["kind"] == "OrderId":
        return OrderId()
    kind = obj["kind"]
    raise ValueError(f"Unrecognized enum kind: {kind}")

layout = EnumForCodegen(
"UserOrderId" / borsh.CStruct(),
"OrderId" / borsh.CStruct(),
)
