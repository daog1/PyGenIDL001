'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey, EnumForCodegen;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey as SolPubkey;
from solders.sysvar import RENT;

UserOrderIdJSONValue = tuple[int]
UserOrderIdValue = tuple[int]

class UserOrderIdJSON(typing.TypedDict):
    kind: typing.Literal["UserOrderId"]
    value: UserOrderIdJSONValue


@dataclass
class UserOrderId:
    discriminator: typing.ClassVar = 0
    value : UserOrderIdValue
    def to_json(self) -> UserOrderIdJSON:
        return UserOrderIdJSON(
            kind="UserOrderId",
            value = (self.value[0],)
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "UserOrderId": { "item_0":self.value[0] }
        }



OrderIdJSONValue = tuple[int]
OrderIdValue = tuple[int]

class OrderIdJSON(typing.TypedDict):
    kind: typing.Literal["OrderId"]
    value: OrderIdJSONValue


@dataclass
class OrderId:
    discriminator: typing.ClassVar = 1
    value : OrderIdValue
    def to_json(self) -> OrderIdJSON:
        return OrderIdJSON(
            kind="OrderId",
            value = (self.value[0],)
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "OrderId": { "item_0":self.value[0] }
        }





ModifyOrderIdKind = typing.Union[
    UserOrderId,
    OrderId,
]
ModifyOrderIdJSON = typing.Union[
    UserOrderIdJSON,
    OrderIdJSON,
]

def from_decoded(obj: dict) -> ModifyOrderIdKind:
    if not isinstance(obj, dict):
        raise ValueError("Invalid enum object")
    if "UserOrderId" in obj:
      val = obj["UserOrderId"]
      return UserOrderId((
      val["item_0"],
      ))
    if "OrderId" in obj:
      val = obj["OrderId"]
      return OrderId((
      val["item_0"],
      ))
    raise ValueError("Invalid enum object")

def from_json(obj: ModifyOrderIdJSON) -> ModifyOrderIdKind:
    if obj["kind"] == "UserOrderId":
        userOrderIdJSONValue = typing.cast(UserOrderIdJSONValue, obj["value"])
        return UserOrderId(
        (userOrderIdJSONValue[0],)
        )

    if obj["kind"] == "OrderId":
        orderIdJSONValue = typing.cast(OrderIdJSONValue, obj["value"])
        return OrderId(
        (orderIdJSONValue[0],)
        )

    kind = obj["kind"]
    raise ValueError(f"Unrecognized enum kind: {kind}")

layout = EnumForCodegen(
"UserOrderId" / borsh.CStruct("item_0" / borsh.U8,),
"OrderId" / borsh.CStruct("item_0" / borsh.U32,),
)
