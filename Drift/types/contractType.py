'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey, EnumForCodegen;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey;
from solders.sysvar import RENT;

class PerpetualJSON(typing.TypedDict):
    kind: typing.Literal["Perpetual"]


@dataclass
class Perpetual:
    discriminator: typing.ClassVar = 0
    @classmethod
    def to_json(cls) -> PerpetualJSON:
        return PerpetualJSON(
            kind="Perpetual",
        )

    @classmethod
    def to_encodable(cls) -> dict:
        return {
            "Perpetual": {},
        }



class FutureJSON(typing.TypedDict):
    kind: typing.Literal["Future"]


@dataclass
class Future:
    discriminator: typing.ClassVar = 1
    @classmethod
    def to_json(cls) -> FutureJSON:
        return FutureJSON(
            kind="Future",
        )

    @classmethod
    def to_encodable(cls) -> dict:
        return {
            "Future": {},
        }



class PredictionJSON(typing.TypedDict):
    kind: typing.Literal["Prediction"]


@dataclass
class Prediction:
    discriminator: typing.ClassVar = 2
    @classmethod
    def to_json(cls) -> PredictionJSON:
        return PredictionJSON(
            kind="Prediction",
        )

    @classmethod
    def to_encodable(cls) -> dict:
        return {
            "Prediction": {},
        }





ContractTypeKind = typing.Union[
Perpetual,
Future,
Prediction,
]
ContractTypeJSON = typing.Union[
PerpetualJSON,
FutureJSON,
PredictionJSON,
]

def from_decoded(obj: dict) -> ContractTypeKind:
    if not isinstance(obj, dict):
        raise ValueError("Invalid enum object")
    if "Perpetual" in obj:
      return Perpetual()
    if "Future" in obj:
      return Future()
    if "Prediction" in obj:
      return Prediction()
    raise ValueError("Invalid enum object")

def from_json(obj: ContractTypeJSON) -> ContractTypeKind:
    if obj["kind"] == "Perpetual":
        return Perpetual()
    if obj["kind"] == "Future":
        return Future()
    if obj["kind"] == "Prediction":
        return Prediction()
    kind = obj["kind"]
    raise ValueError(f"Unrecognized enum kind: {kind}")

layout = EnumForCodegen(
"Perpetual" / borsh.CStruct(),
"Future" / borsh.CStruct(),
"Prediction" / borsh.CStruct(),
)
