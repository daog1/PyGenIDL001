'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey, EnumForCodegen;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey;
from solders.sysvar import RENT;

class StandardJSON(typing.TypedDict):
    kind: typing.Literal["Standard"]


@dataclass
class Standard:
    discriminator: typing.ClassVar = 0
    @classmethod
    def to_json(cls) -> StandardJSON:
        return StandardJSON(
            kind="Standard",
        )

    @classmethod
    def to_encodable(cls) -> dict:
        return {
            "Standard": {},
        }



class LiquidationJSON(typing.TypedDict):
    kind: typing.Literal["Liquidation"]


@dataclass
class Liquidation:
    discriminator: typing.ClassVar = 1
    @classmethod
    def to_json(cls) -> LiquidationJSON:
        return LiquidationJSON(
            kind="Liquidation",
        )

    @classmethod
    def to_encodable(cls) -> dict:
        return {
            "Liquidation": {},
        }





MarginCalculationModeKind = typing.Union[
Standard,
Liquidation,
]
MarginCalculationModeJSON = typing.Union[
StandardJSON,
LiquidationJSON,
]

def from_decoded(obj: dict) -> MarginCalculationModeKind:
    if not isinstance(obj, dict):
        raise ValueError("Invalid enum object")
    if "Standard" in obj:
      return Standard()
    if "Liquidation" in obj:
      return Liquidation()
    raise ValueError("Invalid enum object")

def from_json(obj: MarginCalculationModeJSON) -> MarginCalculationModeKind:
    if obj["kind"] == "Standard":
        return Standard()
    if obj["kind"] == "Liquidation":
        return Liquidation()
    kind = obj["kind"]
    raise ValueError(f"Unrecognized enum kind: {kind}")

layout = EnumForCodegen(
"Standard" / borsh.CStruct(),
"Liquidation" / borsh.CStruct(),
)
