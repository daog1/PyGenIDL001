'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey, EnumForCodegen;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey;
from solders.sysvar import RENT;

class ExternalMarketJSON(typing.TypedDict):
    kind: typing.Literal["ExternalMarket"]


@dataclass
class ExternalMarket:
    discriminator: typing.ClassVar = 0
    @classmethod
    def to_json(cls) -> ExternalMarketJSON:
        return ExternalMarketJSON(
            kind="ExternalMarket",
        )

    @classmethod
    def to_encodable(cls) -> dict:
        return {
            "ExternalMarket": {},
        }



class MatchJSON(typing.TypedDict):
    kind: typing.Literal["Match"]


@dataclass
class Match:
    discriminator: typing.ClassVar = 1
    @classmethod
    def to_json(cls) -> MatchJSON:
        return MatchJSON(
            kind="Match",
        )

    @classmethod
    def to_encodable(cls) -> dict:
        return {
            "Match": {},
        }





SpotFulfillmentMethodKind = typing.Union[
ExternalMarket,
Match,
]
SpotFulfillmentMethodJSON = typing.Union[
ExternalMarketJSON,
MatchJSON,
]

def from_decoded(obj: dict) -> SpotFulfillmentMethodKind:
    if not isinstance(obj, dict):
        raise ValueError("Invalid enum object")
    if "ExternalMarket" in obj:
      return ExternalMarket()
    if "Match" in obj:
      return Match()
    raise ValueError("Invalid enum object")

def from_json(obj: SpotFulfillmentMethodJSON) -> SpotFulfillmentMethodKind:
    if obj["kind"] == "ExternalMarket":
        return ExternalMarket()
    if obj["kind"] == "Match":
        return Match()
    kind = obj["kind"]
    raise ValueError(f"Unrecognized enum kind: {kind}")

layout = EnumForCodegen(
"ExternalMarket" / borsh.CStruct(),
"Match" / borsh.CStruct(),
)
