'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey, EnumForCodegen;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey as SolPubkey;
from solders.sysvar import RENT;


class AJSON(typing.TypedDict):
    kind: typing.Literal["A"]


@dataclass
class A:
    discriminator: typing.ClassVar = 0
    def to_json(self) -> AJSON:
        return AJSON(
            kind="A",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "A": {},
        }




class BJSON(typing.TypedDict):
    kind: typing.Literal["B"]


@dataclass
class B:
    discriminator: typing.ClassVar = 1
    def to_json(self) -> BJSON:
        return BJSON(
            kind="B",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "B": {},
        }




class CJSON(typing.TypedDict):
    kind: typing.Literal["C"]


@dataclass
class C:
    discriminator: typing.ClassVar = 2
    def to_json(self) -> CJSON:
        return CJSON(
            kind="C",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "C": {},
        }




class SpeculativeJSON(typing.TypedDict):
    kind: typing.Literal["Speculative"]


@dataclass
class Speculative:
    discriminator: typing.ClassVar = 3
    def to_json(self) -> SpeculativeJSON:
        return SpeculativeJSON(
            kind="Speculative",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "Speculative": {},
        }




class HighlySpeculativeJSON(typing.TypedDict):
    kind: typing.Literal["HighlySpeculative"]


@dataclass
class HighlySpeculative:
    discriminator: typing.ClassVar = 4
    def to_json(self) -> HighlySpeculativeJSON:
        return HighlySpeculativeJSON(
            kind="HighlySpeculative",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "HighlySpeculative": {},
        }




class IsolatedJSON(typing.TypedDict):
    kind: typing.Literal["Isolated"]


@dataclass
class Isolated:
    discriminator: typing.ClassVar = 5
    def to_json(self) -> IsolatedJSON:
        return IsolatedJSON(
            kind="Isolated",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "Isolated": {},
        }





ContractTierKind = typing.Union[
    A,
    B,
    C,
    Speculative,
    HighlySpeculative,
    Isolated,
]
ContractTierJSON = typing.Union[
    AJSON,
    BJSON,
    CJSON,
    SpeculativeJSON,
    HighlySpeculativeJSON,
    IsolatedJSON,
]

def from_decoded(obj: dict) -> ContractTierKind:
    if not isinstance(obj, dict):
        raise ValueError("Invalid enum object")
    if "A" in obj:
      return A()
    if "B" in obj:
      return B()
    if "C" in obj:
      return C()
    if "Speculative" in obj:
      return Speculative()
    if "HighlySpeculative" in obj:
      return HighlySpeculative()
    if "Isolated" in obj:
      return Isolated()
    raise ValueError("Invalid enum object")

def from_json(obj: ContractTierJSON) -> ContractTierKind:
    if obj["kind"] == "A":
        return A()

    if obj["kind"] == "B":
        return B()

    if obj["kind"] == "C":
        return C()

    if obj["kind"] == "Speculative":
        return Speculative()

    if obj["kind"] == "HighlySpeculative":
        return HighlySpeculative()

    if obj["kind"] == "Isolated":
        return Isolated()

    kind = obj["kind"]
    raise ValueError(f"Unrecognized enum kind: {kind}")

layout = EnumForCodegen(
"A" / borsh.CStruct(),
"B" / borsh.CStruct(),
"C" / borsh.CStruct(),
"Speculative" / borsh.CStruct(),
"HighlySpeculative" / borsh.CStruct(),
"Isolated" / borsh.CStruct(),
)
