'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey;
from solders.sysvar import RENT;

class UserFeesJSON(typing.TypedDict):
    totalFeePaid: int
    totalFeeRebate: int
    totalTokenDiscount: int
    totalRefereeDiscount: int
    totalReferrerReward: int
    currentEpochReferrerReward: int

@dataclass
class UserFees:
    layout: typing.ClassVar = borsh.CStruct(
        "totalFeePaid" /borsh.U64,
        "totalFeeRebate" /borsh.U64,
        "totalTokenDiscount" /borsh.U64,
        "totalRefereeDiscount" /borsh.U64,
        "totalReferrerReward" /borsh.U64,
        "currentEpochReferrerReward" /borsh.U64,
        )
    #fields
    totalFeePaid: int
    totalFeeRebate: int
    totalTokenDiscount: int
    totalRefereeDiscount: int
    totalReferrerReward: int
    currentEpochReferrerReward: int
    
    @classmethod
    def from_decoded(cls, obj: Container) -> "UserFees":
        return cls(
       totalFeePaid=obj["totalFeePaid"],totalFeeRebate=obj["totalFeeRebate"],totalTokenDiscount=obj["totalTokenDiscount"],totalRefereeDiscount=obj["totalRefereeDiscount"],totalReferrerReward=obj["totalReferrerReward"],currentEpochReferrerReward=obj["currentEpochReferrerReward"]
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
                "totalFeePaid": self.totalFeePaid,
                "totalFeeRebate": self.totalFeeRebate,
                "totalTokenDiscount": self.totalTokenDiscount,
                "totalRefereeDiscount": self.totalRefereeDiscount,
                "totalReferrerReward": self.totalReferrerReward,
                "currentEpochReferrerReward": self.currentEpochReferrerReward,
                }

    def to_json(self) -> UserFeesJSON:
        return {
                "totalFeePaid": self.totalFeePaid,
                "totalFeeRebate": self.totalFeeRebate,
                "totalTokenDiscount": self.totalTokenDiscount,
                "totalRefereeDiscount": self.totalRefereeDiscount,
                "totalReferrerReward": self.totalReferrerReward,
                "currentEpochReferrerReward": self.currentEpochReferrerReward,
                }

    @classmethod
    def from_json(cls, obj: UserFeesJSON) -> "UserFees":
        return cls(
                totalFeePaid=obj["totalFeePaid"],
                totalFeeRebate=obj["totalFeeRebate"],
                totalTokenDiscount=obj["totalTokenDiscount"],
                totalRefereeDiscount=obj["totalRefereeDiscount"],
                totalReferrerReward=obj["totalReferrerReward"],
                currentEpochReferrerReward=obj["currentEpochReferrerReward"],
        )






