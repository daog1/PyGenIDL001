'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from anchorpy.borsh_extension import BorshPubkey
from construct import Container
from dataclasses import dataclass
from solders.pubkey import Pubkey as SolPubkey

class PerpBankruptcyRecordJSON(typing.TypedDict):
    marketIndex: int
    pnl: int
    ifPayment: int
    clawbackUser: typing.Optional[str]
    clawbackUserPayment: typing.Optional[int]
    cumulativeFundingRateDelta: int

@dataclass
class PerpBankruptcyRecord:
    layout: typing.ClassVar = borsh.CStruct(
        "marketIndex" /borsh.U16,
        "pnl" /borsh.I128,
        "ifPayment" /borsh.U128,
        "clawbackUser" /borsh.Option(BorshPubkey),
        "clawbackUserPayment" /borsh.Option(borsh.U128),
        "cumulativeFundingRateDelta" /borsh.I128,
        )
    #fields
    marketIndex: int
    pnl: int
    ifPayment: int
    clawbackUser: typing.Optional[SolPubkey]
    clawbackUserPayment: typing.Optional[int]
    cumulativeFundingRateDelta: int
    
    @classmethod
    def from_decoded(cls, obj: Container) -> "PerpBankruptcyRecord":
        return cls(
        marketIndex=obj["marketIndex"],
        pnl=obj["pnl"],
        ifPayment=obj["ifPayment"],
        clawbackUser=(None if obj["clawbackUser"] is None else obj["clawbackUser"]),
        clawbackUserPayment=(None if obj["clawbackUserPayment"] is None else obj["clawbackUserPayment"]),
        cumulativeFundingRateDelta=obj["cumulativeFundingRateDelta"],
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
                "marketIndex": self.marketIndex,
                "pnl": self.pnl,
                "ifPayment": self.ifPayment,
                "clawbackUser": self.clawbackUser,
                "clawbackUserPayment": self.clawbackUserPayment,
                "cumulativeFundingRateDelta": self.cumulativeFundingRateDelta,
                }

    def to_json(self) -> PerpBankruptcyRecordJSON:
        return {
                "marketIndex": self.marketIndex,
                "pnl": self.pnl,
                "ifPayment": self.ifPayment,
                "clawbackUser": (None if self.clawbackUser is None else str(self.clawbackUser)),
                "clawbackUserPayment": (None if self.clawbackUserPayment is None else self.clawbackUserPayment),
                "cumulativeFundingRateDelta": self.cumulativeFundingRateDelta,
                }

    @classmethod
    def from_json(cls, obj: PerpBankruptcyRecordJSON) -> "PerpBankruptcyRecord":
        return cls(
                marketIndex=obj["marketIndex"],
                pnl=obj["pnl"],
                ifPayment=obj["ifPayment"],
                clawbackUser=(None if obj["clawbackUser"] is None else SolPubkey.from_string(obj["clawbackUser"])),
                clawbackUserPayment=(None if obj["clawbackUserPayment"] is None else obj["clawbackUserPayment"]),
                cumulativeFundingRateDelta=obj["cumulativeFundingRateDelta"],
        )






