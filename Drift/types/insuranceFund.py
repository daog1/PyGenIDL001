'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh;
import typing;
from anchorpy.borsh_extension import BorshPubkey;
from construct import Container;
from dataclasses import dataclass;
from solders.pubkey import Pubkey;
from solders.sysvar import RENT;

class InsuranceFundJSON(typing.TypedDict):
    vault: str
    totalShares: int
    userShares: int
    sharesBase: int
    unstakingPeriod: int
    lastRevenueSettleTs: int
    revenueSettlePeriod: int
    totalFactor: int
    userFactor: int

@dataclass
class InsuranceFund:
    layout: typing.ClassVar = borsh.CStruct(
        "vault" /BorshPubkey,
        "totalShares" /borsh.U128,
        "userShares" /borsh.U128,
        "sharesBase" /borsh.U128,
        "unstakingPeriod" /borsh.I64,
        "lastRevenueSettleTs" /borsh.I64,
        "revenueSettlePeriod" /borsh.I64,
        "totalFactor" /borsh.U32,
        "userFactor" /borsh.U32,
        )
    #fields
    vault: Pubkey
    totalShares: int
    userShares: int
    sharesBase: int
    unstakingPeriod: int
    lastRevenueSettleTs: int
    revenueSettlePeriod: int
    totalFactor: int
    userFactor: int
    
    @classmethod
    def from_decoded(cls, obj: Container) -> "InsuranceFund":
        return cls(
        vault=obj["vault"],
        totalShares=obj["totalShares"],
        userShares=obj["userShares"],
        sharesBase=obj["sharesBase"],
        unstakingPeriod=obj["unstakingPeriod"],
        lastRevenueSettleTs=obj["lastRevenueSettleTs"],
        revenueSettlePeriod=obj["revenueSettlePeriod"],
        totalFactor=obj["totalFactor"],
        userFactor=obj["userFactor"],
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
                "vault": self.vault,
                "totalShares": self.totalShares,
                "userShares": self.userShares,
                "sharesBase": self.sharesBase,
                "unstakingPeriod": self.unstakingPeriod,
                "lastRevenueSettleTs": self.lastRevenueSettleTs,
                "revenueSettlePeriod": self.revenueSettlePeriod,
                "totalFactor": self.totalFactor,
                "userFactor": self.userFactor,
                }

    def to_json(self) -> InsuranceFundJSON:
        return {
                "vault": str(self.vault),
                "totalShares": self.totalShares,
                "userShares": self.userShares,
                "sharesBase": self.sharesBase,
                "unstakingPeriod": self.unstakingPeriod,
                "lastRevenueSettleTs": self.lastRevenueSettleTs,
                "revenueSettlePeriod": self.revenueSettlePeriod,
                "totalFactor": self.totalFactor,
                "userFactor": self.userFactor,
                }

    @classmethod
    def from_json(cls, obj: InsuranceFundJSON) -> "InsuranceFund":
        return cls(
                vault=Pubkey.from_string(obj["vault"]),
                totalShares=obj["totalShares"],
                userShares=obj["userShares"],
                sharesBase=obj["sharesBase"],
                unstakingPeriod=obj["unstakingPeriod"],
                lastRevenueSettleTs=obj["lastRevenueSettleTs"],
                revenueSettlePeriod=obj["revenueSettlePeriod"],
                totalFactor=obj["totalFactor"],
                userFactor=obj["userFactor"],
        )






