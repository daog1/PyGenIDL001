'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import typing
from anchorpy.error import ProgramError

class InvalidSpotMarketAuthority(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6000, ""
        )

    code = 6000
    name = "InvalidSpotMarketAuthority"
    msg = ""
class InvalidInsuranceFundAuthority(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6001, ""
        )

    code = 6001
    name = "InvalidInsuranceFundAuthority"
    msg = ""
class InsufficientDeposit(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6002, ""
        )

    code = 6002
    name = "InsufficientDeposit"
    msg = ""
class InsufficientCollateral(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6003, ""
        )

    code = 6003
    name = "InsufficientCollateral"
    msg = ""
class SufficientCollateral(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6004, ""
        )

    code = 6004
    name = "SufficientCollateral"
    msg = ""
class MaxNumberOfPositions(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6005, ""
        )

    code = 6005
    name = "MaxNumberOfPositions"
    msg = ""
class AdminControlsPricesDisabled(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6006, ""
        )

    code = 6006
    name = "AdminControlsPricesDisabled"
    msg = ""
class MarketDelisted(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6007, ""
        )

    code = 6007
    name = "MarketDelisted"
    msg = ""
class MarketIndexAlreadyInitialized(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6008, ""
        )

    code = 6008
    name = "MarketIndexAlreadyInitialized"
    msg = ""
class UserAccountAndUserPositionsAccountMismatch(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6009, ""
        )

    code = 6009
    name = "UserAccountAndUserPositionsAccountMismatch"
    msg = ""
class UserHasNoPositionInMarket(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6010, ""
        )

    code = 6010
    name = "UserHasNoPositionInMarket"
    msg = ""
class InvalidInitialPeg(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6011, ""
        )

    code = 6011
    name = "InvalidInitialPeg"
    msg = ""
class InvalidRepegRedundant(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6012, ""
        )

    code = 6012
    name = "InvalidRepegRedundant"
    msg = ""
class InvalidRepegDirection(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6013, ""
        )

    code = 6013
    name = "InvalidRepegDirection"
    msg = ""
class InvalidRepegProfitability(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6014, ""
        )

    code = 6014
    name = "InvalidRepegProfitability"
    msg = ""
class SlippageOutsideLimit(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6015, ""
        )

    code = 6015
    name = "SlippageOutsideLimit"
    msg = ""
class OrderSizeTooSmall(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6016, ""
        )

    code = 6016
    name = "OrderSizeTooSmall"
    msg = ""
class InvalidUpdateK(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6017, ""
        )

    code = 6017
    name = "InvalidUpdateK"
    msg = ""
class AdminWithdrawTooLarge(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6018, ""
        )

    code = 6018
    name = "AdminWithdrawTooLarge"
    msg = ""
class MathError(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6019, ""
        )

    code = 6019
    name = "MathError"
    msg = ""
class BnConversionError(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6020, ""
        )

    code = 6020
    name = "BnConversionError"
    msg = ""
class ClockUnavailable(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6021, ""
        )

    code = 6021
    name = "ClockUnavailable"
    msg = ""
class UnableToLoadOracle(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6022, ""
        )

    code = 6022
    name = "UnableToLoadOracle"
    msg = ""
class PriceBandsBreached(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6023, ""
        )

    code = 6023
    name = "PriceBandsBreached"
    msg = ""
class ExchangePaused(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6024, ""
        )

    code = 6024
    name = "ExchangePaused"
    msg = ""
class InvalidWhitelistToken(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6025, ""
        )

    code = 6025
    name = "InvalidWhitelistToken"
    msg = ""
class WhitelistTokenNotFound(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6026, ""
        )

    code = 6026
    name = "WhitelistTokenNotFound"
    msg = ""
class InvalidDiscountToken(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6027, ""
        )

    code = 6027
    name = "InvalidDiscountToken"
    msg = ""
class DiscountTokenNotFound(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6028, ""
        )

    code = 6028
    name = "DiscountTokenNotFound"
    msg = ""
class ReferrerNotFound(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6029, ""
        )

    code = 6029
    name = "ReferrerNotFound"
    msg = ""
class ReferrerStatsNotFound(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6030, ""
        )

    code = 6030
    name = "ReferrerStatsNotFound"
    msg = ""
class ReferrerMustBeWritable(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6031, ""
        )

    code = 6031
    name = "ReferrerMustBeWritable"
    msg = ""
class ReferrerStatsMustBeWritable(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6032, ""
        )

    code = 6032
    name = "ReferrerStatsMustBeWritable"
    msg = ""
class ReferrerAndReferrerStatsAuthorityUnequal(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6033, ""
        )

    code = 6033
    name = "ReferrerAndReferrerStatsAuthorityUnequal"
    msg = ""
class InvalidReferrer(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6034, ""
        )

    code = 6034
    name = "InvalidReferrer"
    msg = ""
class InvalidOracle(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6035, ""
        )

    code = 6035
    name = "InvalidOracle"
    msg = ""
class OracleNotFound(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6036, ""
        )

    code = 6036
    name = "OracleNotFound"
    msg = ""
class LiquidationsBlockedByOracle(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6037, ""
        )

    code = 6037
    name = "LiquidationsBlockedByOracle"
    msg = ""
class MaxDeposit(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6038, ""
        )

    code = 6038
    name = "MaxDeposit"
    msg = ""
class CantDeleteUserWithCollateral(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6039, ""
        )

    code = 6039
    name = "CantDeleteUserWithCollateral"
    msg = ""
class InvalidFundingProfitability(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6040, ""
        )

    code = 6040
    name = "InvalidFundingProfitability"
    msg = ""
class CastingFailure(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6041, ""
        )

    code = 6041
    name = "CastingFailure"
    msg = ""
class InvalidOrder(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6042, ""
        )

    code = 6042
    name = "InvalidOrder"
    msg = ""
class InvalidOrderMaxTs(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6043, ""
        )

    code = 6043
    name = "InvalidOrderMaxTs"
    msg = ""
class InvalidOrderMarketType(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6044, ""
        )

    code = 6044
    name = "InvalidOrderMarketType"
    msg = ""
class InvalidOrderForInitialMarginReq(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6045, ""
        )

    code = 6045
    name = "InvalidOrderForInitialMarginReq"
    msg = ""
class InvalidOrderNotRiskReducing(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6046, ""
        )

    code = 6046
    name = "InvalidOrderNotRiskReducing"
    msg = ""
class InvalidOrderSizeTooSmall(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6047, ""
        )

    code = 6047
    name = "InvalidOrderSizeTooSmall"
    msg = ""
class InvalidOrderNotStepSizeMultiple(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6048, ""
        )

    code = 6048
    name = "InvalidOrderNotStepSizeMultiple"
    msg = ""
class InvalidOrderBaseQuoteAsset(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6049, ""
        )

    code = 6049
    name = "InvalidOrderBaseQuoteAsset"
    msg = ""
class InvalidOrderIOC(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6050, ""
        )

    code = 6050
    name = "InvalidOrderIOC"
    msg = ""
class InvalidOrderPostOnly(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6051, ""
        )

    code = 6051
    name = "InvalidOrderPostOnly"
    msg = ""
class InvalidOrderIOCPostOnly(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6052, ""
        )

    code = 6052
    name = "InvalidOrderIOCPostOnly"
    msg = ""
class InvalidOrderTrigger(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6053, ""
        )

    code = 6053
    name = "InvalidOrderTrigger"
    msg = ""
class InvalidOrderAuction(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6054, ""
        )

    code = 6054
    name = "InvalidOrderAuction"
    msg = ""
class InvalidOrderOracleOffset(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6055, ""
        )

    code = 6055
    name = "InvalidOrderOracleOffset"
    msg = ""
class InvalidOrderMinOrderSize(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6056, ""
        )

    code = 6056
    name = "InvalidOrderMinOrderSize"
    msg = ""
class PlacePostOnlyLimitFailure(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6057, ""
        )

    code = 6057
    name = "PlacePostOnlyLimitFailure"
    msg = ""
class UserHasNoOrder(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6058, ""
        )

    code = 6058
    name = "UserHasNoOrder"
    msg = ""
class OrderAmountTooSmall(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6059, ""
        )

    code = 6059
    name = "OrderAmountTooSmall"
    msg = ""
class MaxNumberOfOrders(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6060, ""
        )

    code = 6060
    name = "MaxNumberOfOrders"
    msg = ""
class OrderDoesNotExist(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6061, ""
        )

    code = 6061
    name = "OrderDoesNotExist"
    msg = ""
class OrderNotOpen(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6062, ""
        )

    code = 6062
    name = "OrderNotOpen"
    msg = ""
class FillOrderDidNotUpdateState(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6063, ""
        )

    code = 6063
    name = "FillOrderDidNotUpdateState"
    msg = ""
class ReduceOnlyOrderIncreasedRisk(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6064, ""
        )

    code = 6064
    name = "ReduceOnlyOrderIncreasedRisk"
    msg = ""
class UnableToLoadAccountLoader(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6065, ""
        )

    code = 6065
    name = "UnableToLoadAccountLoader"
    msg = ""
class TradeSizeTooLarge(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6066, ""
        )

    code = 6066
    name = "TradeSizeTooLarge"
    msg = ""
class UserCantReferThemselves(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6067, ""
        )

    code = 6067
    name = "UserCantReferThemselves"
    msg = ""
class DidNotReceiveExpectedReferrer(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6068, ""
        )

    code = 6068
    name = "DidNotReceiveExpectedReferrer"
    msg = ""
class CouldNotDeserializeReferrer(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6069, ""
        )

    code = 6069
    name = "CouldNotDeserializeReferrer"
    msg = ""
class CouldNotDeserializeReferrerStats(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6070, ""
        )

    code = 6070
    name = "CouldNotDeserializeReferrerStats"
    msg = ""
class UserOrderIdAlreadyInUse(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6071, ""
        )

    code = 6071
    name = "UserOrderIdAlreadyInUse"
    msg = ""
class NoPositionsLiquidatable(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6072, ""
        )

    code = 6072
    name = "NoPositionsLiquidatable"
    msg = ""
class InvalidMarginRatio(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6073, ""
        )

    code = 6073
    name = "InvalidMarginRatio"
    msg = ""
class CantCancelPostOnlyOrder(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6074, ""
        )

    code = 6074
    name = "CantCancelPostOnlyOrder"
    msg = ""
class InvalidOracleOffset(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6075, ""
        )

    code = 6075
    name = "InvalidOracleOffset"
    msg = ""
class CantExpireOrders(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6076, ""
        )

    code = 6076
    name = "CantExpireOrders"
    msg = ""
class CouldNotLoadMarketData(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6077, ""
        )

    code = 6077
    name = "CouldNotLoadMarketData"
    msg = ""
class PerpMarketNotFound(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6078, ""
        )

    code = 6078
    name = "PerpMarketNotFound"
    msg = ""
class InvalidMarketAccount(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6079, ""
        )

    code = 6079
    name = "InvalidMarketAccount"
    msg = ""
class UnableToLoadPerpMarketAccount(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6080, ""
        )

    code = 6080
    name = "UnableToLoadPerpMarketAccount"
    msg = ""
class MarketWrongMutability(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6081, ""
        )

    code = 6081
    name = "MarketWrongMutability"
    msg = ""
class UnableToCastUnixTime(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6082, ""
        )

    code = 6082
    name = "UnableToCastUnixTime"
    msg = ""
class CouldNotFindSpotPosition(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6083, ""
        )

    code = 6083
    name = "CouldNotFindSpotPosition"
    msg = ""
class NoSpotPositionAvailable(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6084, ""
        )

    code = 6084
    name = "NoSpotPositionAvailable"
    msg = ""
class InvalidSpotMarketInitialization(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6085, ""
        )

    code = 6085
    name = "InvalidSpotMarketInitialization"
    msg = ""
class CouldNotLoadSpotMarketData(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6086, ""
        )

    code = 6086
    name = "CouldNotLoadSpotMarketData"
    msg = ""
class SpotMarketNotFound(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6087, ""
        )

    code = 6087
    name = "SpotMarketNotFound"
    msg = ""
class InvalidSpotMarketAccount(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6088, ""
        )

    code = 6088
    name = "InvalidSpotMarketAccount"
    msg = ""
class UnableToLoadSpotMarketAccount(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6089, ""
        )

    code = 6089
    name = "UnableToLoadSpotMarketAccount"
    msg = ""
class SpotMarketWrongMutability(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6090, ""
        )

    code = 6090
    name = "SpotMarketWrongMutability"
    msg = ""
class SpotMarketInterestNotUpToDate(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6091, ""
        )

    code = 6091
    name = "SpotMarketInterestNotUpToDate"
    msg = ""
class SpotMarketInsufficientDeposits(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6092, ""
        )

    code = 6092
    name = "SpotMarketInsufficientDeposits"
    msg = ""
class UserMustSettleTheirOwnPositiveUnsettledPNL(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6093, ""
        )

    code = 6093
    name = "UserMustSettleTheirOwnPositiveUnsettledPNL"
    msg = ""
class CantUpdatePoolBalanceType(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6094, ""
        )

    code = 6094
    name = "CantUpdatePoolBalanceType"
    msg = ""
class InsufficientCollateralForSettlingPNL(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6095, ""
        )

    code = 6095
    name = "InsufficientCollateralForSettlingPNL"
    msg = ""
class AMMNotUpdatedInSameSlot(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6096, ""
        )

    code = 6096
    name = "AMMNotUpdatedInSameSlot"
    msg = ""
class AuctionNotComplete(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6097, ""
        )

    code = 6097
    name = "AuctionNotComplete"
    msg = ""
class MakerNotFound(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6098, ""
        )

    code = 6098
    name = "MakerNotFound"
    msg = ""
class MakerStatsNotFound(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6099, ""
        )

    code = 6099
    name = "MakerStatsNotFound"
    msg = ""
class MakerMustBeWritable(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6100, ""
        )

    code = 6100
    name = "MakerMustBeWritable"
    msg = ""
class MakerStatsMustBeWritable(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6101, ""
        )

    code = 6101
    name = "MakerStatsMustBeWritable"
    msg = ""
class MakerOrderNotFound(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6102, ""
        )

    code = 6102
    name = "MakerOrderNotFound"
    msg = ""
class CouldNotDeserializeMaker(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6103, ""
        )

    code = 6103
    name = "CouldNotDeserializeMaker"
    msg = ""
class CouldNotDeserializeMakerStats(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6104, ""
        )

    code = 6104
    name = "CouldNotDeserializeMakerStats"
    msg = ""
class AuctionPriceDoesNotSatisfyMaker(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6105, ""
        )

    code = 6105
    name = "AuctionPriceDoesNotSatisfyMaker"
    msg = ""
class MakerCantFulfillOwnOrder(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6106, ""
        )

    code = 6106
    name = "MakerCantFulfillOwnOrder"
    msg = ""
class MakerOrderMustBePostOnly(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6107, ""
        )

    code = 6107
    name = "MakerOrderMustBePostOnly"
    msg = ""
class CantMatchTwoPostOnlys(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6108, ""
        )

    code = 6108
    name = "CantMatchTwoPostOnlys"
    msg = ""
class OrderBreachesOraclePriceLimits(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6109, ""
        )

    code = 6109
    name = "OrderBreachesOraclePriceLimits"
    msg = ""
class OrderMustBeTriggeredFirst(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6110, ""
        )

    code = 6110
    name = "OrderMustBeTriggeredFirst"
    msg = ""
class OrderNotTriggerable(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6111, ""
        )

    code = 6111
    name = "OrderNotTriggerable"
    msg = ""
class OrderDidNotSatisfyTriggerCondition(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6112, ""
        )

    code = 6112
    name = "OrderDidNotSatisfyTriggerCondition"
    msg = ""
class PositionAlreadyBeingLiquidated(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6113, ""
        )

    code = 6113
    name = "PositionAlreadyBeingLiquidated"
    msg = ""
class PositionDoesntHaveOpenPositionOrOrders(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6114, ""
        )

    code = 6114
    name = "PositionDoesntHaveOpenPositionOrOrders"
    msg = ""
class AllOrdersAreAlreadyLiquidations(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6115, ""
        )

    code = 6115
    name = "AllOrdersAreAlreadyLiquidations"
    msg = ""
class CantCancelLiquidationOrder(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6116, ""
        )

    code = 6116
    name = "CantCancelLiquidationOrder"
    msg = ""
class UserIsBeingLiquidated(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6117, ""
        )

    code = 6117
    name = "UserIsBeingLiquidated"
    msg = ""
class LiquidationsOngoing(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6118, ""
        )

    code = 6118
    name = "LiquidationsOngoing"
    msg = ""
class WrongSpotBalanceType(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6119, ""
        )

    code = 6119
    name = "WrongSpotBalanceType"
    msg = ""
class UserCantLiquidateThemself(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6120, ""
        )

    code = 6120
    name = "UserCantLiquidateThemself"
    msg = ""
class InvalidPerpPositionToLiquidate(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6121, ""
        )

    code = 6121
    name = "InvalidPerpPositionToLiquidate"
    msg = ""
class InvalidBaseAssetAmountForLiquidatePerp(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6122, ""
        )

    code = 6122
    name = "InvalidBaseAssetAmountForLiquidatePerp"
    msg = ""
class InvalidPositionLastFundingRate(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6123, ""
        )

    code = 6123
    name = "InvalidPositionLastFundingRate"
    msg = ""
class InvalidPositionDelta(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6124, ""
        )

    code = 6124
    name = "InvalidPositionDelta"
    msg = ""
class UserBankrupt(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6125, ""
        )

    code = 6125
    name = "UserBankrupt"
    msg = ""
class UserNotBankrupt(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6126, ""
        )

    code = 6126
    name = "UserNotBankrupt"
    msg = ""
class UserHasInvalidBorrow(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6127, ""
        )

    code = 6127
    name = "UserHasInvalidBorrow"
    msg = ""
class DailyWithdrawLimit(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6128, ""
        )

    code = 6128
    name = "DailyWithdrawLimit"
    msg = ""
class DefaultError(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6129, ""
        )

    code = 6129
    name = "DefaultError"
    msg = ""
class InsufficientLPTokens(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6130, ""
        )

    code = 6130
    name = "InsufficientLPTokens"
    msg = ""
class CantLPWithPerpPosition(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6131, ""
        )

    code = 6131
    name = "CantLPWithPerpPosition"
    msg = ""
class UnableToBurnLPTokens(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6132, ""
        )

    code = 6132
    name = "UnableToBurnLPTokens"
    msg = ""
class TryingToRemoveLiquidityTooFast(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6133, ""
        )

    code = 6133
    name = "TryingToRemoveLiquidityTooFast"
    msg = ""
class InvalidSpotMarketVault(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6134, ""
        )

    code = 6134
    name = "InvalidSpotMarketVault"
    msg = ""
class InvalidSpotMarketState(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6135, ""
        )

    code = 6135
    name = "InvalidSpotMarketState"
    msg = ""
class InvalidSerumProgram(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6136, ""
        )

    code = 6136
    name = "InvalidSerumProgram"
    msg = ""
class InvalidSerumMarket(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6137, ""
        )

    code = 6137
    name = "InvalidSerumMarket"
    msg = ""
class InvalidSerumBids(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6138, ""
        )

    code = 6138
    name = "InvalidSerumBids"
    msg = ""
class InvalidSerumAsks(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6139, ""
        )

    code = 6139
    name = "InvalidSerumAsks"
    msg = ""
class InvalidSerumOpenOrders(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6140, ""
        )

    code = 6140
    name = "InvalidSerumOpenOrders"
    msg = ""
class FailedSerumCPI(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6141, ""
        )

    code = 6141
    name = "FailedSerumCPI"
    msg = ""
class FailedToFillOnExternalMarket(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6142, ""
        )

    code = 6142
    name = "FailedToFillOnExternalMarket"
    msg = ""
class InvalidFulfillmentConfig(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6143, ""
        )

    code = 6143
    name = "InvalidFulfillmentConfig"
    msg = ""
class InvalidFeeStructure(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6144, ""
        )

    code = 6144
    name = "InvalidFeeStructure"
    msg = ""
class InsufficientIFShares(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6145, ""
        )

    code = 6145
    name = "InsufficientIFShares"
    msg = ""
class MarketActionPaused(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6146, ""
        )

    code = 6146
    name = "MarketActionPaused"
    msg = ""
class MarketPlaceOrderPaused(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6147, ""
        )

    code = 6147
    name = "MarketPlaceOrderPaused"
    msg = ""
class MarketFillOrderPaused(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6148, ""
        )

    code = 6148
    name = "MarketFillOrderPaused"
    msg = ""
class MarketWithdrawPaused(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6149, ""
        )

    code = 6149
    name = "MarketWithdrawPaused"
    msg = ""
class ProtectedAssetTierViolation(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6150, ""
        )

    code = 6150
    name = "ProtectedAssetTierViolation"
    msg = ""
class IsolatedAssetTierViolation(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6151, ""
        )

    code = 6151
    name = "IsolatedAssetTierViolation"
    msg = ""
class UserCantBeDeleted(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6152, ""
        )

    code = 6152
    name = "UserCantBeDeleted"
    msg = ""
class ReduceOnlyWithdrawIncreasedRisk(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6153, ""
        )

    code = 6153
    name = "ReduceOnlyWithdrawIncreasedRisk"
    msg = ""
class MaxOpenInterest(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6154, ""
        )

    code = 6154
    name = "MaxOpenInterest"
    msg = ""
class CantResolvePerpBankruptcy(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6155, ""
        )

    code = 6155
    name = "CantResolvePerpBankruptcy"
    msg = ""
class LiquidationDoesntSatisfyLimitPrice(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6156, ""
        )

    code = 6156
    name = "LiquidationDoesntSatisfyLimitPrice"
    msg = ""
class MarginTradingDisabled(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6157, ""
        )

    code = 6157
    name = "MarginTradingDisabled"
    msg = ""
class InvalidMarketStatusToSettlePnl(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6158, ""
        )

    code = 6158
    name = "InvalidMarketStatusToSettlePnl"
    msg = ""
class PerpMarketNotInSettlement(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6159, ""
        )

    code = 6159
    name = "PerpMarketNotInSettlement"
    msg = ""
class PerpMarketNotInReduceOnly(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6160, ""
        )

    code = 6160
    name = "PerpMarketNotInReduceOnly"
    msg = ""
class PerpMarketSettlementBufferNotReached(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6161, ""
        )

    code = 6161
    name = "PerpMarketSettlementBufferNotReached"
    msg = ""
class PerpMarketSettlementUserHasOpenOrders(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6162, ""
        )

    code = 6162
    name = "PerpMarketSettlementUserHasOpenOrders"
    msg = ""
class PerpMarketSettlementUserHasActiveLP(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6163, ""
        )

    code = 6163
    name = "PerpMarketSettlementUserHasActiveLP"
    msg = ""
class UnableToSettleExpiredUserPosition(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6164, ""
        )

    code = 6164
    name = "UnableToSettleExpiredUserPosition"
    msg = ""
class UnequalMarketIndexForSpotTransfer(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6165, ""
        )

    code = 6165
    name = "UnequalMarketIndexForSpotTransfer"
    msg = ""
class InvalidPerpPositionDetected(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6166, ""
        )

    code = 6166
    name = "InvalidPerpPositionDetected"
    msg = ""
class InvalidSpotPositionDetected(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6167, ""
        )

    code = 6167
    name = "InvalidSpotPositionDetected"
    msg = ""
class InvalidAmmDetected(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6168, ""
        )

    code = 6168
    name = "InvalidAmmDetected"
    msg = ""
class InvalidAmmForFillDetected(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6169, ""
        )

    code = 6169
    name = "InvalidAmmForFillDetected"
    msg = ""
class InvalidAmmLimitPriceOverride(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6170, ""
        )

    code = 6170
    name = "InvalidAmmLimitPriceOverride"
    msg = ""
class InvalidOrderFillPrice(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6171, ""
        )

    code = 6171
    name = "InvalidOrderFillPrice"
    msg = ""
class SpotMarketBalanceInvariantViolated(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6172, ""
        )

    code = 6172
    name = "SpotMarketBalanceInvariantViolated"
    msg = ""
class SpotMarketVaultInvariantViolated(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6173, ""
        )

    code = 6173
    name = "SpotMarketVaultInvariantViolated"
    msg = ""
class InvalidPDA(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6174, ""
        )

    code = 6174
    name = "InvalidPDA"
    msg = ""
class InvalidPDASigner(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6175, ""
        )

    code = 6175
    name = "InvalidPDASigner"
    msg = ""
class RevenueSettingsCannotSettleToIF(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6176, ""
        )

    code = 6176
    name = "RevenueSettingsCannotSettleToIF"
    msg = ""
class NoRevenueToSettleToIF(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6177, ""
        )

    code = 6177
    name = "NoRevenueToSettleToIF"
    msg = ""
class NoAmmPerpPnlDeficit(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6178, ""
        )

    code = 6178
    name = "NoAmmPerpPnlDeficit"
    msg = ""
class SufficientPerpPnlPool(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6179, ""
        )

    code = 6179
    name = "SufficientPerpPnlPool"
    msg = ""
class InsufficientPerpPnlPool(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6180, ""
        )

    code = 6180
    name = "InsufficientPerpPnlPool"
    msg = ""
class PerpPnlDeficitBelowThreshold(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6181, ""
        )

    code = 6181
    name = "PerpPnlDeficitBelowThreshold"
    msg = ""
class MaxRevenueWithdrawPerPeriodReached(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6182, ""
        )

    code = 6182
    name = "MaxRevenueWithdrawPerPeriodReached"
    msg = ""
class MaxIFWithdrawReached(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6183, ""
        )

    code = 6183
    name = "MaxIFWithdrawReached"
    msg = ""
class NoIFWithdrawAvailable(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6184, ""
        )

    code = 6184
    name = "NoIFWithdrawAvailable"
    msg = ""
class InvalidIFUnstake(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6185, ""
        )

    code = 6185
    name = "InvalidIFUnstake"
    msg = ""
class InvalidIFUnstakeSize(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6186, ""
        )

    code = 6186
    name = "InvalidIFUnstakeSize"
    msg = ""
class InvalidIFUnstakeCancel(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6187, ""
        )

    code = 6187
    name = "InvalidIFUnstakeCancel"
    msg = ""
class InvalidIFForNewStakes(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6188, ""
        )

    code = 6188
    name = "InvalidIFForNewStakes"
    msg = ""
class InvalidIFRebase(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6189, ""
        )

    code = 6189
    name = "InvalidIFRebase"
    msg = ""
class InvalidInsuranceUnstakeSize(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6190, ""
        )

    code = 6190
    name = "InvalidInsuranceUnstakeSize"
    msg = ""
class InvalidOrderLimitPrice(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6191, ""
        )

    code = 6191
    name = "InvalidOrderLimitPrice"
    msg = ""
class InvalidIFDetected(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6192, ""
        )

    code = 6192
    name = "InvalidIFDetected"
    msg = ""
class InvalidAmmMaxSpreadDetected(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6193, ""
        )

    code = 6193
    name = "InvalidAmmMaxSpreadDetected"
    msg = ""
class InvalidConcentrationCoef(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6194, ""
        )

    code = 6194
    name = "InvalidConcentrationCoef"
    msg = ""
class InvalidSrmVault(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6195, ""
        )

    code = 6195
    name = "InvalidSrmVault"
    msg = ""
class InvalidVaultOwner(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6196, ""
        )

    code = 6196
    name = "InvalidVaultOwner"
    msg = ""
class InvalidMarketStatusForFills(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6197, ""
        )

    code = 6197
    name = "InvalidMarketStatusForFills"
    msg = ""
class IFWithdrawRequestInProgress(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6198, ""
        )

    code = 6198
    name = "IFWithdrawRequestInProgress"
    msg = ""
class NoIFWithdrawRequestInProgress(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6199, ""
        )

    code = 6199
    name = "NoIFWithdrawRequestInProgress"
    msg = ""
class IFWithdrawRequestTooSmall(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6200, ""
        )

    code = 6200
    name = "IFWithdrawRequestTooSmall"
    msg = ""
class IncorrectSpotMarketAccountPassed(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6201, ""
        )

    code = 6201
    name = "IncorrectSpotMarketAccountPassed"
    msg = ""
class BlockchainClockInconsistency(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6202, ""
        )

    code = 6202
    name = "BlockchainClockInconsistency"
    msg = ""
class InvalidIFSharesDetected(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6203, ""
        )

    code = 6203
    name = "InvalidIFSharesDetected"
    msg = ""
class NewLPSizeTooSmall(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6204, ""
        )

    code = 6204
    name = "NewLPSizeTooSmall"
    msg = ""
class MarketStatusInvalidForNewLP(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6205, ""
        )

    code = 6205
    name = "MarketStatusInvalidForNewLP"
    msg = ""
class InvalidMarkTwapUpdateDetected(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6206, ""
        )

    code = 6206
    name = "InvalidMarkTwapUpdateDetected"
    msg = ""
class MarketSettlementAttemptOnActiveMarket(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6207, ""
        )

    code = 6207
    name = "MarketSettlementAttemptOnActiveMarket"
    msg = ""
class MarketSettlementRequiresSettledLP(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6208, ""
        )

    code = 6208
    name = "MarketSettlementRequiresSettledLP"
    msg = ""
class MarketSettlementAttemptTooEarly(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6209, ""
        )

    code = 6209
    name = "MarketSettlementAttemptTooEarly"
    msg = ""
class MarketSettlementTargetPriceInvalid(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6210, ""
        )

    code = 6210
    name = "MarketSettlementTargetPriceInvalid"
    msg = ""
class UnsupportedSpotMarket(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6211, ""
        )

    code = 6211
    name = "UnsupportedSpotMarket"
    msg = ""
class SpotOrdersDisabled(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6212, ""
        )

    code = 6212
    name = "SpotOrdersDisabled"
    msg = ""
class MarketBeingInitialized(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6213, ""
        )

    code = 6213
    name = "MarketBeingInitialized"
    msg = ""
class InvalidUserSubAccountId(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6214, ""
        )

    code = 6214
    name = "InvalidUserSubAccountId"
    msg = ""
class InvalidTriggerOrderCondition(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6215, ""
        )

    code = 6215
    name = "InvalidTriggerOrderCondition"
    msg = ""
class InvalidSpotPosition(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6216, ""
        )

    code = 6216
    name = "InvalidSpotPosition"
    msg = ""
class CantTransferBetweenSameUserAccount(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6217, ""
        )

    code = 6217
    name = "CantTransferBetweenSameUserAccount"
    msg = ""
class InvalidPerpPosition(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6218, ""
        )

    code = 6218
    name = "InvalidPerpPosition"
    msg = ""
class UnableToGetLimitPrice(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6219, ""
        )

    code = 6219
    name = "UnableToGetLimitPrice"
    msg = ""
class InvalidLiquidation(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6220, ""
        )

    code = 6220
    name = "InvalidLiquidation"
    msg = ""
class SpotFulfillmentConfigDisabled(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6221, ""
        )

    code = 6221
    name = "SpotFulfillmentConfigDisabled"
    msg = ""
class InvalidMaker(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6222, ""
        )

    code = 6222
    name = "InvalidMaker"
    msg = ""
class FailedUnwrap(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6223, ""
        )

    code = 6223
    name = "FailedUnwrap"
    msg = ""
class MaxNumberOfUsers(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6224, ""
        )

    code = 6224
    name = "MaxNumberOfUsers"
    msg = ""
class InvalidOracleForSettlePnl(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6225, ""
        )

    code = 6225
    name = "InvalidOracleForSettlePnl"
    msg = ""
class MarginOrdersOpen(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6226, ""
        )

    code = 6226
    name = "MarginOrdersOpen"
    msg = ""
class TierViolationLiquidatingPerpPnl(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6227, ""
        )

    code = 6227
    name = "TierViolationLiquidatingPerpPnl"
    msg = ""
class CouldNotLoadUserData(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6228, ""
        )

    code = 6228
    name = "CouldNotLoadUserData"
    msg = ""
class UserWrongMutability(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6229, ""
        )

    code = 6229
    name = "UserWrongMutability"
    msg = ""
class InvalidUserAccount(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6230, ""
        )

    code = 6230
    name = "InvalidUserAccount"
    msg = ""
class CouldNotLoadUserStatsData(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6231, ""
        )

    code = 6231
    name = "CouldNotLoadUserStatsData"
    msg = ""
class UserStatsWrongMutability(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6232, ""
        )

    code = 6232
    name = "UserStatsWrongMutability"
    msg = ""
class InvalidUserStatsAccount(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6233, ""
        )

    code = 6233
    name = "InvalidUserStatsAccount"
    msg = ""
class UserNotFound(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6234, ""
        )

    code = 6234
    name = "UserNotFound"
    msg = ""
class UnableToLoadUserAccount(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6235, ""
        )

    code = 6235
    name = "UnableToLoadUserAccount"
    msg = ""
class UserStatsNotFound(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6236, ""
        )

    code = 6236
    name = "UserStatsNotFound"
    msg = ""
class UnableToLoadUserStatsAccount(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6237, ""
        )

    code = 6237
    name = "UnableToLoadUserStatsAccount"
    msg = ""
class UserNotInactive(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6238, ""
        )

    code = 6238
    name = "UserNotInactive"
    msg = ""
class RevertFill(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6239, ""
        )

    code = 6239
    name = "RevertFill"
    msg = ""
class InvalidMarketAccountforDeletion(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6240, ""
        )

    code = 6240
    name = "InvalidMarketAccountforDeletion"
    msg = ""
class InvalidSpotFulfillmentParams(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6241, ""
        )

    code = 6241
    name = "InvalidSpotFulfillmentParams"
    msg = ""
class FailedToGetMint(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6242, ""
        )

    code = 6242
    name = "FailedToGetMint"
    msg = ""
class FailedPhoenixCPI(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6243, ""
        )

    code = 6243
    name = "FailedPhoenixCPI"
    msg = ""
class FailedToDeserializePhoenixMarket(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6244, ""
        )

    code = 6244
    name = "FailedToDeserializePhoenixMarket"
    msg = ""
class InvalidPricePrecision(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6245, ""
        )

    code = 6245
    name = "InvalidPricePrecision"
    msg = ""
class InvalidPhoenixProgram(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6246, ""
        )

    code = 6246
    name = "InvalidPhoenixProgram"
    msg = ""
class InvalidPhoenixMarket(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6247, ""
        )

    code = 6247
    name = "InvalidPhoenixMarket"
    msg = ""
class InvalidSwap(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6248, ""
        )

    code = 6248
    name = "InvalidSwap"
    msg = ""
class SwapLimitPriceBreached(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6249, ""
        )

    code = 6249
    name = "SwapLimitPriceBreached"
    msg = ""
class SpotMarketReduceOnly(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6250, ""
        )

    code = 6250
    name = "SpotMarketReduceOnly"
    msg = ""
class FundingWasNotUpdated(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6251, ""
        )

    code = 6251
    name = "FundingWasNotUpdated"
    msg = ""
class ImpossibleFill(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6252, ""
        )

    code = 6252
    name = "ImpossibleFill"
    msg = ""
class CantUpdatePerpBidAskTwap(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6253, ""
        )

    code = 6253
    name = "CantUpdatePerpBidAskTwap"
    msg = ""
class UserReduceOnly(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6254, ""
        )

    code = 6254
    name = "UserReduceOnly"
    msg = ""
class InvalidMarginCalculation(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6255, ""
        )

    code = 6255
    name = "InvalidMarginCalculation"
    msg = ""
class CantPayUserInitFee(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6256, ""
        )

    code = 6256
    name = "CantPayUserInitFee"
    msg = ""
class CantReclaimRent(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6257, ""
        )

    code = 6257
    name = "CantReclaimRent"
    msg = ""
class InsuranceFundOperationPaused(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6258, ""
        )

    code = 6258
    name = "InsuranceFundOperationPaused"
    msg = ""
class NoUnsettledPnl(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6259, ""
        )

    code = 6259
    name = "NoUnsettledPnl"
    msg = ""
class PnlPoolCantSettleUser(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6260, ""
        )

    code = 6260
    name = "PnlPoolCantSettleUser"
    msg = ""
class OracleNonPositive(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6261, ""
        )

    code = 6261
    name = "OracleNonPositive"
    msg = ""
class OracleTooVolatile(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6262, ""
        )

    code = 6262
    name = "OracleTooVolatile"
    msg = ""
class OracleTooUncertain(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6263, ""
        )

    code = 6263
    name = "OracleTooUncertain"
    msg = ""
class OracleStaleForMargin(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6264, ""
        )

    code = 6264
    name = "OracleStaleForMargin"
    msg = ""
class OracleInsufficientDataPoints(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6265, ""
        )

    code = 6265
    name = "OracleInsufficientDataPoints"
    msg = ""
class OracleStaleForAMM(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6266, ""
        )

    code = 6266
    name = "OracleStaleForAMM"
    msg = ""
class UnableToParsePullOracleMessage(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6267, ""
        )

    code = 6267
    name = "UnableToParsePullOracleMessage"
    msg = ""
class MaxBorrows(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6268, ""
        )

    code = 6268
    name = "MaxBorrows"
    msg = ""
class OracleUpdatesNotMonotonic(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6269, ""
        )

    code = 6269
    name = "OracleUpdatesNotMonotonic"
    msg = ""
class OraclePriceFeedMessageMismatch(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6270, ""
        )

    code = 6270
    name = "OraclePriceFeedMessageMismatch"
    msg = ""
class OracleUnsupportedMessageType(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6271, ""
        )

    code = 6271
    name = "OracleUnsupportedMessageType"
    msg = ""
class OracleDeserializeMessageFailed(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6272, ""
        )

    code = 6272
    name = "OracleDeserializeMessageFailed"
    msg = ""
class OracleWrongGuardianSetOwner(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6273, ""
        )

    code = 6273
    name = "OracleWrongGuardianSetOwner"
    msg = ""
class OracleWrongWriteAuthority(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6274, ""
        )

    code = 6274
    name = "OracleWrongWriteAuthority"
    msg = ""
class OracleWrongVaaOwner(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6275, ""
        )

    code = 6275
    name = "OracleWrongVaaOwner"
    msg = ""
class OracleTooManyPriceAccountUpdates(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6276, ""
        )

    code = 6276
    name = "OracleTooManyPriceAccountUpdates"
    msg = ""
class OracleMismatchedVaaAndPriceUpdates(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6277, ""
        )

    code = 6277
    name = "OracleMismatchedVaaAndPriceUpdates"
    msg = ""
class OracleBadRemainingAccountPublicKey(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6278, ""
        )

    code = 6278
    name = "OracleBadRemainingAccountPublicKey"
    msg = ""
class FailedOpenbookV2CPI(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6279, ""
        )

    code = 6279
    name = "FailedOpenbookV2CPI"
    msg = ""
class InvalidOpenbookV2Program(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6280, ""
        )

    code = 6280
    name = "InvalidOpenbookV2Program"
    msg = ""
class InvalidOpenbookV2Market(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6281, ""
        )

    code = 6281
    name = "InvalidOpenbookV2Market"
    msg = ""
class NonZeroTransferFee(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6282, ""
        )

    code = 6282
    name = "NonZeroTransferFee"
    msg = ""
class LiquidationOrderFailedToFill(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6283, ""
        )

    code = 6283
    name = "LiquidationOrderFailedToFill"
    msg = ""
class InvalidPredictionMarketOrder(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6284, ""
        )

    code = 6284
    name = "InvalidPredictionMarketOrder"
    msg = ""
class InvalidVerificationIxIndex(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6285, ""
        )

    code = 6285
    name = "InvalidVerificationIxIndex"
    msg = ""
class SigVerificationFailed(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6286, ""
        )

    code = 6286
    name = "SigVerificationFailed"
    msg = ""
class MismatchedSwiftOrderParamsMarketIndex(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6287, ""
        )

    code = 6287
    name = "MismatchedSwiftOrderParamsMarketIndex"
    msg = ""
class InvalidSwiftOrderParam(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6288, ""
        )

    code = 6288
    name = "InvalidSwiftOrderParam"
    msg = ""
class PlaceAndTakeOrderSuccessConditionFailed(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6289, ""
        )

    code = 6289
    name = "PlaceAndTakeOrderSuccessConditionFailed"
    msg = ""
class InvalidHighLeverageModeConfig(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6290, ""
        )

    code = 6290
    name = "InvalidHighLeverageModeConfig"
    msg = ""
class InvalidRFQUserAccount(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6291, ""
        )

    code = 6291
    name = "InvalidRFQUserAccount"
    msg = ""
class RFQUserAccountWrongMutability(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6292, ""
        )

    code = 6292
    name = "RFQUserAccountWrongMutability"
    msg = ""
class RFQUserAccountFull(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6293, ""
        )

    code = 6293
    name = "RFQUserAccountFull"
    msg = ""
class RFQOrderNotFilled(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6294, ""
        )

    code = 6294
    name = "RFQOrderNotFilled"
    msg = ""
class InvalidRFQOrder(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6295, ""
        )

    code = 6295
    name = "InvalidRFQOrder"
    msg = ""
class InvalidRFQMatch(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6296, ""
        )

    code = 6296
    name = "InvalidRFQMatch"
    msg = ""
class InvalidSwiftUserAccount(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6297, ""
        )

    code = 6297
    name = "InvalidSwiftUserAccount"
    msg = ""
class SwiftUserAccountWrongMutability(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6298, ""
        )

    code = 6298
    name = "SwiftUserAccountWrongMutability"
    msg = ""
class SwiftUserOrdersAccountFull(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6299, ""
        )

    code = 6299
    name = "SwiftUserOrdersAccountFull"
    msg = ""
class SwiftOrderDoesNotExist(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6300, ""
        )

    code = 6300
    name = "SwiftOrderDoesNotExist"
    msg = ""
class InvalidSwiftOrderId(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6301, ""
        )

    code = 6301
    name = "InvalidSwiftOrderId"
    msg = ""
class InvalidPoolId(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6302, ""
        )

    code = 6302
    name = "InvalidPoolId"
    msg = ""
class InvalidProtectedMakerModeConfig(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6303, ""
        )

    code = 6303
    name = "InvalidProtectedMakerModeConfig"
    msg = ""
class InvalidPythLazerStorageOwner(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6304, ""
        )

    code = 6304
    name = "InvalidPythLazerStorageOwner"
    msg = ""
class UnverifiedPythLazerMessage(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6305, ""
        )

    code = 6305
    name = "UnverifiedPythLazerMessage"
    msg = ""
class InvalidPythLazerMessage(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6306, ""
        )

    code = 6306
    name = "InvalidPythLazerMessage"
    msg = ""
class PythLazerMessagePriceFeedMismatch(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6307, ""
        )

    code = 6307
    name = "PythLazerMessagePriceFeedMismatch"
    msg = ""
class InvalidLiquidateSpotWithSwap(ProgramError):
    def __init__(self) -> None:
        super().__init__(
            6308, ""
        )

    code = 6308
    name = "InvalidLiquidateSpotWithSwap"
    msg = ""

CustomError = typing.Union[
    InvalidSpotMarketAuthority,
    InvalidInsuranceFundAuthority,
    InsufficientDeposit,
    InsufficientCollateral,
    SufficientCollateral,
    MaxNumberOfPositions,
    AdminControlsPricesDisabled,
    MarketDelisted,
    MarketIndexAlreadyInitialized,
    UserAccountAndUserPositionsAccountMismatch,
    UserHasNoPositionInMarket,
    InvalidInitialPeg,
    InvalidRepegRedundant,
    InvalidRepegDirection,
    InvalidRepegProfitability,
    SlippageOutsideLimit,
    OrderSizeTooSmall,
    InvalidUpdateK,
    AdminWithdrawTooLarge,
    MathError,
    BnConversionError,
    ClockUnavailable,
    UnableToLoadOracle,
    PriceBandsBreached,
    ExchangePaused,
    InvalidWhitelistToken,
    WhitelistTokenNotFound,
    InvalidDiscountToken,
    DiscountTokenNotFound,
    ReferrerNotFound,
    ReferrerStatsNotFound,
    ReferrerMustBeWritable,
    ReferrerStatsMustBeWritable,
    ReferrerAndReferrerStatsAuthorityUnequal,
    InvalidReferrer,
    InvalidOracle,
    OracleNotFound,
    LiquidationsBlockedByOracle,
    MaxDeposit,
    CantDeleteUserWithCollateral,
    InvalidFundingProfitability,
    CastingFailure,
    InvalidOrder,
    InvalidOrderMaxTs,
    InvalidOrderMarketType,
    InvalidOrderForInitialMarginReq,
    InvalidOrderNotRiskReducing,
    InvalidOrderSizeTooSmall,
    InvalidOrderNotStepSizeMultiple,
    InvalidOrderBaseQuoteAsset,
    InvalidOrderIOC,
    InvalidOrderPostOnly,
    InvalidOrderIOCPostOnly,
    InvalidOrderTrigger,
    InvalidOrderAuction,
    InvalidOrderOracleOffset,
    InvalidOrderMinOrderSize,
    PlacePostOnlyLimitFailure,
    UserHasNoOrder,
    OrderAmountTooSmall,
    MaxNumberOfOrders,
    OrderDoesNotExist,
    OrderNotOpen,
    FillOrderDidNotUpdateState,
    ReduceOnlyOrderIncreasedRisk,
    UnableToLoadAccountLoader,
    TradeSizeTooLarge,
    UserCantReferThemselves,
    DidNotReceiveExpectedReferrer,
    CouldNotDeserializeReferrer,
    CouldNotDeserializeReferrerStats,
    UserOrderIdAlreadyInUse,
    NoPositionsLiquidatable,
    InvalidMarginRatio,
    CantCancelPostOnlyOrder,
    InvalidOracleOffset,
    CantExpireOrders,
    CouldNotLoadMarketData,
    PerpMarketNotFound,
    InvalidMarketAccount,
    UnableToLoadPerpMarketAccount,
    MarketWrongMutability,
    UnableToCastUnixTime,
    CouldNotFindSpotPosition,
    NoSpotPositionAvailable,
    InvalidSpotMarketInitialization,
    CouldNotLoadSpotMarketData,
    SpotMarketNotFound,
    InvalidSpotMarketAccount,
    UnableToLoadSpotMarketAccount,
    SpotMarketWrongMutability,
    SpotMarketInterestNotUpToDate,
    SpotMarketInsufficientDeposits,
    UserMustSettleTheirOwnPositiveUnsettledPNL,
    CantUpdatePoolBalanceType,
    InsufficientCollateralForSettlingPNL,
    AMMNotUpdatedInSameSlot,
    AuctionNotComplete,
    MakerNotFound,
    MakerStatsNotFound,
    MakerMustBeWritable,
    MakerStatsMustBeWritable,
    MakerOrderNotFound,
    CouldNotDeserializeMaker,
    CouldNotDeserializeMakerStats,
    AuctionPriceDoesNotSatisfyMaker,
    MakerCantFulfillOwnOrder,
    MakerOrderMustBePostOnly,
    CantMatchTwoPostOnlys,
    OrderBreachesOraclePriceLimits,
    OrderMustBeTriggeredFirst,
    OrderNotTriggerable,
    OrderDidNotSatisfyTriggerCondition,
    PositionAlreadyBeingLiquidated,
    PositionDoesntHaveOpenPositionOrOrders,
    AllOrdersAreAlreadyLiquidations,
    CantCancelLiquidationOrder,
    UserIsBeingLiquidated,
    LiquidationsOngoing,
    WrongSpotBalanceType,
    UserCantLiquidateThemself,
    InvalidPerpPositionToLiquidate,
    InvalidBaseAssetAmountForLiquidatePerp,
    InvalidPositionLastFundingRate,
    InvalidPositionDelta,
    UserBankrupt,
    UserNotBankrupt,
    UserHasInvalidBorrow,
    DailyWithdrawLimit,
    DefaultError,
    InsufficientLPTokens,
    CantLPWithPerpPosition,
    UnableToBurnLPTokens,
    TryingToRemoveLiquidityTooFast,
    InvalidSpotMarketVault,
    InvalidSpotMarketState,
    InvalidSerumProgram,
    InvalidSerumMarket,
    InvalidSerumBids,
    InvalidSerumAsks,
    InvalidSerumOpenOrders,
    FailedSerumCPI,
    FailedToFillOnExternalMarket,
    InvalidFulfillmentConfig,
    InvalidFeeStructure,
    InsufficientIFShares,
    MarketActionPaused,
    MarketPlaceOrderPaused,
    MarketFillOrderPaused,
    MarketWithdrawPaused,
    ProtectedAssetTierViolation,
    IsolatedAssetTierViolation,
    UserCantBeDeleted,
    ReduceOnlyWithdrawIncreasedRisk,
    MaxOpenInterest,
    CantResolvePerpBankruptcy,
    LiquidationDoesntSatisfyLimitPrice,
    MarginTradingDisabled,
    InvalidMarketStatusToSettlePnl,
    PerpMarketNotInSettlement,
    PerpMarketNotInReduceOnly,
    PerpMarketSettlementBufferNotReached,
    PerpMarketSettlementUserHasOpenOrders,
    PerpMarketSettlementUserHasActiveLP,
    UnableToSettleExpiredUserPosition,
    UnequalMarketIndexForSpotTransfer,
    InvalidPerpPositionDetected,
    InvalidSpotPositionDetected,
    InvalidAmmDetected,
    InvalidAmmForFillDetected,
    InvalidAmmLimitPriceOverride,
    InvalidOrderFillPrice,
    SpotMarketBalanceInvariantViolated,
    SpotMarketVaultInvariantViolated,
    InvalidPDA,
    InvalidPDASigner,
    RevenueSettingsCannotSettleToIF,
    NoRevenueToSettleToIF,
    NoAmmPerpPnlDeficit,
    SufficientPerpPnlPool,
    InsufficientPerpPnlPool,
    PerpPnlDeficitBelowThreshold,
    MaxRevenueWithdrawPerPeriodReached,
    MaxIFWithdrawReached,
    NoIFWithdrawAvailable,
    InvalidIFUnstake,
    InvalidIFUnstakeSize,
    InvalidIFUnstakeCancel,
    InvalidIFForNewStakes,
    InvalidIFRebase,
    InvalidInsuranceUnstakeSize,
    InvalidOrderLimitPrice,
    InvalidIFDetected,
    InvalidAmmMaxSpreadDetected,
    InvalidConcentrationCoef,
    InvalidSrmVault,
    InvalidVaultOwner,
    InvalidMarketStatusForFills,
    IFWithdrawRequestInProgress,
    NoIFWithdrawRequestInProgress,
    IFWithdrawRequestTooSmall,
    IncorrectSpotMarketAccountPassed,
    BlockchainClockInconsistency,
    InvalidIFSharesDetected,
    NewLPSizeTooSmall,
    MarketStatusInvalidForNewLP,
    InvalidMarkTwapUpdateDetected,
    MarketSettlementAttemptOnActiveMarket,
    MarketSettlementRequiresSettledLP,
    MarketSettlementAttemptTooEarly,
    MarketSettlementTargetPriceInvalid,
    UnsupportedSpotMarket,
    SpotOrdersDisabled,
    MarketBeingInitialized,
    InvalidUserSubAccountId,
    InvalidTriggerOrderCondition,
    InvalidSpotPosition,
    CantTransferBetweenSameUserAccount,
    InvalidPerpPosition,
    UnableToGetLimitPrice,
    InvalidLiquidation,
    SpotFulfillmentConfigDisabled,
    InvalidMaker,
    FailedUnwrap,
    MaxNumberOfUsers,
    InvalidOracleForSettlePnl,
    MarginOrdersOpen,
    TierViolationLiquidatingPerpPnl,
    CouldNotLoadUserData,
    UserWrongMutability,
    InvalidUserAccount,
    CouldNotLoadUserStatsData,
    UserStatsWrongMutability,
    InvalidUserStatsAccount,
    UserNotFound,
    UnableToLoadUserAccount,
    UserStatsNotFound,
    UnableToLoadUserStatsAccount,
    UserNotInactive,
    RevertFill,
    InvalidMarketAccountforDeletion,
    InvalidSpotFulfillmentParams,
    FailedToGetMint,
    FailedPhoenixCPI,
    FailedToDeserializePhoenixMarket,
    InvalidPricePrecision,
    InvalidPhoenixProgram,
    InvalidPhoenixMarket,
    InvalidSwap,
    SwapLimitPriceBreached,
    SpotMarketReduceOnly,
    FundingWasNotUpdated,
    ImpossibleFill,
    CantUpdatePerpBidAskTwap,
    UserReduceOnly,
    InvalidMarginCalculation,
    CantPayUserInitFee,
    CantReclaimRent,
    InsuranceFundOperationPaused,
    NoUnsettledPnl,
    PnlPoolCantSettleUser,
    OracleNonPositive,
    OracleTooVolatile,
    OracleTooUncertain,
    OracleStaleForMargin,
    OracleInsufficientDataPoints,
    OracleStaleForAMM,
    UnableToParsePullOracleMessage,
    MaxBorrows,
    OracleUpdatesNotMonotonic,
    OraclePriceFeedMessageMismatch,
    OracleUnsupportedMessageType,
    OracleDeserializeMessageFailed,
    OracleWrongGuardianSetOwner,
    OracleWrongWriteAuthority,
    OracleWrongVaaOwner,
    OracleTooManyPriceAccountUpdates,
    OracleMismatchedVaaAndPriceUpdates,
    OracleBadRemainingAccountPublicKey,
    FailedOpenbookV2CPI,
    InvalidOpenbookV2Program,
    InvalidOpenbookV2Market,
    NonZeroTransferFee,
    LiquidationOrderFailedToFill,
    InvalidPredictionMarketOrder,
    InvalidVerificationIxIndex,
    SigVerificationFailed,
    MismatchedSwiftOrderParamsMarketIndex,
    InvalidSwiftOrderParam,
    PlaceAndTakeOrderSuccessConditionFailed,
    InvalidHighLeverageModeConfig,
    InvalidRFQUserAccount,
    RFQUserAccountWrongMutability,
    RFQUserAccountFull,
    RFQOrderNotFilled,
    InvalidRFQOrder,
    InvalidRFQMatch,
    InvalidSwiftUserAccount,
    SwiftUserAccountWrongMutability,
    SwiftUserOrdersAccountFull,
    SwiftOrderDoesNotExist,
    InvalidSwiftOrderId,
    InvalidPoolId,
    InvalidProtectedMakerModeConfig,
    InvalidPythLazerStorageOwner,
    UnverifiedPythLazerMessage,
    InvalidPythLazerMessage,
    PythLazerMessagePriceFeedMismatch,
    InvalidLiquidateSpotWithSwap,
 ]
CUSTOM_ERROR_MAP: dict[int, CustomError] = {
    6000: InvalidSpotMarketAuthority(),
    6001: InvalidInsuranceFundAuthority(),
    6002: InsufficientDeposit(),
    6003: InsufficientCollateral(),
    6004: SufficientCollateral(),
    6005: MaxNumberOfPositions(),
    6006: AdminControlsPricesDisabled(),
    6007: MarketDelisted(),
    6008: MarketIndexAlreadyInitialized(),
    6009: UserAccountAndUserPositionsAccountMismatch(),
    6010: UserHasNoPositionInMarket(),
    6011: InvalidInitialPeg(),
    6012: InvalidRepegRedundant(),
    6013: InvalidRepegDirection(),
    6014: InvalidRepegProfitability(),
    6015: SlippageOutsideLimit(),
    6016: OrderSizeTooSmall(),
    6017: InvalidUpdateK(),
    6018: AdminWithdrawTooLarge(),
    6019: MathError(),
    6020: BnConversionError(),
    6021: ClockUnavailable(),
    6022: UnableToLoadOracle(),
    6023: PriceBandsBreached(),
    6024: ExchangePaused(),
    6025: InvalidWhitelistToken(),
    6026: WhitelistTokenNotFound(),
    6027: InvalidDiscountToken(),
    6028: DiscountTokenNotFound(),
    6029: ReferrerNotFound(),
    6030: ReferrerStatsNotFound(),
    6031: ReferrerMustBeWritable(),
    6032: ReferrerStatsMustBeWritable(),
    6033: ReferrerAndReferrerStatsAuthorityUnequal(),
    6034: InvalidReferrer(),
    6035: InvalidOracle(),
    6036: OracleNotFound(),
    6037: LiquidationsBlockedByOracle(),
    6038: MaxDeposit(),
    6039: CantDeleteUserWithCollateral(),
    6040: InvalidFundingProfitability(),
    6041: CastingFailure(),
    6042: InvalidOrder(),
    6043: InvalidOrderMaxTs(),
    6044: InvalidOrderMarketType(),
    6045: InvalidOrderForInitialMarginReq(),
    6046: InvalidOrderNotRiskReducing(),
    6047: InvalidOrderSizeTooSmall(),
    6048: InvalidOrderNotStepSizeMultiple(),
    6049: InvalidOrderBaseQuoteAsset(),
    6050: InvalidOrderIOC(),
    6051: InvalidOrderPostOnly(),
    6052: InvalidOrderIOCPostOnly(),
    6053: InvalidOrderTrigger(),
    6054: InvalidOrderAuction(),
    6055: InvalidOrderOracleOffset(),
    6056: InvalidOrderMinOrderSize(),
    6057: PlacePostOnlyLimitFailure(),
    6058: UserHasNoOrder(),
    6059: OrderAmountTooSmall(),
    6060: MaxNumberOfOrders(),
    6061: OrderDoesNotExist(),
    6062: OrderNotOpen(),
    6063: FillOrderDidNotUpdateState(),
    6064: ReduceOnlyOrderIncreasedRisk(),
    6065: UnableToLoadAccountLoader(),
    6066: TradeSizeTooLarge(),
    6067: UserCantReferThemselves(),
    6068: DidNotReceiveExpectedReferrer(),
    6069: CouldNotDeserializeReferrer(),
    6070: CouldNotDeserializeReferrerStats(),
    6071: UserOrderIdAlreadyInUse(),
    6072: NoPositionsLiquidatable(),
    6073: InvalidMarginRatio(),
    6074: CantCancelPostOnlyOrder(),
    6075: InvalidOracleOffset(),
    6076: CantExpireOrders(),
    6077: CouldNotLoadMarketData(),
    6078: PerpMarketNotFound(),
    6079: InvalidMarketAccount(),
    6080: UnableToLoadPerpMarketAccount(),
    6081: MarketWrongMutability(),
    6082: UnableToCastUnixTime(),
    6083: CouldNotFindSpotPosition(),
    6084: NoSpotPositionAvailable(),
    6085: InvalidSpotMarketInitialization(),
    6086: CouldNotLoadSpotMarketData(),
    6087: SpotMarketNotFound(),
    6088: InvalidSpotMarketAccount(),
    6089: UnableToLoadSpotMarketAccount(),
    6090: SpotMarketWrongMutability(),
    6091: SpotMarketInterestNotUpToDate(),
    6092: SpotMarketInsufficientDeposits(),
    6093: UserMustSettleTheirOwnPositiveUnsettledPNL(),
    6094: CantUpdatePoolBalanceType(),
    6095: InsufficientCollateralForSettlingPNL(),
    6096: AMMNotUpdatedInSameSlot(),
    6097: AuctionNotComplete(),
    6098: MakerNotFound(),
    6099: MakerStatsNotFound(),
    6100: MakerMustBeWritable(),
    6101: MakerStatsMustBeWritable(),
    6102: MakerOrderNotFound(),
    6103: CouldNotDeserializeMaker(),
    6104: CouldNotDeserializeMakerStats(),
    6105: AuctionPriceDoesNotSatisfyMaker(),
    6106: MakerCantFulfillOwnOrder(),
    6107: MakerOrderMustBePostOnly(),
    6108: CantMatchTwoPostOnlys(),
    6109: OrderBreachesOraclePriceLimits(),
    6110: OrderMustBeTriggeredFirst(),
    6111: OrderNotTriggerable(),
    6112: OrderDidNotSatisfyTriggerCondition(),
    6113: PositionAlreadyBeingLiquidated(),
    6114: PositionDoesntHaveOpenPositionOrOrders(),
    6115: AllOrdersAreAlreadyLiquidations(),
    6116: CantCancelLiquidationOrder(),
    6117: UserIsBeingLiquidated(),
    6118: LiquidationsOngoing(),
    6119: WrongSpotBalanceType(),
    6120: UserCantLiquidateThemself(),
    6121: InvalidPerpPositionToLiquidate(),
    6122: InvalidBaseAssetAmountForLiquidatePerp(),
    6123: InvalidPositionLastFundingRate(),
    6124: InvalidPositionDelta(),
    6125: UserBankrupt(),
    6126: UserNotBankrupt(),
    6127: UserHasInvalidBorrow(),
    6128: DailyWithdrawLimit(),
    6129: DefaultError(),
    6130: InsufficientLPTokens(),
    6131: CantLPWithPerpPosition(),
    6132: UnableToBurnLPTokens(),
    6133: TryingToRemoveLiquidityTooFast(),
    6134: InvalidSpotMarketVault(),
    6135: InvalidSpotMarketState(),
    6136: InvalidSerumProgram(),
    6137: InvalidSerumMarket(),
    6138: InvalidSerumBids(),
    6139: InvalidSerumAsks(),
    6140: InvalidSerumOpenOrders(),
    6141: FailedSerumCPI(),
    6142: FailedToFillOnExternalMarket(),
    6143: InvalidFulfillmentConfig(),
    6144: InvalidFeeStructure(),
    6145: InsufficientIFShares(),
    6146: MarketActionPaused(),
    6147: MarketPlaceOrderPaused(),
    6148: MarketFillOrderPaused(),
    6149: MarketWithdrawPaused(),
    6150: ProtectedAssetTierViolation(),
    6151: IsolatedAssetTierViolation(),
    6152: UserCantBeDeleted(),
    6153: ReduceOnlyWithdrawIncreasedRisk(),
    6154: MaxOpenInterest(),
    6155: CantResolvePerpBankruptcy(),
    6156: LiquidationDoesntSatisfyLimitPrice(),
    6157: MarginTradingDisabled(),
    6158: InvalidMarketStatusToSettlePnl(),
    6159: PerpMarketNotInSettlement(),
    6160: PerpMarketNotInReduceOnly(),
    6161: PerpMarketSettlementBufferNotReached(),
    6162: PerpMarketSettlementUserHasOpenOrders(),
    6163: PerpMarketSettlementUserHasActiveLP(),
    6164: UnableToSettleExpiredUserPosition(),
    6165: UnequalMarketIndexForSpotTransfer(),
    6166: InvalidPerpPositionDetected(),
    6167: InvalidSpotPositionDetected(),
    6168: InvalidAmmDetected(),
    6169: InvalidAmmForFillDetected(),
    6170: InvalidAmmLimitPriceOverride(),
    6171: InvalidOrderFillPrice(),
    6172: SpotMarketBalanceInvariantViolated(),
    6173: SpotMarketVaultInvariantViolated(),
    6174: InvalidPDA(),
    6175: InvalidPDASigner(),
    6176: RevenueSettingsCannotSettleToIF(),
    6177: NoRevenueToSettleToIF(),
    6178: NoAmmPerpPnlDeficit(),
    6179: SufficientPerpPnlPool(),
    6180: InsufficientPerpPnlPool(),
    6181: PerpPnlDeficitBelowThreshold(),
    6182: MaxRevenueWithdrawPerPeriodReached(),
    6183: MaxIFWithdrawReached(),
    6184: NoIFWithdrawAvailable(),
    6185: InvalidIFUnstake(),
    6186: InvalidIFUnstakeSize(),
    6187: InvalidIFUnstakeCancel(),
    6188: InvalidIFForNewStakes(),
    6189: InvalidIFRebase(),
    6190: InvalidInsuranceUnstakeSize(),
    6191: InvalidOrderLimitPrice(),
    6192: InvalidIFDetected(),
    6193: InvalidAmmMaxSpreadDetected(),
    6194: InvalidConcentrationCoef(),
    6195: InvalidSrmVault(),
    6196: InvalidVaultOwner(),
    6197: InvalidMarketStatusForFills(),
    6198: IFWithdrawRequestInProgress(),
    6199: NoIFWithdrawRequestInProgress(),
    6200: IFWithdrawRequestTooSmall(),
    6201: IncorrectSpotMarketAccountPassed(),
    6202: BlockchainClockInconsistency(),
    6203: InvalidIFSharesDetected(),
    6204: NewLPSizeTooSmall(),
    6205: MarketStatusInvalidForNewLP(),
    6206: InvalidMarkTwapUpdateDetected(),
    6207: MarketSettlementAttemptOnActiveMarket(),
    6208: MarketSettlementRequiresSettledLP(),
    6209: MarketSettlementAttemptTooEarly(),
    6210: MarketSettlementTargetPriceInvalid(),
    6211: UnsupportedSpotMarket(),
    6212: SpotOrdersDisabled(),
    6213: MarketBeingInitialized(),
    6214: InvalidUserSubAccountId(),
    6215: InvalidTriggerOrderCondition(),
    6216: InvalidSpotPosition(),
    6217: CantTransferBetweenSameUserAccount(),
    6218: InvalidPerpPosition(),
    6219: UnableToGetLimitPrice(),
    6220: InvalidLiquidation(),
    6221: SpotFulfillmentConfigDisabled(),
    6222: InvalidMaker(),
    6223: FailedUnwrap(),
    6224: MaxNumberOfUsers(),
    6225: InvalidOracleForSettlePnl(),
    6226: MarginOrdersOpen(),
    6227: TierViolationLiquidatingPerpPnl(),
    6228: CouldNotLoadUserData(),
    6229: UserWrongMutability(),
    6230: InvalidUserAccount(),
    6231: CouldNotLoadUserStatsData(),
    6232: UserStatsWrongMutability(),
    6233: InvalidUserStatsAccount(),
    6234: UserNotFound(),
    6235: UnableToLoadUserAccount(),
    6236: UserStatsNotFound(),
    6237: UnableToLoadUserStatsAccount(),
    6238: UserNotInactive(),
    6239: RevertFill(),
    6240: InvalidMarketAccountforDeletion(),
    6241: InvalidSpotFulfillmentParams(),
    6242: FailedToGetMint(),
    6243: FailedPhoenixCPI(),
    6244: FailedToDeserializePhoenixMarket(),
    6245: InvalidPricePrecision(),
    6246: InvalidPhoenixProgram(),
    6247: InvalidPhoenixMarket(),
    6248: InvalidSwap(),
    6249: SwapLimitPriceBreached(),
    6250: SpotMarketReduceOnly(),
    6251: FundingWasNotUpdated(),
    6252: ImpossibleFill(),
    6253: CantUpdatePerpBidAskTwap(),
    6254: UserReduceOnly(),
    6255: InvalidMarginCalculation(),
    6256: CantPayUserInitFee(),
    6257: CantReclaimRent(),
    6258: InsuranceFundOperationPaused(),
    6259: NoUnsettledPnl(),
    6260: PnlPoolCantSettleUser(),
    6261: OracleNonPositive(),
    6262: OracleTooVolatile(),
    6263: OracleTooUncertain(),
    6264: OracleStaleForMargin(),
    6265: OracleInsufficientDataPoints(),
    6266: OracleStaleForAMM(),
    6267: UnableToParsePullOracleMessage(),
    6268: MaxBorrows(),
    6269: OracleUpdatesNotMonotonic(),
    6270: OraclePriceFeedMessageMismatch(),
    6271: OracleUnsupportedMessageType(),
    6272: OracleDeserializeMessageFailed(),
    6273: OracleWrongGuardianSetOwner(),
    6274: OracleWrongWriteAuthority(),
    6275: OracleWrongVaaOwner(),
    6276: OracleTooManyPriceAccountUpdates(),
    6277: OracleMismatchedVaaAndPriceUpdates(),
    6278: OracleBadRemainingAccountPublicKey(),
    6279: FailedOpenbookV2CPI(),
    6280: InvalidOpenbookV2Program(),
    6281: InvalidOpenbookV2Market(),
    6282: NonZeroTransferFee(),
    6283: LiquidationOrderFailedToFill(),
    6284: InvalidPredictionMarketOrder(),
    6285: InvalidVerificationIxIndex(),
    6286: SigVerificationFailed(),
    6287: MismatchedSwiftOrderParamsMarketIndex(),
    6288: InvalidSwiftOrderParam(),
    6289: PlaceAndTakeOrderSuccessConditionFailed(),
    6290: InvalidHighLeverageModeConfig(),
    6291: InvalidRFQUserAccount(),
    6292: RFQUserAccountWrongMutability(),
    6293: RFQUserAccountFull(),
    6294: RFQOrderNotFilled(),
    6295: InvalidRFQOrder(),
    6296: InvalidRFQMatch(),
    6297: InvalidSwiftUserAccount(),
    6298: SwiftUserAccountWrongMutability(),
    6299: SwiftUserOrdersAccountFull(),
    6300: SwiftOrderDoesNotExist(),
    6301: InvalidSwiftOrderId(),
    6302: InvalidPoolId(),
    6303: InvalidProtectedMakerModeConfig(),
    6304: InvalidPythLazerStorageOwner(),
    6305: UnverifiedPythLazerMessage(),
    6306: InvalidPythLazerMessage(),
    6307: PythLazerMessagePriceFeedMismatch(),
    6308: InvalidLiquidateSpotWithSwap(),
}

def from_code(code: int) -> typing.Optional[CustomError]:
    maybe_err = CUSTOM_ERROR_MAP.get(code)
    if maybe_err is None:
        return None
    return maybe_err

